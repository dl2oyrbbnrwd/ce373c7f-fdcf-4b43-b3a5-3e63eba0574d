<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSBuild.ExtensionPack.TaskFactory.PowerShell</name>
    </assembly>
    <members>
        <member name="T:MSBuild.ExtensionPack.TaskFactory.PowerShellTask">
            <summary>
            A task that executes a Windows PowerShell script.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.TaskFactory.PowerShellTask.pipeline">
            <summary>
            The context that the Windows PowerShell script will run under.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory">
            <summary>
            A task factory that enables inline PowerShell scripts to execute as part of an MSBuild-based build.
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <AssemblyFile>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.TaskFactory.PowerShell.dll</AssemblyFile>
                    <AssemblyFile Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\BuildBinaries\MSBuild.ExtensionPack.TaskFactory.PowerShell.dll')">$(MSBuildProjectDirectory)\..\..\..\BuildBinaries\MSBuild.ExtensionPack.TaskFactory.PowerShell.dll</AssemblyFile>
                </PropertyGroup>
                <UsingTask TaskFactory="PowershellTaskFactory" TaskName="Add" AssemblyFile="$(AssemblyFile)">
                    <ParameterGroup>
                        <First Required="true" ParameterType="System.Int32" />
                        <Second Required="true" ParameterType="System.Int32" />
                        <Sum Output="true" />
                    </ParameterGroup>
                    <Task>
                       <!-- Make this a proper CDATA section before running. -->
                      CDATA[
                    $log.LogMessage([Microsoft.Build.Framework.MessageImportance]"High", "Hello from PowerShell!  Now adding {0} and {1}.", $first, $second)
                    if ($first + $second -gt 100) {
                      $log.LogError("Oops!  I can't count that high. :(")
                    }
                    $sum = $first + $second
                  ]]
                    </Task>
                </UsingTask>
                <UsingTask TaskFactory="PowershellTaskFactory" TaskName="Subtract" AssemblyFile="$(AssemblyFile)">
                    <ParameterGroup>
                        <First Required="true" ParameterType="System.Int32" />
                        <Second Required="true" ParameterType="System.Int32" />
                        <Difference Output="true" />
                    </ParameterGroup>
                    <Task>
                       <!-- Make this a proper CDATA section before running. -->
                        CDATA[
                    $difference = $first - $second
                  ]
                    </Task>
                </UsingTask>
                <PropertyGroup>
                    <!-- Try making the sum go over 100 to see what happens. -->
                    <FirstNumber>5</FirstNumber>
                    <SecondNumber>8</SecondNumber>
                </PropertyGroup>
                <Target Name="Build">
                    <Add First="$(FirstNumber)" Second="$(SecondNumber)">
                        <Output TaskParameter="Sum" PropertyName="MySum" />
                    </Add>
                    <Message Importance="High" Text="The $(FirstNumber) + $(SecondNumber) = $(MySum)" />
                    <Subtract First="$(FirstNumber)" Second="$(SecondNumber)">
                        <Output TaskParameter="Difference" PropertyName="MyDifference" />
                    </Subtract>
                    <Message Importance="High" Text="The $(FirstNumber) - $(SecondNumber) = $(MyDifference)" />
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="F:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory.paramGroup">
            <summary>
            The in and out parameters of the generated tasks.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory.script">
            <summary>
            The body of the PowerShell script given by the project file.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory.FactoryName">
            <summary>
            Get the Factory Name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory.TaskType">
            <summary>
            The type of Task
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)">
            <summary>
            Initialize the Task Factory
            </summary>
            <param name="taskName">The name of the Task</param>
            <param name="parameterGroup">IDictionary</param>
            <param name="taskBody">The Task body</param>
            <param name="taskFactoryLoggingHost">IBuildEngine</param>
            <returns>bool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)">
            <summary>
            Create a Task.
            </summary>
            <param name="taskFactoryLoggingHost">IBuildEngine</param>
            <returns>ITask</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)">
            <summary>
            Cleanup the Task
            </summary>
            <param name="task">ITask</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.TaskFactory.PowerShellTaskFactory.GetTaskParameters">
            <summary>
            Get the Task Parameters
            </summary>
            <returns>TaskPropertyInfo</returns>
        </member>
    </members>
</doc>
