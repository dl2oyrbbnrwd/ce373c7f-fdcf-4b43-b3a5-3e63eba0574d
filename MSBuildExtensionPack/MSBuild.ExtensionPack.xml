<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSBuild.ExtensionPack</name>
    </assembly>
    <members>
        <member name="T:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask">
            <summary>
            Provides a common task for all the MSBuildExtensionPack Tasks that need to be instantiated in their own app domain.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.TaskAction">
            <summary>
            Sets the TaskAction.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.MachineName">
            <summary>
            Sets the MachineName.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.UserName">
            <summary>
            Sets the UserName
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.UserPassword">
            <summary>
            Sets the UserPassword.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.Authority">
            <summary>
            Sets the authority to be used to authenticate the specified user.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.AuthenticationLevel">
            <summary>
            Sets the authentication level to be used to connect to WMI. Default is Default. Also supports: Call, Connect, None, Packet, PacketIntegrity, PacketPrivacy, Unchanged
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.LogExceptionStack">
            <summary>
            Set to true to log the full Exception Stack to the console.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.SuppressTaskMessages">
            <summary>
            Set to true to suppress all Message logging by tasks. Errors and Warnings are not affected.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.TargetingLocalMachine">
            <summary>
            Determines whether the task is targeting the local machine
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.TargetingLocalMachine(System.Boolean)">
            <summary>
            Determines whether the task is targeting the local machine
            </summary>
            <param name="canExecuteRemotely">True if the current TaskAction can run against a remote machine</param>
            <returns>bool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.BaseAppDomainIsolatedTask.InternalExecute">
            <summary>
            This is the main InternalExecute method that all tasks should implement
            </summary>
            <remarks>
            LogError should be thrown in the event of errors
            </remarks>
        </member>
        <member name="T:MSBuild.ExtensionPack.BaseTask">
            <summary>
            Provides a common task for all the MSBuildExtensionPack Tasks
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.TaskAction">
            <summary>
            Sets the TaskAction.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.MachineName">
            <summary>
            Sets the MachineName.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.UserName">
            <summary>
            Sets the UserName
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.UserPassword">
            <summary>
            Sets the UserPassword.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.Authority">
            <summary>
            Sets the authority to be used to authenticate the specified user.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.AuthenticationLevel">
            <summary>
            Sets the authentication level to be used to connect to WMI. Default is Default. Also supports: Call, Connect, None, Packet, PacketIntegrity, PacketPrivacy, Unchanged
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.LogExceptionStack">
            <summary>
            Set to true to log the full Exception Stack to the console.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.SuppressTaskMessages">
            <summary>
            Set to true to suppress all Message logging by tasks. Errors and Warnings are not affected.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.BaseTask.ErrorOnDeprecated">
            <summary>
            Set to true to error if the task has been deprecated
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.BaseTask.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.BaseTask.TargetingLocalMachine">
            <summary>
            Determines whether the task is targeting the local machine
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.BaseTask.TargetingLocalMachine(System.Boolean)">
            <summary>
            Determines whether the task is targeting the local machine
            </summary>
            <param name="canExecuteRemotely">True if the current TaskAction can run against a remote machine</param>
            <returns>bool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.BaseTask.InternalExecute">
            <summary>
            This is the main InternalExecute method that all tasks should implement
            </summary>
            <remarks>
            LogError should be thrown in the event of errors
            </remarks>
        </member>
        <member name="T:MSBuild.ExtensionPack.CodeQuality.NUnit3">
            <summary>
            Executes Test Cases using NUnit (Tested using v3.0.1)
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <PropertyGroup>
                <ToolPath>D:\Program Files (x86)\NUnit 3.0.5610\bin\net-4.0</ToolPath>
              </PropertyGroup>
              <Target Name="Default">
                <ItemGroup>
                  <Assemblies Include="d:\a\*.dll"/>
                </ItemGroup>
                <!-- Run an NUnit Project -->
                <MSBuild.ExtensionPack.CodeQuality.NUnit3 Assemblies="d:\a\Project1.nunit" ToolPath="$(ToolPath)">
                  <Output TaskParameter="Total" PropertyName="ResultTotal"/>
                  <Output TaskParameter="NotRun" PropertyName="ResultNotRun"/>
                  <Output TaskParameter="Failures" PropertyName="ResultFailures"/>
                  <Output TaskParameter="Errors" PropertyName="ResultErrors"/>
                  <Output TaskParameter="Inconclusive" PropertyName="ResultInconclusive"/>
                  <Output TaskParameter="Ignored" PropertyName="ResultIgnored"/>
                  <Output TaskParameter="Skipped" PropertyName="ResultSkipped"/>
                  <Output TaskParameter="Invalid" PropertyName="ResultInvalid"/>
                </MSBuild.ExtensionPack.CodeQuality.NUnit3>
                <Message Text="ResultTotal: $(ResultTotal)"/>
                <Message Text="ResultNotRun: $(ResultNotRun)"/>
                <Message Text="ResultFailures: $(ResultFailures)"/>
                <Message Text="ResultErrors: $(ResultErrors)"/>
                <Message Text="ResultInconclusive: $(ResultInconclusive)"/>
                <Message Text="ResultIgnored: $(ResultIgnored)"/>
                <Message Text="ResultSkipped: $(ResultSkipped)"/>
                <Message Text="ResultInvalid: $(ResultInvalid)"/>
                <!--- Run NUnit over a collection of assemblies -->
                <MSBuild.ExtensionPack.CodeQuality.NUnit3 Assemblies="@(Assemblies)" ToolPath="$(ToolPath)" OutputXmlFile="D:\a\NunitResults2.xml">
                  <Output TaskParameter="Total" PropertyName="ResultTotal"/>
                  <Output TaskParameter="NotRun" PropertyName="ResultNotRun"/>
                  <Output TaskParameter="Failures" PropertyName="ResultFailures"/>
                  <Output TaskParameter="Errors" PropertyName="ResultErrors"/>
                  <Output TaskParameter="Inconclusive" PropertyName="ResultInconclusive"/>
                  <Output TaskParameter="Ignored" PropertyName="ResultIgnored"/>
                  <Output TaskParameter="Skipped" PropertyName="ResultSkipped"/>
                  <Output TaskParameter="Invalid" PropertyName="ResultInvalid"/>
                </MSBuild.ExtensionPack.CodeQuality.NUnit3>
                <Message Text="ResultTotal: $(ResultTotal)"/>
                <Message Text="ResultNotRun: $(ResultNotRun)"/>
                <Message Text="ResultFailures: $(ResultFailures)"/>
                <Message Text="ResultErrors: $(ResultErrors)"/>
                <Message Text="ResultInconclusive: $(ResultInconclusive)"/>
                <Message Text="ResultIgnored: $(ResultIgnored)"/>
                <Message Text="ResultSkipped: $(ResultSkipped)"/>
                <Message Text="ResultInvalid: $(ResultInvalid)"/>
              </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Assemblies">
            <summary>
            Gets or sets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Use32Bit">
            <summary>
            Run tests in an x86 process on 64 bit systems.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.FailOnFailures">
            <summary>
            Set to true to fail the task if this.Failures > 0. Helps for batching purposes. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Where">
            <summary>
            Test selection indicating what tests will be run. See documentation.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.DisposeRunners">
            <summary>
            Dispose each test runner after it has finished running its tests. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Agents">
            <summary>
            Specify the maximum number of test assembly agents to run at one time. If not specified,
            there is no limit.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.OutputXmlFile">
            <summary>
            Sets the OutputXmlFile name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.ErrorOutputFile">
            <summary>
            Sets the File to receive test error output
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.OutputFile">
            <summary>
            File to receive test output
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.WorkerThreads">
            <summary>
            Number of worker threads to be used in running tests. If not specified, defaults to
            2 or the number of processors, whichever is greater.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Failures">
            <summary>
            Gets the Failures count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.NotRun">
            <summary>
            Gets the NotRun count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Total">
            <summary>
            Gets the Total count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Errors">
            <summary>
            Gets the Errors count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Inconclusive">
            <summary>
            Gets the Inconclusive count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Ignored">
            <summary>
            Gets the Ignored count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Skipped">
            <summary>
            Gets the Skipped count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Invalid">
            <summary>
            Gets the Invalid count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.NoShadow">
            <summary>
            Disable shadow copy when running in separate domain. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Configuration">
            <summary>
            Sets the Project configuration (e.g.: Debug) to load
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Process">
            <summary>
            PROCESS isolation for test assemblies. Values: Single, Separate, Multiple. If not 
            specified, defaults to Separate for a single assembly or Multiple for more than one.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Domain">
            <summary>
            DOMAIN isolation for test assemblies. Values: None, Single, Multiple. If not
            specified, defaults to Separate for a single assembly or Multiple for more than one.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Framework">
            <summary>
            FRAMEWORK type/version to use for tests. Examples: mono, net-3.5, v4.0, 2.0, mono-4.0.
            If not specified, tests will run under the framework they are compiled with.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.TestTimeout">
            <summary>
            Set timeout for each test case in milliseconds
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Labels">
            <summary>
            Specify whether to write test case names to the output. Values: Off, On, All
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.Test">
            <summary>
            Name of the test case(s), fixture(s) or namespace(s) to run
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit3.TeamCity">
            <summary>
            Turns on use of TeamCity service messages.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.CodeQuality.NUnit3.ProcessXmlResultsFile">
            <summary>
            Processes the nunit results
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.CodeQuality.NUnit">
            <summary>
            Executes Test Cases using NUnit (Tested using v2.6.2)
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <PropertyGroup>
                <ToolPath>D:\Program Files (x86)\NUnit 2.5.7\bin\net-2.0</ToolPath>
              </PropertyGroup>
              <Target Name="Default">
                <ItemGroup>
                  <Assemblies Include="d:\a\*.dll"/>
                </ItemGroup>
                <!-- Run an NUnit Project -->
                <MSBuild.ExtensionPack.CodeQuality.NUnit Assemblies="d:\a\Project1.nunit" ToolPath="$(ToolPath)">
                  <Output TaskParameter="Total" PropertyName="ResultTotal"/>
                  <Output TaskParameter="NotRun" PropertyName="ResultNotRun"/>
                  <Output TaskParameter="Failures" PropertyName="ResultFailures"/>
                  <Output TaskParameter="Errors" PropertyName="ResultErrors"/>
                  <Output TaskParameter="Inconclusive" PropertyName="ResultInconclusive"/>
                  <Output TaskParameter="Ignored" PropertyName="ResultIgnored"/>
                  <Output TaskParameter="Skipped" PropertyName="ResultSkipped"/>
                  <Output TaskParameter="Invalid" PropertyName="ResultInvalid"/>
                </MSBuild.ExtensionPack.CodeQuality.NUnit>
                <Message Text="ResultTotal: $(ResultTotal)"/>
                <Message Text="ResultNotRun: $(ResultNotRun)"/>
                <Message Text="ResultFailures: $(ResultFailures)"/>
                <Message Text="ResultErrors: $(ResultErrors)"/>
                <Message Text="ResultInconclusive: $(ResultInconclusive)"/>
                <Message Text="ResultIgnored: $(ResultIgnored)"/>
                <Message Text="ResultSkipped: $(ResultSkipped)"/>
                <Message Text="ResultInvalid: $(ResultInvalid)"/>
                <!--- Run NUnit over a collection of assemblies -->
                <MSBuild.ExtensionPack.CodeQuality.NUnit Assemblies="@(Assemblies)" ToolPath="$(ToolPath)" OutputXmlFile="D:\a\NunitResults2.xml">
                  <Output TaskParameter="Total" PropertyName="ResultTotal"/>
                  <Output TaskParameter="NotRun" PropertyName="ResultNotRun"/>
                  <Output TaskParameter="Failures" PropertyName="ResultFailures"/>
                  <Output TaskParameter="Errors" PropertyName="ResultErrors"/>
                  <Output TaskParameter="Inconclusive" PropertyName="ResultInconclusive"/>
                  <Output TaskParameter="Ignored" PropertyName="ResultIgnored"/>
                  <Output TaskParameter="Skipped" PropertyName="ResultSkipped"/>
                  <Output TaskParameter="Invalid" PropertyName="ResultInvalid"/>
                </MSBuild.ExtensionPack.CodeQuality.NUnit>
                <Message Text="ResultTotal: $(ResultTotal)"/>
                <Message Text="ResultNotRun: $(ResultNotRun)"/>
                <Message Text="ResultFailures: $(ResultFailures)"/>
                <Message Text="ResultErrors: $(ResultErrors)"/>
                <Message Text="ResultInconclusive: $(ResultInconclusive)"/>
                <Message Text="ResultIgnored: $(ResultIgnored)"/>
                <Message Text="ResultSkipped: $(ResultSkipped)"/>
                <Message Text="ResultInvalid: $(ResultInvalid)"/>
              </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Version">
            <summary>
            The version of NUnit to run. Default is 2.6.2
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Assemblies">
            <summary>
            Gets or sets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Use32Bit">
            <summary>
            Set to true to run nunit-console-x86.exe
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.FailOnFailures">
            <summary>
            Set to true to fail the task if this.Failures > 0. Helps for batching purposes. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.IncludeCategory">
            <summary>
            Comma separated list of categories to include.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.ExcludeCategory">
            <summary>
            Comma separated list of categories to exclude.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.OutputXmlFile">
            <summary>
            Sets the OutputXmlFile name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.ErrorOutputFile">
            <summary>
            Sets the File to receive test error output
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.OutputFile">
            <summary>
            File to receive test output
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.NoThread">
            <summary>
            Disable use of a separate thread for tests. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Failures">
            <summary>
            Gets the Failures count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.NotRun">
            <summary>
            Gets the NotRun count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Total">
            <summary>
            Gets the Total count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Errors">
            <summary>
            Gets the Errors count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Inconclusive">
            <summary>
            Gets the Inconclusive count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Ignored">
            <summary>
            Gets the Ignored count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Skipped">
            <summary>
            Gets the Skipped count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Invalid">
            <summary>
            Gets the Invalid count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.NoShadow">
            <summary>
            Disable shadow copy when running in separate domain. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Configuration">
            <summary>
            Sets the Project configuration (e.g.: Debug) to load
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Process">
            <summary>
            Process model for tests. Supports Single, Separate, Multiple. Single is the Default
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Domain">
            <summary>
            AppDomain Usage for tests. Supports None, Single, Multiple. The default is to use multiple domains if multiple assemblies are listed on the command line. Otherwise a single domain is used.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Framework">
            <summary>
            Framework version to be used for tests
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.TestTimeout">
            <summary>
            Set timeout for each test case in milliseconds
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Labels">
            <summary>
            Label each test in stdOut. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.NUnit.Run">
            <summary>
            Name of the test case(s), fixture(s) or namespace(s) to run
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.CodeQuality.NUnit.ProcessXmlResultsFile">
            <summary>
            Processes the nunit results
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.CodeQuality.FxCop">
            <summary>
            The FxCop task provides a basic wrapper over FxCopCmd.exe. See http://msdn.microsoft.com/en-gb/library/bb429449(VS.80).aspx for more details.
            <para/>
            <b>Valid TaskActions are:</b>
            <para><i>Analyse</i> (<b>Required: </b> Project and / or Files, OutputFile <b>Optional: </b>DependencyDirectories, Imports, Rules, ShowSummary, UpdateProject, Verbose, UpdateProject, LogToConsole, Types, FxCopPath, ReportXsl, OutputFile, ConsoleXsl, Project, SearchGac, IgnoreInvalidTargets, Quiet, ForceOutput, AspNetOnly, IgnoreGeneratedCode, OverrideRuleVisibilities, FailOnMissingRules, SuccessFile, Dictionary, Ruleset, RulesetDirectory, References, AssemblyCompareMode <b>Output: </b>AnalysisFailed, OutputText, ExitCode)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <ItemGroup>
                <!--- Need to add to the dependencies because MSBuild.ExtensionPack.CodeQuality.StyleCop.dll references StyleCop -->
                <DependencyDirectories Include="c:\Program Files (x86)\MSBuild\Microsoft\StyleCop\v4.4"/>
                <!-- Define a bespoke set of rules to run. Prefix the Rules path with ! to treat warnings as errors -->
                <Rules Include="C:\Program Files (x86)\Microsoft Fxcop 10.0\Rules\DesignRules.dll"/>
                <Files Include="C:\Projects\MSBuildExtensionPack\Releases\4.0.1.0\Main\BuildBinaries\MSBuild.ExtensionPack.StyleCop.dll"/>
              </ItemGroup>
              <Target Name="Default">
                <!-- Call the task using a collection of files and all default rules -->
                <MSBuild.ExtensionPack.CodeQuality.FxCop TaskAction="Analyse" Files="@(Files)" OutputFile="c:\fxcoplog1.txt">
                  <Output TaskParameter="AnalysisFailed" PropertyName="Result"/>
                </MSBuild.ExtensionPack.CodeQuality.FxCop>
                <Message Text="CA1 Failed: $(Result)"/>
                <!-- Call the task using a project file -->
                <MSBuild.ExtensionPack.CodeQuality.FxCop TaskAction="Analyse" Files="@(Files)" Project="C:\Projects\MSBuildExtensionPack\Releases\4.0.1.0\Main\Framework\XmlSamples\FXCop.FxCop" DependencyDirectories="@(DependencyDirectories)" OutputFile="c:\fxcoplog2.txt">
                  <Output TaskParameter="AnalysisFailed" PropertyName="Result"/>
                </MSBuild.ExtensionPack.CodeQuality.FxCop>
                <Message Text="CA2 Failed: $(Result)"/>
                <!-- Call the task using a collection of files and bespoke rules. We can access the exact failure message using OutputText -->
                <MSBuild.ExtensionPack.CodeQuality.FxCop TaskAction="Analyse" Rules="@(Rules)" Files="@(Files)"  OutputFile="c:\fxcoplog3.txt" LogToConsole="true">
                  <Output TaskParameter="AnalysisFailed" PropertyName="Result"/>
                  <Output TaskParameter="OutputText" PropertyName="Text"/>
                </MSBuild.ExtensionPack.CodeQuality.FxCop>
                <Message Text="CA3 Failed: $(Result)"/>
                <Message Text="Failure Text: $(Text)" Condition="$(Result) == 'true'"/>
              </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="F:MSBuild.ExtensionPack.CodeQuality.FxCop.CompareMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.CodeQuality.FxCop.CompareMode.StrongName">
            <summary>
            StrongName
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.CodeQuality.FxCop.CompareMode.StrongNameIgnoringVersion">
            <summary>
            StrongNameIgnoringVersion
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.AssemblyCompareMode">
            <summary>
            Set the assembly comparison mode. Supports None, StrongName, StrongNameIgnoringVersion. Default is StrongName.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Files">
            <summary>
            Sets the Item Collection of assemblies to analyse (/file option)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.References">
            <summary>
            Sets the Item Collection of assemblies to reference (/reference option)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.DependencyDirectories">
            <summary>
            Sets the DependencyDirectories :(/directory option)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Imports">
            <summary>
            Sets the name of an analysis report or project file to import (/import option)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Rules">
            <summary>
            Sets the location of rule libraries to load (/rule option). Prefix the Rules path with ! to treat warnings as errors
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.ShowSummary">
            <summary>
            Set to true to display a summary (/summary option). Default is true
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.SearchGac">
            <summary>
            Set to true to search the GAC for missing assembly references (/gac option). Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.SuccessFile">
            <summary>
            Set to true to create .lastcodeanalysissucceeded file in output report directory if no build-breaking messages occur during analysis. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.OverrideRuleVisibilities">
            <summary>
            Set to true to run all overridable rules against all targets. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Timeout">
            <summary>
            Set the override timeout for analysis deadlock detection. Analysis will be aborted when analysis of a single item by a single rule exceeds the specified amount of time. Default is 0 to disable deadlock detection.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.FailOnMissingRules">
            <summary>
            Set to true to treat missing rules or rule sets as an error and halt execution. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.IgnoreGeneratedCode">
            <summary>
            Set to true to suppress analysis results against generated code. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.AspNetOnly">
            <summary>
            Set to true to analyze only ASP.NET-generated binaries and honor global suppressions in App_Code.dll for all assemblies under analysis. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.IgnoreInvalidTargets">
            <summary>
            Set to true to silently ignore invalid target files. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Quiet">
            <summary>
            Set to true to suppress all console output other than the reporting implied by /console or /consolexsl. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.ForceOutput">
            <summary>
            Set to true to write output XML and project files even in the case where no violations occurred. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Verbose">
            <summary>
            Set to true to output verbose information during analysis (/verbose option)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.UpdateProject">
            <summary>
            Saves the results of the analysis in the project file. This option is ignored if the /project option is not specified (/update option)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.LogToConsole">
            <summary>
            Set to true to direct analysis output to the console (/console option). Default is true
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Types">
            <summary>
            Specifies the types to analyze
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.RulesetDirectory">
            <summary>
            Specifies the directory to search for rule set files that are specified by the Ruleset switch or are included by one of the specified rule sets.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Ruleset">
            <summary>
            Specifies the Rule set to be used for the analysis. It can be a file path to the rule set file or the file name of 
            a built-in rule set. '+' enables all rules in the rule set; '-' disables all rules in the rule set; '=' sets rules 
            to match the rule set and disables all rules that are not enabled in the rule set
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.FxCopPath">
            <summary>
            Sets the path to FxCopCmd.exe. Default is [Program Files]\Microsoft FxCop 1.36\FxCopCmd.exe
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.ReportXsl">
            <summary>
            Sets the ReportXsl (/outXsl: option)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.OutputFile">
            <summary>
            Set the name of the file for the analysis report
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.ConsoleXsl">
            <summary>
            Sets the ConsoleXsl (/consoleXsl option)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Dictionary">
            <summary>
            Sets the custom dictionary used by spelling rules.Default is no custom dictionary
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.Project">
            <summary>
            Set the name of the .fxcop project to use
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.AnalysisFailed">
            <summary>
            Gets AnalysisFailed. True if FxCop logged Code Analysis errors to the Output file.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.ExitCode">
            <summary>
            The exit code returned from FxCop
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.CodeQuality.FxCop.OutputText">
            <summary>
            Gets the OutputText emitted during analysis
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.Ftp">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>UploadFiles</i> (<b>Required:</b> Host, FileNames <b>Optional:</b> UserName, UserPassword, WorkingDirectory, RemoteDirectoryName, Port)</para>
            <para><i>DownloadFiles</i> (<b>Required:</b> Host <b>Optional:</b> FileNames, UserName, UserPassword, WorkingDirectory, RemoteDirectoryName, Port)</para>    
            <para><i>DeleteFiles</i> (<b>Required:</b> Host, FileNames <b>Optional:</b> UserName, UserPassword, WorkingDirectory, RemoteDirectoryName, Port)</para>    
            <para><i>DeleteDirectory</i> (<b>Required:</b> Host<b>Optional:</b> UserName, UserPassword, WorkingDirectory, RemoteDirectoryName, Port)</para>    
            <para><i>CreateDirectory</i> (<b>Required:</b> Host<b>Optional:</b> UserName, UserPassword, WorkingDirectory, RemoteDirectoryName, Port)</para>    
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                <ftpHost>localhost</ftpHost>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <Target Name="Default">
                <ItemGroup>
                  <!-- Specify FilesToUpload -->
                  <FilesToUpload Include="C:\demo.txt" />
                  <FilesToUpload Include="C:\demo2.txt" />
                </ItemGroup>
                <MSBuild.ExtensionPack.Communication.Ftp TaskAction="UploadFiles" Host="$(ftpHost)" FileNames="@(FilesToUpload)"/>
                <ItemGroup>
                  <!-- Specify the files to Download-->
                  <FilesToDownload Include="demo2.txt" />
                  <FilesToDownload Include="demo.txt" />
                </ItemGroup>
                <MSBuild.ExtensionPack.Communication.Ftp TaskAction="DownloadFiles" Host="$(ftpHost)" FileNames="@(FilesToDownload)" WorkingDirectory="C:\FtpWorkingFolder"/>
                <MSBuild.ExtensionPack.Communication.Ftp TaskAction="CreateDirectory" Host="$(ftpHost)" RemoteDirectoryName="NewFolder1"/>
                <MSBuild.ExtensionPack.Communication.Ftp TaskAction="CreateDirectory" Host="$(ftpHost)" RemoteDirectoryName="NewFolder2"/>
                <MSBuild.ExtensionPack.Communication.Ftp TaskAction="DeleteDirectory" Host="$(ftpHost)" RemoteDirectoryName="NewFolder1"/>
                <MSBuild.ExtensionPack.Communication.Ftp TaskAction="DeleteFiles" Host="$(ftpHost)" FileNames="@(FilesToDownload)" />
              </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Ftp.Host">
            <summary>
            Sets the Host of the FTP Site.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Ftp.RemoteDirectoryName">
            <summary>
            Sets the Remote Path to connect to the FTP Site
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Ftp.WorkingDirectory">
            <summary>
            Sets the working directory on the local machine
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Ftp.Port">
            <summary>
            The port used to connect to the ftp server.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Ftp.Overwrite">
            <summary>
            Sets if the upload action will overwrite existing files
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Ftp.FileNames">
            <summary>
            The list of files that needs to be transfered over FTP
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Ftp.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Ftp.CreateDirectory">
            <summary>
            Creates a new Ftp directory on the ftp server.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Ftp.DeleteDirectory">
            <summary>
            Deletes an Ftp directory on the ftp server.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Ftp.DeleteFiles">
            <summary>
            Delete given files from the FTP Directory
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Ftp.UploadFiles">
            <summary>
            Upload Files 
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Ftp.DownloadFiles">
            <summary>
            Download Files 
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Ftp.CreateFtpConnection">
            <summary>
            Creates an FTP Connection object 
            </summary>
            <returns>An initialised FTP Connection</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.Extended.Extensions">
            <summary>
            Helper class used to convert FILETIME to DateTime
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.Extensions.ToDateTime(MSBuild.ExtensionPack.Communication.Extended.NativeMethods.FILETIME)">
            <summary>
            Converts given datetime in FILETIME struct format and convert it to .Net DateTime.
            </summary>
            <param name="time">The given time in FileTime structure format</param>
            <returns>The DateTime equivalent of the given fileTime</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.Extended.FtpConnection">
            <summary>
            The <c>FtpConnection</c> class provides the ability to connect and perform operations on FTP servers.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FtpConnection class.
            </summary>
            <param name="host">The host name of the ftp site where the connection would be made.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the FtpConnection class.
            </summary>
            <param name="host">The host of the ftp site where the connection would be made.</param>
            <param name="port">The port to connect to.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the FtpConnection class.
            </summary>
            <param name="host">The host of the ftp site where the connection would be made.</param>
            <param name="userName">The userName used to make the FTP connection</param>
            <param name="password">The password for the user connecting to the ftp site</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the FtpConnection class.
            </summary>
            <param name="host">The host of the ftp site where the connection would be made.</param>
            <param name="port">The port to make the connection on</param>
            <param name="userName">The userName used to make the FTP connection</param>
            <param name="password">The Password used to make the FTP connection</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.Finalize">
            <summary>
            Finalizes an instance of the FtpConnection class. 
            Disposable types with unmanaged resources need to implement a finalizer.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.SetLocalDirectory(System.String)">
            <summary>
            Sets the directory on the local machine used to upload / download files.
            </summary>
            <param name="directory">The directory file path.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.LogOn">
            <summary>
            LogOn to the given FTP host using the given ftp UserName and Password
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current directory on FTP site to the given directory path
            </summary>
            <param name="directory">The directory path to set on the FTP site.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.GetCurrentDirectory">
            <summary>
            Returns the directory currently set on the Ftp site in current session.
            </summary>
            <returns>The path of the current directory</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.GetCurrentDirectoryInfo">
            <summary>
            Returns Directory information of the the currently selected directory.
            </summary>
            <returns>A FtpDirectoryInfo object containing information of the current directory.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.GetFile(System.String,System.Boolean)">
            <summary>
            Download a file from the current remote directory ftp directory to the current local selected directory
            </summary>
            <param name="remoteFile">The name of the file to be downloaded.</param>
            <param name="failIfExists">Flag to indicate whether to overwrite the file if it exists already in local directory.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.GetFile(System.String,System.String,System.Boolean)">
            <summary>
            Download a file from the current remote directory ftp directory to the current local selected directory
            </summary>
            <param name="remoteFile">The name of the file to be downloaded.</param>
            <param name="localFile">The name of the file to be save locally as.</param>
            <param name="failIfExists">Flag to indicate whether to overwrite the file if it exists already in local directory.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.PutFile(System.String)">
            <summary>
            Upload a file from the current local directory to the ftp directory currently selected
            </summary>
            <param name="fileName">The name of the file to be uploaded.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.PutFile(System.String,System.String)">
            <summary>
            Upload a file from the current local directory to the ftp directory currently selected
            </summary>
            <param name="localFile">The name of the file to be uploaded.</param>
            <param name="remoteFile">The remote name of the file.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.RenameFile(System.String,System.String)">
            <summary>
            Rename a file on the remote FTP directory
            </summary>
            <param name="fileName">The name of the file to be renamed.</param>
            <param name="newFileName">The name the file needs to be renamed to.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.DeleteFile(System.String)">
            <summary>
            Deletes a file in the Ftp remote directory
            </summary>
            <param name="fileName">The name of the file to be deleted.</param>        
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.DeleteDirectory(System.String)">
            <summary>
            Deletes a file in the Ftp remote directory
            </summary>
            <param name="directory">The name of the file to be deleted.</param>        
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.GetFiles">
            <summary>
            Retrieves the list of all files in the ftp directory currently selected
            </summary> 
            <returns>Returns the list of files present in the current ftp directory.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.GetFiles(System.String)">
            <summary>
            Retrieves the list of all files in the ftp directory currently selected whose name matches the fileName mask
            </summary>
            <param name="mask">The search criteria to return files.</param>        
            <returns>Returns the list of files present in the current ftp directory.</returns>        
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.GetDirectories">
            <summary>
            Retrieves the list of all directories in the ftp directory currently selected.
            </summary>
            <returns>Returns the list of diretories present in the current ftp directory.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.GetDirectories(System.String)">
            <summary>
            Retrieves the list of all directories in the given ftp directory 
            </summary>
            <param name="path">The remote ftp directory path.</param>        
            <returns>Returns the list of diretories present in the given ftp directory.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.CreateDirectory(System.String)">
            <summary>
            Creates a directory in the remote ftp directory
            </summary>
            <param name="path">The path of the ftp directory.</param>        
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.DirectoryExists(System.String)">
            <summary>
            Checks whether the given directory exists on the remote ftp server or not
            </summary>
            <param name="path">The path of the directory to check whether it exists or not.</param>
            <returns>True if the directory exists, false otherwise</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.FileExists(System.String)">
            <summary>
            Checks whether the given file exists on the remote ftp server or not
            </summary>
            <param name="path">The path of the file to check whether it exists or not.</param>
            <returns>True if the file exists, false otherwise</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.SendCommand(System.String)">
            <summary>
            Sends a command line command to the remote ftp server.
            </summary>
            <param name="cmd">The command to execute remotely on the remote ftp server.</param>
            <returns>Result from the command execution on remote server.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.Close">
            <summary>
            Close connection to FTP server and all relevant sessions.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.Dispose">
            <summary>
            The overrided Dispose method
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.LogOn(System.String,System.String)">
            <summary>
            LogOn to the given FTP host using the given ftp UserName and Password
            </summary>
            <param name="userName">The userName used to LogOn</param>
            <param name="password">The password of the user used to LogOn</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.InternetLastResponseInfo(System.Int32@)">
            <summary>
            Returns full description of the 
            </summary>
            <param name="code">The error code whose details would be returned</param>
            <returns>The description of the error code passed</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.Error">
            <summary>
            The private helper method to raise exception based on the error occured in native calls
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpConnection.Open">
            <summary>
            The method is opens a connection to the Internet and should be invoked before 
            any attempt to connect to the FTP Site.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.Extended.FtpDirectoryInfo">
            <summary>
            The <c>FtpDirectoryInfo</c> class encapsulates a remote FTP directory.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpDirectoryInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            No specific impelementation is needed of the GetObjectData to serialize this object
            because all attributes are redefined.
            </summary>
            <param name="info">The SerializationInfo to populate with data. </param>
            <param name="context">The destination for this serialization. </param>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.Extended.FtpException">
            <summary>
            The <c>FtpException</c> class encapsulates an FTP exception.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            No specific impelementation is needed of the GetObjectData to serialize this object
            because all attributes are redefined.
            </summary>
            <param name="info">The SerializationInfo to populate with data. </param>
            <param name="context">The destination for this serialization. </param>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.Extended.FtpFileInfo">
            <summary>
            The <c>FtpFileInfo</c> class encapsulates a remote FTP directory.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Extended.FtpFileInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            No specific impelementation is needed of the GetObjectData to serialize this object
            because all attributes are redefined.
            </summary>
            <param name="info">The SerializationInfo to populate with data. </param>
            <param name="context">The destination for this serialization. </param>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.Extended.NativeMethods">
            <summary>
            Static class containing all PInvoke methods for WinInet API
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.MSMQ">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Create</i> (<b>Required: </b>  Path <b>Optional: Label, Transactional, Authenticated, MaximumQueueSize, MaximumJournalSize, UseJournalQueue, Force, Privacy</b> )</para>
            <para><i>CheckExists</i> (<b>Required: </b>  Path <b>Output: Exists</b> )</para>
            <para><i>Delete</i> (<b>Required: </b>  Path <b>Optional: </b> )</para>
            <para><i>Send</i> (<b>Required: </b>  Path <b>Optional: Message, Label</b> )</para>
            <para><i>SetPermissions</i> (<b>Required: </b>  Path <b>Optional: Allow, Deny, Revoke, Set</b> )</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <Allow Include="TFS">
                            <Permissions>DeleteMessage,ReceiveMessage</Permissions>
                        </Allow>
                        <Deny Include="TFS">
                            <Permissions>GetQueueProperties</Permissions>
                        </Deny>
                    </ItemGroup>
                    <!-- Create queue -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="Create" Path=".\private$\3" Label="Test Queue" Force="true"/>
                    <!-- Check if the queue exists -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="CheckExists" Path=".\private$\3">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Communication.MSMQ>
                    <Message Text="Exists: $(DoesExist)"/>
                    <!-- Delete the queue -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="Delete" Path=".\private$\3"/>
                    <!-- Check if the queue exists -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="CheckExists" Path=".\private$\3">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Communication.MSMQ>
                    <Message Text="Exists: $(DoesExist)"/>
                    <!-- Delete the queue again to see that no error is thrown -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="Delete" Path=".\private$\3"/>
                    <!-- Create queue -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="Create" Path=".\private$\3" Label="Test Queue" Force="true" Transactional="false" Authenticated="" MaximumQueueSize="220"/>
                    <!-- Send Message -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="Send" Path=".\private$\3" Message="Mike" Label="Hi2"/>
                    <!-- Send Message -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="Send" Path=".\private$\3" Message="" Label=""/>
                    <!-- Set permissions -->
                    <MSBuild.ExtensionPack.Communication.MSMQ TaskAction="SetPermissions" Path=".\private$\3" Allow="@(Allow)" Deny="@(Deny)"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Path">
            <summary>
            Sets the path of the queue. Required.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Label">
            <summary>
            Sets the Label of the queue 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Message">
            <summary>
            Sets the Message to send to the queue
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Allow">
            <summary>
            An access-allowed entry that causes the new rights to be added to any existing rights the trustee has. Permission metadata supports: DeleteMessage, PeekMessage, WriteMessage, DeleteJournalMessage, SetQueueProperties, GetQueueProperties, DeleteQueue, GetQueuePermissions, ChangeQueuePermissions, TakeQueueOwnership, ReceiveMessage, ReceiveJournalMessage, GenericRead, GenericWrite, FullControl
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Deny">
            <summary>
            An access-denied entry that denies the specified rights in addition to any currently denied rights of the trustee. Permission metadata supports: DeleteMessage, PeekMessage, WriteMessage, DeleteJournalMessage, SetQueueProperties, GetQueueProperties, DeleteQueue, GetQueuePermissions, ChangeQueuePermissions, TakeQueueOwnership, ReceiveMessage, ReceiveJournalMessage, GenericRead, GenericWrite, FullControl
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Revoke">
            <summary>
            An entry that removes all existing allowed or denied rights for the specified trustee. Permission metadata supports: DeleteMessage, PeekMessage, WriteMessage, DeleteJournalMessage, SetQueueProperties, GetQueueProperties, DeleteQueue, GetQueuePermissions, ChangeQueuePermissions, TakeQueueOwnership, ReceiveMessage, ReceiveJournalMessage, GenericRead, GenericWrite, FullControl
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Set">
            <summary>
            An access-allowed entry that is similar to Allow, except that the new entry allows only the specified rights. Using it discards any existing rights, including all existing access-denied entries for the trustee. Permission metadata supports: DeleteMessage, PeekMessage, WriteMessage, DeleteJournalMessage, SetQueueProperties, GetQueueProperties, DeleteQueue, GetQueuePermissions, ChangeQueuePermissions, TakeQueueOwnership, ReceiveMessage, ReceiveJournalMessage, GenericRead, GenericWrite, FullControl
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Transactional">
            <summary>
            Set true to create a transactional queue; false to create a non-transactional queue. Default is false;
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Authenticated">
            <summary>
            Set to try to create an Authenticated queueu. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Force">
            <summary>
            Set to true to recreate a queue if it already exists
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.MaximumQueueSize">
            <summary>
            Sets the maximum queue size in kb.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.MaximumJournalSize">
            <summary>
            Sets the maximum journal size in kb.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.UseJournalQueue">
            <summary>
            Set to true to use the journal queue
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Privacy">
            <summary>
            You can specify whether the queue accepts private (encrypted) messages, non-private (non-encrypted) messages, or both. Supports Optional (default), None, Both.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.MSMQ.Exists">
            <summary>
            Gets whether the queue exists
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.MSMQ.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Communication.Email">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Send</i> (<b>Required: </b> SmtpServer, MailFrom, MailTo, Subject  <b>Optional: </b> Priority, Body, Format, Attachments, UseDefaultCredentials, UserName, UserPassword, Port, EnableSsl)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <!-- Specify some attachments -->         
                        <Attachment Include="C:\demo.txt"/>
                        <Attachment Include="C:\demo2.txt"/>
                        <!-- Specify some recipients -->
                        <Recipient Include="nospam@freet2odev.com"/>
                        <Recipient Include="nospam2@freet2odev.com"/>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.Communication.Email TaskAction="Send" Subject="Test Email" SmtpServer="yoursmtpserver" MailFrom="nospam@freet2odev.com" MailTo="@(Recipient)" Body="body text" Attachments="@(Attachment)"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.SmtpServer">
            <summary>
            The SMTP server to use to send the email.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.Port">
            <summary>
            Sets the port to use. Ignored if not specified.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.EnableSsl">
            <summary>
            Sets whether to EnableSsl
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.MailFrom">
            <summary>
            The email address to send the email from.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.MailTo">
            <summary>
            Sets the Item Colleciton of email address to send the email to.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.Subject">
            <summary>
            The subject of the email.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.Priority">
            <summary>
            The priority of the email. Default is Normal (also available High and Low).
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.Body">
            <summary>
            The body of the email.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.Format">
            <summary>
            Sets the format of the email. Default is HTML
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.UseDefaultCredentials">
            <summary>
            Gets or sets a Boolean value that controls whether the DefaultCredentials are sent with requests. DefaultCredentials represents the system credentials for the current security context in which the application is running. Default is true.
            <para>If UserName and UserPassword is supplied, this is set to false. If UserName and UserPassword are not supplied and this is set to false then mail is sent to the server anonymously.</para>
            <para><b>If you provide credentials for basic authentication, they are sent to the server in clear text. This can present a security issue because your credentials can be seen, and then used by others.</b></para>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Communication.Email.Attachments">
            <summary>
            An Item Collection of full paths of files to attach to the email.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Communication.Email.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Compression.DNZip">
            <summary>
            <para>NOTE: This task is for backwards compatibility only. You should use the Zip task rather</para>
            <b>Valid TaskActions are:</b>
            <para><i>AddFiles</i> (<b>Required: </b> ZipFileName, CompressFiles or Path <b>Optional: </b>CompressionLevel, MaxOutputSegmentSize, Password; RemoveRoot, UseZip64WhenSaving) Existing files will be updated</para>
            <para><i>Create</i> (<b>Required: </b> ZipFileName, CompressFiles or Path <b>Optional: </b>CompressionLevel, MaxOutputSegmentSize, Password; RemoveRoot, UseZip64WhenSaving)</para>
            <para><i>Extract</i> (<b>Required: </b> ZipFileName, ExtractPath <b>Optional:</b> Password)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            <para/>
            This task uses http://dotnetzip.codeplex.com v1.9.1.8 for compression.
            <para/>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <Target Name="Default" DependsOnTargets="Sample1;Sample2"/>
              <Target Name="Sample1">
                <ItemGroup>
                  <!-- Set the collection of files to Zip-->
                  <FilesToZip Include="C:\Patches\**\*"/>
                </ItemGroup>
                <!-- Create a zip file based on the FilesToZip collection -->
                <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create" CompressFiles="@(FilesToZip)" ZipFileName="C:\newZipByFile.zip"/>
                <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create" Password="apassword" CompressionLevel="BestCompression" RemoveRoot="C:\Patches" CompressFiles="@(FilesToZip)" ZipFileName="C:\newZipByFileBestCompression.zip"/>
                <!-- Create a zip file based on a Path -->
                <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create" CompressPath="C:\Patches" ZipFileName="C:\newZipByPath.zip"/>
                <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create" CompressPath="C:\Patches" ZipFileName="C:\newZipByPath.zip" MaxOutputSegmentSize="734003200" UseZip64WhenSaving="AsNecessary"/>
                <!-- Extract a zip file-->
                <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Extract" ExtractPath="C:\aaa11\1" ZipFileName="C:\newZipByFile.zip"/>
                <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Extract" ExtractPath="C:\aaa11\2" ZipFileName="C:\newZipByPath.zip"/>
                <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Extract" Password="apassword"  ExtractPath="C:\aaa11\3" ZipFileName="C:\newZipByFileBestCompression.zip"/>
              </Target>
              <Target Name="Sample2">
                <PropertyGroup>
                  <SourceDirectory>MotorData\</SourceDirectory>
                </PropertyGroup>
                <ItemGroup>
                  <Files Include="$(SourceDirectory)*" Exclude="$(SourceDirectory).XYZ\**\*">
                    <Group>Common</Group>
                  </Files>
                  <Files Include="$(SourceDirectory)Cars\*" Exclude="$(SourceDirectory)Cars\.XYZ\**\*">
                    <Group>Cars</Group>
                  </Files>
                  <Files Include="$(SourceDirectory)Trucks\*" Exclude="$(SourceDirectory)Trucks\.XYZ\**\*">
                    <Group>Trucks</Group>
                  </Files>
                </ItemGroup>
                <!-- Create the output folder -->
                <ItemGroup>
                  <OutputDirectory Include="output\"/>
                </ItemGroup>
                <MakeDir Directories="@(OutputDirectory)"/>
                <PropertyGroup>
                  <WorkingDir>%(OutputDirectory.Fullpath)</WorkingDir>
                </PropertyGroup>
                <!-- Zip files based on the group they belong to -->
                <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create" CompressFiles="@(Files)" ZipFileName="$(WorkingDir)%(Files.Group).zip"/>
              </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.RemoveRoot">
            <summary>
            Sets the root to remove from the zip path. Note that this should be part of the file to compress path, not the target path of the ZipFileName
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.CompressFiles">
            <summary>
            Sets the files to Compress
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.CompressPath">
            <summary>
            Sets the Path to Zip.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.ZipFileName">
            <summary>
            Sets the name of the Zip File
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.ExtractPath">
            <summary>
            Path to extract the zip file to
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.Password">
            <summary>
            Sets the Password to be used
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.CompressionLevel">
            <summary>
            Sets the CompressionLevel to use. Default is Default, also supports BestSpeed and BestCompression
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.MaxOutputSegmentSize">
            <summary>
            Sets the maximum output segment size, which typically results in a split archive (an archive split into multiple files).
            This value is not required and if not set or set to 0 the resulting archive will not be split.
            For more details see the DotNetZip documentation.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.DNZip.UseZip64WhenSaving">
            <summary>
            Sets the UseZip64WhenSaving output of the DotNetZip library.
            For more details see the DotNetZip documentation.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Compression.DNZip.InternalExecute">
            <summary>
            This is the main InternalExecute method that all tasks should implement
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Compression.Zip">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddFiles</i> (<b>Required: </b> ZipFileName, CompressFiles or Path <b>Optional: </b>CompressionLevel, MaxOutputSegmentSize, Password; RemoveRoot, UseZip64WhenSaving) Existing files will be updated</para>
            <para><i>Create</i> (<b>Required: </b> ZipFileName, CompressFiles or Path <b>Optional: </b>CompressionLevel, MaxOutputSegmentSize, Password; RemoveRoot, UseZip64WhenSaving, PreserveAttributes)</para>
            <para><i>Extract</i> (<b>Required: </b> ZipFileName, ExtractPath <b>Optional:</b> Password)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            <para/>
            This task uses http://dotnetzip.codeplex.com v1.9.1.8 for compression.
            <para/>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <Target Name="Default" DependsOnTargets="Sample1;Sample2"/>
              <Target Name="Sample1">
                <ItemGroup>
                  <!-- Set the collection of files to Zip-->
                  <FilesToZip Include="C:\Patches\**\*"/>
                </ItemGroup>
                <!-- Create a zip file based on the FilesToZip collection -->
                <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressFiles="@(FilesToZip)" ZipFileName="C:\newZipByFile.zip"/>
                <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" Password="apassword" CompressionLevel="BestCompression" RemoveRoot="C:\Patches" CompressFiles="@(FilesToZip)" ZipFileName="C:\newZipByFileBestCompression.zip"/>
                <!-- Create a zip file based on a Path -->
                <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressPath="C:\Patches" ZipFileName="C:\newZipByPath.zip"/>
                <!-- Extract a zip file-->
                <MSBuild.ExtensionPack.Compression.Zip TaskAction="Extract" ExtractPath="C:\aaa11\1" ZipFileName="C:\newZipByFile.zip"/>
                <MSBuild.ExtensionPack.Compression.Zip TaskAction="Extract" ExtractPath="C:\aaa11\2" ZipFileName="C:\newZipByPath.zip"/>
                <MSBuild.ExtensionPack.Compression.Zip TaskAction="Extract" Password="apassword"  ExtractPath="C:\aaa11\3" ZipFileName="C:\newZipByFileBestCompression.zip"/>
              </Target>
              <Target Name="Sample2">
                <PropertyGroup>
                  <SourceDirectory>MotorData\</SourceDirectory>
                </PropertyGroup>
                <ItemGroup>
                  <Files Include="$(SourceDirectory)*" Exclude="$(SourceDirectory).XYZ\**\*">
                    <Group>Common</Group>
                  </Files>
                  <Files Include="$(SourceDirectory)Cars\*" Exclude="$(SourceDirectory)Cars\.XYZ\**\*">
                    <Group>Cars</Group>
                  </Files>
                  <Files Include="$(SourceDirectory)Trucks\*" Exclude="$(SourceDirectory)Trucks\.XYZ\**\*">
                    <Group>Trucks</Group>
                  </Files>
                </ItemGroup>
                <!-- Create the output folder -->
                <ItemGroup>
                  <OutputDirectory Include="output\"/>
                </ItemGroup>
                <MakeDir Directories="@(OutputDirectory)"/>
                <PropertyGroup>
                  <WorkingDir>%(OutputDirectory.Fullpath)</WorkingDir>
                </PropertyGroup>
                <!-- Zip files based on the group they belong to -->
                <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressFiles="@(Files)" ZipFileName="$(WorkingDir)%(Files.Group).zip"/>
              </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.RemoveRoot">
            <summary>
            Sets the root to remove from the zip path. Note that this should be part of the file to compress path, not the target path of the ZipFileName
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.CompressFiles">
            <summary>
            Sets the files to Compress
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.CompressPath">
            <summary>
            Sets the Path to Zip.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.ZipFileName">
            <summary>
            Sets the name of the Zip File
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.ExtractPath">
            <summary>
            Path to extract the zip file to
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.Password">
            <summary>
            Sets the Password to be used
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.CompressionLevel">
            <summary>
            Sets the CompressionLevel to use. Default is Default, also supports BestSpeed and BestCompression
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.MaxOutputSegmentSize">
            <summary>
            Sets the maximum output segment size, which typically results in a split archive (an archive split into multiple files).
            This value is not required and if not set or set to 0 the resulting archive will not be split.
            For more details see the DotNetZip documentation.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.UseZip64WhenSaving">
            <summary>
            Sets the UseZip64WhenSaving output of the DotNetZip library.
            For more details see the DotNetZip documentation.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Zip.PreserveAttributes">
            <summary>
            This is only applicable when the <b>TaskAction</b> is <i>Create</i> or <i>AddFiles</i>. Specifies whether file (folder) attributes like <i>Hidden</i> or <i>Read-only</i>
            should be left intact during adding to the archive. The default is <c>true</c>.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Compression.Zip.InternalExecute">
            <summary>
            This is the main InternalExecute method that all tasks should implement
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Compression.Cab">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddFile</i> (<b>Required: </b>NewFile, CabFile, CabExePath, ExtractExePath, NewFileDestination)</para>
            <para><i>Create</i> (<b>Required: </b>PathToCab or FilesToCab, CabFile, ExePath. <b>Optional: </b>PreservePaths, StripPrefixes, Recursive)</para>
            <para><i>Extract</i> (<b>Required: </b>CabFile, ExtractExePath, ExtractTo <b>Optional:</b> ExtractFile)</para>
            <para><b>Compatible with:</b></para>
                <para>Microsoft (R) Cabinet Tool (cabarc.exe) - Version 5.2.3790.0</para>
                <para>Microsoft (R) CAB File Extract Utility (extrac32.exe)- Version 5.2.3790.0</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <!-- Create a collection of files to CAB -->
                        <Files Include="C:\ddd\**\*"/>
                    </ItemGroup>
                    <!-- Create the CAB using the File collection and preserve the paths whilst stripping a prefix -->
                    <MSBuild.ExtensionPack.Compression.Cab TaskAction="Create" FilesToCab="@(Files)" CabExePath="D:\BuildTools\CabArc.Exe" CabFile="C:\newcabbyitem.cab" PreservePaths="true" StripPrefixes="ddd\"/>
                    <!-- Create the same CAB but this time based on the Path. Note that Recursive is required -->
                    <MSBuild.ExtensionPack.Compression.Cab TaskAction="Create" PathToCab="C:\ddd" CabExePath="D:\BuildTools\CabArc.Exe" CabFile="C:\newcabbypath.cab" PreservePaths="true" StripPrefixes="ddd\" Recursive="true"/>
                    <!-- Add a file to the CAB -->
                    <MSBuild.ExtensionPack.Compression.Cab TaskAction="AddFile" NewFile="c:\New Text Document.txt" CabExePath="D:\BuildTools\CabArc.Exe" ExtractExePath="D:\BuildTools\Extrac32.EXE" CabFile="C:\newcabbyitem.cab" NewFileDestination="\Any Path"/>
                    <!-- Extract a CAB-->
                    <MSBuild.ExtensionPack.Compression.Cab TaskAction="Extract" ExtractTo="c:\a111" ExtractExePath="D:\BuildTools\Extrac32.EXE" CabFile="C:\newcabbyitem.cab"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.ExtractTo">
            <summary>
            Sets the path to extract to
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.CabFile">
            <summary>
            Sets the CAB file. Required.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.PathToCab">
            <summary>
            Sets the path to cab
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.Recursive">
            <summary>
            Sets whether to add files and folders recursively if PathToCab is specified.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.FilesToCab">
            <summary>
            Sets the files to cab
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.CabExePath">
            <summary>
            Sets the path to CabArc.Exe
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.ExtractExePath">
            <summary>
            Sets the path to extrac32.exe
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.ExtractFile">
            <summary>
            Sets the files to extract. Default is /E, which is all.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.PreservePaths">
            <summary>
            Sets a value indicating whether [preserve paths]
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.StripPrefixes">
            <summary>
            Sets the prefixes to strip. Delimit with ';'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.NewFile">
            <summary>
            Sets the new file to add to the Cab File
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Compression.Cab.NewFileDestination">
            <summary>
            Sets the path to add the file to
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Compression.Cab.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Compression.Cab.AddFile">
            <summary>
            Adds the file.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Compression.Cab.Extract">
            <summary>
            Extracts this instance.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Compression.Cab.ValidateExtract">
            <summary>
            Validates the extract.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Compression.Cab.Create">
            <summary>
            Creates this instance.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ADGroupType.Global">
            <summary>
            Global
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ADGroupType.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ADGroupType.Universal">
            <summary>
            Universal
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeInteractiveLogonRight">
            <summary>
            SeInteractiveLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeNetworkLogonRight">
            <summary>
            SeNetworkLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeBatchLogonRight">
            <summary>
            SeBatchLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeServiceLogonRight">
            <summary>
            SeServiceLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeDenyInteractiveLogonRight">
            <summary>
            SeDenyInteractiveLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeDenyNetworkLogonRight">
            <summary>
            SeDenyNetworkLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeDenyBatchLogonRight">
            <summary>
            SeDenyBatchLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeDenyServiceLogonRight">
            <summary>
            SeDenyServiceLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeRemoteInteractiveLogonRight">
            <summary>
            SeRemoteInteractiveLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeDenyRemoteInteractiveLogonRight">
            <summary>
            SeDenyRemoteInteractiveLogonRight
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeIncreaseQuotaPrivilege">
            <summary>
            SeIncreaseQuotaPrivilege
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeAuditPrivilege">
            <summary>
            SeAuditPrivilege
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.PrivilegeType.SeAssignPrimaryTokenPrivilege">
            <summary>
            SeAssignPrimaryTokenPrivilege
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.ActiveDirectory">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddUser</i> (<b>Required: </b> User <b>Optional: </b>Domain, FullName, Description, Password, PasswordExpired, PasswordNeverExpires, FirstName, LastName)</para>
            <para><i>AddGroup</i> (<b>Required: </b> Group <b>Optional: </b>Domain, Description, GroupType)</para>
            <para><i>AddGroupToGroup</i> (<b>Required: </b> Parent, Group). Windows Server 2008 only.</para>
            <para><i>AddUserToGroup</i> (<b>Required: </b> User, Group)</para>
            <para><i>CheckUserExists</i> (<b>Required: </b> User <b>Output:</b> Exists)</para>
            <para><i>CheckUserPassword</i> (<b>Required: </b> User, Password <b>Optional:</b> BindingContextOptions, ContextTypeStore, Domain <b>Output:</b> Exists)</para>
            <para><i>CheckGroupExists</i> (<b>Required: </b> Group <b>Output:</b> Exists)</para>
            <para><i>DeleteUser</i> (<b>Required: </b> User)</para>
            <para><i>DeleteGroup</i> (<b>Required: </b> Group)</para>
            <para><i>DeleteUserFromGroup</i> (<b>Required: </b> User, Group)</para>
            <para><i>GetGroupMembers</i> (<b>Required: </b> Group <b>Optional: </b>GetFullMemberName <b>Output:</b> Members)</para>
            <para><i>GetUserPassword</i> (<b>Required: </b>User  <b>Optional: </b>BindingContextOptions, ContextTypeStore, Domain, ErrorOnCancel<b>Output:</b> Password)</para>
            <para><i>GrantPrivilege</i> (<b>Required: </b>User, Privilege  <b>Optional: </b>Domain)</para>
            <para><i>RemoveGroupFromGroup</i> (<b>Required: </b> Parent, Group). Windows Server 2008 only.</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Check a user Exists -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="CheckUserExists" User="JudgeJS1">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
                    <Message Text="JudgeJS1 Exists: $(DoesExist)"/>
                    <!-- Add local Users -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddUser" User="JudgeJS1" Description="Elgnt" Password="123546fdfdRERF$" PasswordNeverExpires="true"/>
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddUser" User="JudgeJS2" Description="Elgnt" PasswordNeverExpires="true"/>
                    <!-- Grant a user a privilege local Users -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="GrantPrivilege" User="JudgeJS1" Privilege="SeServiceLogonRight"/>
                    <!-- Check a user Exists -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="CheckUserExists" User="JudgeJS1">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
                    <Message Text="JudgeJS1 Exists: $(DoesExist)"/>
                    <!-- Check a Group Exists -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="CheckGroupExists" Group="NewGroup1">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
                    <Message Text="NewGroup1 Exists: $(DoesExist)"/>
                    <!-- Add local Groups -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroup" Group="NewGroup1" Description="Elgnt"/>
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroup" Group="NewGroup2" Description="Elgnt"/>
                    <!-- Check a Group Exists -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="CheckGroupExists" Group="NewGroup1">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
                    <Message Text="NewGroup1 Exists: $(DoesExist)"/>
                    <!-- Add the users to the Groups -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddUserToGroup" User="JudgeJS1;JudgeJS2" Group="NewGroup1;NewGroup2"/>
                    <!-- To add domain user(s) to a group, prefix name with the user's domain -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddUserToGroup" User="ADOMAIN\JudgeJS1" Group="Group1"/>
                    <!-- Delete Users from Groups -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="DeleteUserFromGroup" User="JudgeJS1" Group="NewGroup1;NewGroup2"/>
                    <!-- Delete local Users -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="DeleteUser" User="JudgeJS1;JudgeJS2"/>
                    <!-- Delete local Groups -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="DeleteGroup" Group="NewGroup1;NewGroup2"/>
                    <!-- Add a remote User -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddUser" User="JudgeJS1" MachineName="D420-7" Description="Elgnt" Password="123546fdfdRERF$" PasswordNeverExpires="true"/>
                    <!-- Add a remote Group -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroup" Group="RemoteGroup1" MachineName="D420-7" Description="na"/>
                    <!-- Add a Domain User -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddUser" User="JudgeJS1" Domain="mydomain" Description="Elgnt" Password="123546fdfdRERF$" PasswordNeverExpires="true"/>
                    <!-- Add a Domain Group -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroup" Group="DomainGroup1" Domain="mydomain" Description="na"/>
                    <!-- Get a user's password-->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="GetUserPassword" User="Michael" ContextTypeStore="Machine">
                        <Output TaskParameter="Password" PropertyName="Pass"/>
                    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
                    <Message Text="User Password: $(Pass)"/>
                    <!-- Check a user's password-->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="CheckUserPassword" User="Michael" ContextTypeStore="Machine" Password="$(Pass)">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
                    <Message Text="User Exists: $(DoesExist)"/>
                    <!-- Get Group Members -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="GetGroupMembers" Group="Performance Monitor Users;Users">
                        <Output TaskParameter="Members" ItemName="Groups"/>
                    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
                    <Message Text="%(Groups.Identity)"/>
                    <!-- Get Group Members including Parent -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="GetGroupMembers" GetFullMemberName="true" Group="Performance Monitor Users;Users">
                        <Output TaskParameter="Members" ItemName="FullGroups"/>
                    </MSBuild.ExtensionPack.Computer.ActiveDirectory>
                    <Message Text="FULL %(FullGroups.Identity)"/>
                    <!-- Group Group Operations -->
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroup" Group="NewGroup1" Description="Elgnt" GroupType="Global"/>
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroup" Group="NewGroup2" Description="Elgnt" GroupType="Global"/>
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroupToGroup" ParentGroup="NewGroup1" Group="NewGroup2"/>
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="RemoveGroupFromGroup" ParentGroup="NewGroup1" Group="NewGroup2"/>
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroupToGroup" ParentGroup="NewGroup1" Group="NewGroup2"/>
                    <MSBuild.ExtensionPack.Computer.ActiveDirectory TaskAction="AddGroupToGroup" ParentGroup="NewGroup1" Group="NewGroup2"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.User">
            <summary>
            Sets the User name. Supports DirectoryPath metadata for AddUserToGroup. Use this to supply different domain users.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.Group">
            <summary>
            Sets the Group name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.FullName">
            <summary>
            Sets the User's full name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.FirstName">
            <summary>
            Set the User's First name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.LastName">
            <summary>
            Sets the User's Last name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.Description">
            <summary>
            Sets the User's or Group's description
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.Password">
            <summary>
            Sets the User's password
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.GetFullMemberName">
            <summary>
            Sets whether to extract the domain name when using GetGroupMembers. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.PasswordExpired">
            <summary>
            Sets the User's password to expired. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.PasswordNeverExpires">
            <summary>
            Sets the User's password to never expire. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.Domain">
            <summary>
            Sets the domain to operate against.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.GroupType">
            <summary>
            Sets the GroupType. For non domains the default is Local. For Domains the default is Global. Supports Global, Local, Universal
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.ContextTypeStore">
            <summary>
            Specifies the store to use. Supports Machine and Domain. Default is Domain.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.ErrorOnCancel">
            <summary>
            Set to true to raise an error if the user clicks cancel on GetPassword form.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.BindingContextOptions">
            <summary>
            Specifies the options that are used for binding to the server. Default is Negotiate
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.Privilege">
            <summary>
            The Privilege to grant. See http://msdn.microsoft.com/en-us/library/bb545671(VS.85).aspx
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.Exists">
            <summary>
            Gets whether the User or Group exists
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.Members">
            <summary>
            Gets the members of a group
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.UserDomain">
            <summary>
            The domain the user is in.  If not set, defaults to Domain.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ActiveDirectory.ParentGroup">
            <summary>
            Sets the Parent group
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.ActiveDirectory.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.ActiveDirectory.GetFullyQualifiedDomainName">
            <summary>
            Returns the fully qualified Domain name of the current domain
            </summary>
            <returns>The fully qualified domain name</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.ActiveDirectoryNativeMethods">
            <summary>
            RegistryNativeMethods
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.Process">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>CheckRunning</i> (<b>Required: </b>ProcessName <b>Output: </b> IsRunning)</para>
            <para><i>Create</i> (<b>Required: </b>Parameters <b>Output: </b> ReturnValue, ProcessId)</para>
            <para><i>Get</i> (<b>Required: </b>ProcessName, Value <b>Optional: </b>User, ProcessName, IncludeUserInfo <b>Output: </b> Processes)</para>
            <para><i>Terminate</i> (<b>Required: </b>ProcessName or ProcessId)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <WmiExec3 Include="CommandLine#~#notepad.exe"/>
                </ItemGroup>
                <Target Name="Default">
                    <MSBuild.ExtensionPack.Computer.Process TaskAction="Terminate" ProcessId="9564"/>
                    <MSBuild.ExtensionPack.Computer.Process TaskAction="Create" Parameters="@(WmiExec3)">
                        <Output TaskParameter="ReturnValue" PropertyName="Rval2"/>
                        <Output TaskParameter="ProcessId" PropertyName="PID"/>
                    </MSBuild.ExtensionPack.Computer.Process>
                    <Message Text="ReturnValue: $(Rval2). ProcessId: $(PID)"/>
                    <MSBuild.ExtensionPack.Computer.Process TaskAction="CheckRunning" ProcessName="notepad.exe">
                        <Output PropertyName="Running" TaskParameter="IsRunning"/>
                    </MSBuild.ExtensionPack.Computer.Process>
                    <Message Text="notepad.exe IsRunning: $(Running)"/>
                    <MSBuild.ExtensionPack.Computer.Process TaskAction="Terminate" ProcessName="notepad.exe"/>
                    <MSBuild.ExtensionPack.Computer.Process TaskAction="CheckRunning" ProcessName="notepad.exe">
                        <Output PropertyName="Running" TaskParameter="IsRunning"/>
                    </MSBuild.ExtensionPack.Computer.Process>
                    <Message Text="notepad.exe IsRunning: $(Running)"/>
                    <MSBuild.ExtensionPack.Computer.Process TaskAction="Get" IncludeUserInfo="true">
                        <Output ItemName="ProcessList" TaskParameter="Processes"/>
                    </MSBuild.ExtensionPack.Computer.Process>
                    <Message Text="%(ProcessList.Identity)  - %(ProcessList.User) - %(ProcessList.OwnerSID)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Process.ProcessName">
            <summary>
            Sets the regular expression to use for filtering processes. Default is .*
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Process.User">
            <summary>
            Sets the regular expression to use for filtering processes. Default is .*
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Process.ReturnValue">
            <summary>
            Gets the ReturnValue for Create
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Process.ProcessId">
            <summary>
            Gets or Sets the ProcessId
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Process.Parameters">
            <summary>
            Sets the Parameters for Create. Use #~# separate name and value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Process.IncludeUserInfo">
            <summary>
            Sets whether to include user information for processes. Including this will slow the query. Default is false;
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Process.IsRunning">
            <summary>
            Gets whether the process is running
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Process.Processes">
            <summary>
            Gets the list of processes. The process name is used as the identity and the following metadata is set: Caption, Description, Handle, HandleCount, KernelModeTime, PageFaults, PageFileUsage, ParentProcessId, PeakPageFileUsage, PeakVirtualSize, PeakWorkingSetSize, Priority, PrivatePageCount, ProcessId, QuotaNonPagedPoolUsage, QuotaPagedPoolUsage, QuotaPeakNonPagedPoolUsage, QuotaPeakPagedPoolUsage, ReadOperationCount, ReadTransferCount, SessionId, ThreadCount, UserModeTime, VirtualSize, WindowsVersion, WorkingSetSize, WriteOperationCount, WriteTransferCount
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.Process.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.HostsFile">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>SetHostEntry</i> (<b>Required: </b> HostName, IPAddress<b> Optional: </b>Comment, PathToHostsFile)</para>
            <para><i>Update</i> (<b>Required: </b>HostEntries <b>Optional: </b>PathToHostsFile, Truncate</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>    
                <ItemGroup>
                    <HostEntries Include="MyWebService">
                        <IPAddress>10.0.0.1</IPAddress>
                        <Comment>The IP address for MyWebService</Comment>
                    </HostEntries>
                    <HostEntries Include="MyWebSite">
                        <IPAddress>10.0.0.2</IPAddress>
                    </HostEntries>
                </ItemGroup>
                <Target Name="Default">
                    <!-- Update the current machine's hosts file.  With Truncate=True, any hosts entries not in @(HostEntries) will
                   be deleted (except for the default localhost/127.0.0.1 entry). -->
                    <MSBuild.ExtensionPack.Computer.HostsFile TaskAction="Update"
                                                              HostEntries="@(HostEntries)"
                                                              Truncate="True" />
                    <!-- Update a hosts file in a custom location.  -->
                    <MSBuild.ExtensionPack.Computer.HostsFile TaskAction="Update"
                                                              HostEntries="@(HostEntries)"
                                                              PathToHostsFile="\\SDG-WKS1348\a\hosts" />
                    <!-- Update a single host entry.  If the entry doesn't exist, it will be created. -->
                    <MSBuild.ExtensionPack.Computer.HostsFile TaskAction="SetHostEntry"
                                                              HostName="MyInternalHost"
                                                              IPAddress="10.0.0.3"
                                                              Comment="This points to the MyInternalHost server." />
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.HostsFile.Comment">
            <summary>
            The comment after the hosts entry.  Only used by the SetHostEntry task action.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.HostsFile.HostName">
            <summary>
            The hostname to alias.  Only used by the SetHostEntry task action.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.HostsFile.IPAddress">
            <summary>
            The IP address for the hosts entry being aliased.  Required.  Only used by the SetHostEntry task action.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.HostsFile.Truncate">
            <summary>
            If True, any host entry not in the HostEntries item group will be removed from the hosts file.  Default is
            False.  Only used by the Update task action.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.HostsFile.HostEntries">
            <summary>
            The list of hosts entries.  The identity should be the host name.  The IP address should be in the IPAddress
            metadata.  A comment about the entry should be in the Comment metadata.  The task will fail if the identity or
            IPAddress metadata are empty.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.HostsFile.PathToHostsFile">
            <summary>
            The path to the hosts file to update.  Defaults to %SYSTEMROOT%\system32\drivers\etc\hosts.  Task will fail
            if this file doesn't exist.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.WshShell">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>CreateShortcut</i> (<b>Required: </b> Name, FilePath <b>Optional: </b>Arguments, ShortcutPath, Description, WorkingDirectory, IconLocation)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Create a shortcut -->
                    <MSBuild.ExtensionPack.Computer.WshShell TaskAction="CreateShortcut" Name="My Calculator.lnk" FilePath="C:\Windows\System32\calc.exe"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WshShell.FilePath">
            <summary>
            Sets the FilePath
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WshShell.ShortcutPath">
            <summary>
            Sets the ShortcutPath. For CreateShortcut defaults defaults to Desktop of the current user
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WshShell.Name">
            <summary>
            Sets the Name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WshShell.IconLocation">
            <summary>
            Sets the IconLocation
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WshShell.Description">
            <summary>
            Sets the Description. For CreateShortcut defaults to 'Launch [Name]'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WshShell.Arguments">
            <summary>
            Sets the Arguments for the shortcut
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WshShell.WorkingDirectory">
            <summary>
            Sets the WorkingDirectory
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WshShell.WindowStyle">
            <summary>
            Sets the WindowStyle.
            <para/>
            1 - Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position.
            <para/>
            3 - Activates the window and displays it as a maximized window.
            <para/>
            7 - Minimizes the window and activates the next top-level window.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.WshShell.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.Extended.GetPasswordForm">
            <summary>
            Gets a user's AD validated password
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.Extended.GetPasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.Extended.GetPasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.Extended.GetPasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.CSActivation.Inproc">
            <summary>
            Inproc
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.CSActivation.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.ComponentServices">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddComponent</i> (<b>Required: </b>Path, ApplicationName <b>Optional: </b>Activation, Identity, UserPassword, Framework)</para>
            <para><i>AddNativeComponent</i> (<b>Required: </b>Path, ApplicationName <b>Optional: </b>Activation, Identity, UserPassword, Framework)</para>
            <para><i>CheckApplicationExists</i> (<b>Required: </b> ApplicationName <b>Output: </b>Exists)</para>
            <para><i>CreateApplication</i> (<b>Required: </b> ApplicationName <b>Optional: </b>Activation, EnforceAccessChecks, Identity, UserPassword)</para>
            <para><i>DeleteApplication</i> (<b>Required: </b>ApplicationName)</para>
            <para><i>RemoveComponent</i> (<b>Required: </b>Path <b>Optional: </b>Framework)</para>
            <para><i>SetConstructor</i> (<b>Required: </b>ApplicationName, ComponentName, ConstructorString)</para>
            <para><i>SetAccessIisIntrinsicProperties</i> (<b>Required: </b>ApplicationName, ComponentName <b>Optional: </b>AllowIntrinsicIisProperties)</para>
            <para><i>SetTransactionSupport</i> (<b>Required: </b>ApplicationName, ComponentName, Transaction)</para>
            <para><i>ShutDownApplication</i> (<b>Required: </b>ApplicationName)</para>
            <para><i>UpdateApplication</i> (<b>Required: </b>ApplicationName <b>Optional: </b>Activation, Identity, UserPassword)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!--- Add a component -->
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="AddComponent" Path="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\EntServices.dll" ApplicationName="MyApplication" Identity="Interactive User"/>
                    <!-- Check it exists -->
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="CheckApplicationExists" ApplicationName="MyApplication">
                        <Output TaskParameter="Exists" PropertyName="DoI"/>
                    </MSBuild.ExtensionPack.Computer.ComponentServices>
                    <Message Text="Exists: $(DoI)"/>
                    <!--- Remove the component -->
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="RemoveComponent" Path="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\EntServices.dll" ApplicationName="MyApplication"/>
                    <!-- Check it exists again-->
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="CheckApplicationExists" ApplicationName="MyApplication">
                        <Output TaskParameter="Exists" PropertyName="DoI"/>
                    </MSBuild.ExtensionPack.Computer.ComponentServices>
                    <Message Text="Exists: $(DoI)"/>
                    <!--- Add a component -->
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="AddComponent" Path="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\EntServices.dll" ApplicationName="MyApplication" Identity="Interactive User"/>
                    <!-- Check it exists -->
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="CheckApplicationExists" ApplicationName="MyApplication">
                        <Output TaskParameter="Exists" PropertyName="DoI"/>
                    </MSBuild.ExtensionPack.Computer.ComponentServices>
                    <Message Text="Exists: $(DoI)"/>
                    <!-- Various quick tasks -->
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="ShutDownApplication" ApplicationName="MyApplication"/>
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="UpdateApplication" Activation="Inproc" ApplicationName="MyApplication"/>
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="SetTransactionSupport" Transaction="RequiresNew" ComponentName="BankComponent.Account" ApplicationName="MyApplication"/>
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="SetConstructor" ComponentName="BankComponent.Account" ApplicationName="MyApplication" ConstructorString="demo"/>
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="SetConstructor" ComponentName="BankComponent.Account" ApplicationName="MyApplication" ConstructorString=""/>
                    <MSBuild.ExtensionPack.Computer.ComponentServices TaskAction="DeleteApplication" ApplicationName="MyApplication"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.Exists">
            <summary>
            Gets whether the application exists.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.ComponentName">
            <summary>
            Sets the name of the COM+ component
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.Transaction">
            <summary>
            Sets the Transaction support for the component. Supports: Ignored, None [Default], Supported, Required, RequiresNew
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.ConstructorString">
            <summary>
            Sets the constructor string for the specified COM+ component. If empty, then the constructor support is removed
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.ApplicationName">
            <summary>
            Sets the name of the COM+ Application.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.Path">
            <summary>
            Sets the path to the DLL to be added to the application
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.Identity">
            <summary>
            Sets the process identity for the application. Specify a valid user account or "Interactive User" to have the application assume the identity of the current logged-on user.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.Framework">
            <summary>
            Sets the version of the .NET FrameWork. Defaults to "v2.0.50727"
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.Activation">
            <summary>
            Sets the type of activation for the application. Defaults to "Local". Supports: Local (server application), Inproc (library application)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.EnforceAccessChecks">
            <summary>
            Sets whether or not component services enforces access checks for this application. Defaults to "True". Supports: True (Enforce access checks), False 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.ComponentServices.AllowIntrinsicIisProperties">
            <summary>
            Sets whether or not component services allows access to Intrinsic IIS properties, used for Windows 2003
            components on Windows 2008 and later. Defaults to "False". Supports: True, False (allow access to Intrinsic IIS properties)
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.SystemDrive">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>CheckDriveSpace</i> (<b>Required: </b>Drive, MinSpace <b>Optional: </b>Unit)</para>
            <para><i>GetDrives</i> (<b>Optional: </b>SkipDrives, Unit <b>Output: </b>Drives)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <DrivesToSkip Include="A:\"/>
                </ItemGroup>
                <Target Name="Default">
                    <!--- Check drive space -->
                    <MSBuild.ExtensionPack.Computer.SystemDrive TaskAction="CheckDriveSpace" Drive="c:\" MachineName="AMachine" UserName="Administrator" UserPassword="APassword" MinSpace="46500" Unit="Mb" ContinueOnError="true"/>
                    <!--- Check drive space on a remote machine -->
                    <MSBuild.ExtensionPack.Computer.SystemDrive TaskAction="GetDrives" SkipDrives="@(DrivesToSkip)" MachineName="AMachine" UserName="Administrator" UserPassword="APassword">
                        <Output TaskParameter="Drives" ItemName="SystemDrivesRemote"/>
                    </MSBuild.ExtensionPack.Computer.SystemDrive>
                    <Message Text="Remote Drive: %(SystemDrivesRemote.Identity), DriveType: %(SystemDrivesRemote.DriveType), Name: %(SystemDrivesRemote.Name), VolumeLabel: %(SystemDrivesRemote.VolumeLabel), DriveFormat: %(SystemDrivesRemote.DriveFormat), TotalSize: %(SystemDrivesRemote.TotalSize), TotalFreeSpace=%(SystemDrivesRemote.TotalFreeSpace), AvailableFreeSpace=%(SystemDrivesRemote.AvailableFreeSpace)IsReady=%(SystemDrivesRemote.IsReady), RootDirectory=%(SystemDrivesRemote.RootDirectory)"/>
                    <!--- Check drive space using different units -->
                    <MSBuild.ExtensionPack.Computer.SystemDrive TaskAction="CheckDriveSpace" Drive="c:\" MinSpace="46500" Unit="Mb" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.Computer.SystemDrive TaskAction="CheckDriveSpace" Drive="c:\" MinSpace="1" Unit="Gb"/>
                    <!-- Get the drives on a machine -->
                    <MSBuild.ExtensionPack.Computer.SystemDrive TaskAction="GetDrives" SkipDrives="@(DrivesToSkip)">
                        <Output TaskParameter="Drives" ItemName="SystemDrives"/>
                    </MSBuild.ExtensionPack.Computer.SystemDrive>
                    <Message Text="Drive: %(SystemDrives.Identity), DriveType: %(SystemDrives.DriveType), Name: %(SystemDrives.Name), VolumeLabel: %(SystemDrives.VolumeLabel), DriveFormat: %(SystemDrives.DriveFormat), TotalSize: %(SystemDrives.TotalSize), TotalFreeSpace=%(SystemDrives.TotalFreeSpace), AvailableFreeSpace=%(SystemDrives.AvailableFreeSpace)IsReady=%(SystemDrives.IsReady), RootDirectory=%(SystemDrives.RootDirectory)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.SystemDrive.Unit">
            <summary>
            Sets the unit. Supports Kb, Mb(default), Gb, Tb
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.SystemDrive.Drive">
            <summary>
            Sets the drive.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.SystemDrive.MinSpace">
            <summary>
            Sets the min space.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.SystemDrive.Drives">
            <summary>
            Sets the drives. ITaskItem
            <para/>
            Identity: Name
            <para/>
            Metadata: Name, VolumeLabel, AvailableFreeSpace, DriveFormat, TotalSize, TotalFreeSpace, IsReady (LocalMachine only), RootDirectory (LocalMachine only)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.SystemDrive.SkipDrives">
            <summary>
            Sets the drives to skip. ITaskItem
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.SystemDrive.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.SystemDrive.CheckDriveSpace">
            <summary>
            Checks the drive space.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.SystemDrive.GetDrives">
            <summary>
            Gets the drives.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.EventLog">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Backup</i> (<b>Required: </b> LogName, BackupPath <b>Optional: </b>MachineName)</para>
            <para><i>CheckExists</i> (<b>Required: </b>LogName <b>Optional: </b>MachineName <b>Output: </b>Exists)</para>
            <para><i>Clear</i> (<b>Required: </b> LogName <b>Optional: </b>MachineName)</para>
            <para><i>Create</i> (<b>Required: </b>LogName <b>Optional: </b>MaxSize, Retention, MachineName, CategoryCount, MessageResourceFile, CategoryResourceFile, ParameterResourceFile)</para>
            <para><i>Delete</i> (<b>Required: </b>LogName <b>Optional: </b>MachineName)</para>
            <para><i>Modify</i> (<b>Required: </b>LogName <b>Optional: </b>MaxSize, Retention, MachineName)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Backup an eventlog -->
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="Backup" LogName="Security" BackupPath="C:\Securitybackup.evt"/>
                    <!-- Delete an eventlog -->
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="Delete" LogName="DemoEventLog"/>
                    <!-- Check whether an eventlog exists -->
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="CheckExists" LogName="DemoEventLog">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.EventLog>
                    <Message Text="DemoEventLog Exists: $(DoesExist)"/>
                    <!-- Create whether an eventlog -->
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="Create" LogName="DemoEventLog"  MaxSize="20" Retention="14"/>
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="CheckExists" LogName="DemoEventLog">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.EventLog>
                    <Message Text="DemoEventLog Exists: $(DoesExist)"/>
                    <!-- Various other quick tasks -->
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="Clear" LogName="DemoEventLog"/>
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="Modify" LogName="DemoEventLog"  MaxSize="55" Retention="25"/>
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="Delete" LogName="DemoEventLog"/>
                    <MSBuild.ExtensionPack.Computer.EventLog TaskAction="CheckExists" LogName="DemoEventLog">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.EventLog>
                    <Message Text="Exists: $(DoesExist)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.MaxSize">
            <summary>
            Sets the size of the max.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.Retention">
            <summary>
            Sets the retention. Any value > 0 is interpreted as days to retain. Use -1 for 'Overwrite as needed'. Use -2 for 'Never Overwrite'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.LogName">
            <summary>
            Sets the name of the Event Log
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.Exists">
            <summary>
            Gets a value indicating whether the event log exists.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.CategoryCount">
            <summary>
            Sets the number of categories in the category resource file
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.MessageResourceFile">
            <summary>
            Sets the path of the message resource file to configure an event log source to write localized event messages
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.CategoryResourceFile">
            <summary>
            Sets the path of the category resource file to write events with localized category strings
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.ParameterResourceFile">
            <summary>
            Sets the path of the parameter resource file to configure an event log source to write localized event messages with inserted parameter strings
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventLog.BackupPath">
            <summary>
            Sets the Backup Path
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.EventLog.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.EventSource">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>CheckExists</i> (<b>Required: </b>Source <b>Optional: </b>MachineName <b>Output: </b>Exists)</para>
            <para><i>Create</i> (<b>Required: </b>Source, LogName <b>Optional: </b>Force, MachineName, CategoryCount, MessageResourceFile, CategoryResourceFile, ParameterResourceFile)</para>
            <para><i>Delete</i> (<b>Required: </b>Source <b>Optional: </b>MachineName)</para>
            <para><i>Log</i> (<b>Required: </b> Source, Description, LogType, EventId, LogName<b>Optional: </b>MachineName)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Delete an event source -->
                    <MSBuild.ExtensionPack.Computer.EventSource TaskAction="Delete" Source="MyEventSource" LogName="Application"/>
                    <!-- Check an event source exists -->
                    <MSBuild.ExtensionPack.Computer.EventSource TaskAction="CheckExists" Source="MyEventSource" LogName="Application">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.EventSource>
                    <Message Text="Exists: $(DoesExist)"/>
                    <!-- Create an event source -->
                    <MSBuild.ExtensionPack.Computer.EventSource TaskAction="Create" Source="MyEventSource" LogName="Application"/>
                    <MSBuild.ExtensionPack.Computer.EventSource TaskAction="CheckExists" Source="MyEventSource" LogName="Application">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.EventSource>
                    <Message Text="Exists: $(DoesExist)"/>
                    <!-- Log an event -->
                    <MSBuild.ExtensionPack.Computer.EventSource TaskAction="Log" Source="MyEventSource" Description="Hello" LogType="Information" EventId="222"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.EventId">
            <summary>
            Sets the event id.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.LogType">
            <summary>
            Sets the Event Log Entry Type. Possible values are: Error, FailureAudit, Information, SuccessAudit, Warning.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.Description">
            <summary>
            Sets the description for the logentry
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.Source">
            <summary>
            Sets the source name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.LogName">
            <summary>
            Sets the name of the log the source's entries are written to, e.g Application, Security, System, YOUREVENTLOG.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.Force">
            <summary>
            Set to true to delete any existing matching eventsource when creating 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.CategoryCount">
            <summary>
            Sets the number of categories in the category resource file
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.MessageResourceFile">
            <summary>
            Sets the path of the message resource file to configure an event log source to write localized event messages
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.CategoryResourceFile">
            <summary>
            Sets the path of the category resource file to write events with localized category strings
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.ParameterResourceFile">
            <summary>
            Sets the path of the parameter resource file to configure an event log source to write localized event messages with inserted parameter strings
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EventSource.Exists">
            <summary>
            Gets a value indicating whether the EventSource exists.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.EventSource.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.EnvironmentVariable">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Get</i> (<b>Required: </b> Variable <b>Optional: </b>Target <b>Output: </b> Value)</para>
            <para><i>Set</i> (<b>Required: </b> Variable, Value <b>Optional: </b>Target)</para>
            <para><b>Remote Execution Support:</b> For Get TaskAction only</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Set an environment variable. Note how special characters need to be escaped (http://msdn.microsoft.com/en-us/library/ms228186(VS.80).aspx) -->
                    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Set" Variable="PATH" Value="$(VCInstallDir)Common7\IDE%3B$(VCInstallDir)VC\BIN%3B$(VCInstallDir)Common7\Tools%3B$(VCInstallDir)Common7\Tools\bin%3B$(VCInstallDir)VC\PlatformSDK\bin%3B$(SDKInstallDir)bin%3B$(PATH)"/>
                    <!-- Set a new Environment Variable. The default target is Process -->
                    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Set" Variable="ANewEnvSample" Value="bddd"/>
                    <!-- Get the Environment Variable -->
                    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Get" Variable="ANewEnvSample">
                        <Output PropertyName="EnvValue" TaskParameter="Value"/>
                    </MSBuild.ExtensionPack.Computer.EnvironmentVariable>
                    <Message Text="Get: $(EnvValue)"/>
                    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Set" Variable="ANewEnvSample" Value="newddd"/>
                    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Get" Variable="ANewEnvSample">
                        <Output PropertyName="EnvValue" TaskParameter="Value"/>
                    </MSBuild.ExtensionPack.Computer.EnvironmentVariable>
                    <Message Text="Get: $(EnvValue)"/>
                    <!-- Set a new Environment Variable on a remote machine -->
                    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Set" Variable="ANewEnvSample" Value="bddd" MachineName="MediaHub"/>
                    <!-- Get an Environment Variable from a remote machine -->
                    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Get" Variable="INOCULAN" Target="Machine" MachineName="machinename" UserName="Administrator" UserPassword="passw">
                        <Output PropertyName="EnvValue" TaskParameter="Value"/>
                    </MSBuild.ExtensionPack.Computer.EnvironmentVariable>
                    <Message Text="INOCULAN Get: $(EnvValue)"/>
                    <MSBuild.ExtensionPack.Computer.EnvironmentVariable TaskAction="Get" Variable="FT" Target="User" MachineName="machinename" UserName="Administrator" UserPassword="passw">
                        <Output PropertyName="EnvValue" TaskParameter="Value"/>
                    </MSBuild.ExtensionPack.Computer.EnvironmentVariable>
                    <Message Text="FT Get: $(EnvValue)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EnvironmentVariable.Value">
            <summary>
            Gets or sets the value. May be a string array for Get. If Value is not passed or empty for Set, the environment variable is deleted.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EnvironmentVariable.Variable">
            <summary>
            The name of the Environment Variable to get or set.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.EnvironmentVariable.Target">
            <summary>
            Machine, Process or User. Defaults to Process
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.EnvironmentVariable.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.EnvironmentVariable.Set">
            <summary>
            Sets this instance.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.EnvironmentVariable.Get">
            <summary>
            Gets this instance.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.PerformanceCounters">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Add</i> (<b>Required: </b> CategoryName, CounterList, CategoryHelp <b>Optional: </b> MultiInstance, KeepExistingCounters)</para>
            <para><i>CheckCategoryExists</i> (<b>Required: </b> CategoryName <b>Optional: </b> MachineName)</para>
            <para><i>CheckCounterExists</i> (<b>Required: </b> CategoryName, CounterName <b>Optional: </b> MachineName)</para>
            <para><i>GetValue</i> (<b>Required: </b> CategoryName, CounterName <b>Output: </b> Value, MachineName)</para>
            <para><i>Remove</i> (<b>Required: </b> CategoryName)</para>
            <para><b>Remote Execution Support:</b> Partial</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <!-- Configure some perf counters -->
                        <CounterList Include="foobar.A">
                            <CounterName>ACounter</CounterName>
                            <CounterHelp>A Custom Counter</CounterHelp>
                            <CounterType>CounterTimer</CounterType>
                        </CounterList>
                        <CounterList Include="foobar.A">
                            <CounterName>AnotherCounter</CounterName>
                            <CounterHelp>Another Custom Counter</CounterHelp>
                            <CounterType>CounterTimer</CounterType>
                        </CounterList>
                    </ItemGroup>
                    <!-- Add a Performance Counter -->
                    <MSBuild.ExtensionPack.Computer.PerformanceCounters TaskAction="Add" CategoryName="YourCustomCategory" CategoryHelp="This is a custom performance counter category" CounterList="@(CounterList)" MultiInstance="true" />
                    <!-- Check whether a Category Exists -->
                    <MSBuild.ExtensionPack.Computer.PerformanceCounters TaskAction="CheckCategoryExists" CategoryName="aYourCustomCategory">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.PerformanceCounters>
                    <Message Text="aYourCustomCategory - $(DoesExist)"/>
                    <!-- Check whether a Counter Exists -->
                    <MSBuild.ExtensionPack.Computer.PerformanceCounters TaskAction="CheckCounterExists" CategoryName="aYourCustomCategory" CounterName="AnotherCounter">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.PerformanceCounters>
                    <Message Text="AnotherCounter - $(DoesExist)"/>
                    <!-- Remove a Performance Counter -->
                    <MSBuild.ExtensionPack.Computer.PerformanceCounters TaskAction="Remove" CategoryName="YourCustomCategory"/>
                    <!-- Get a Performance Counter value-->
                    <MSBuild.ExtensionPack.Computer.PerformanceCounters TaskAction="GetValue" CategoryName="Memory" CounterName="Available MBytes">
                        <Output PropertyName="TheValue" TaskParameter="Value"/>
                    </MSBuild.ExtensionPack.Computer.PerformanceCounters>
                    <Message Text="Available MBytes: $(TheValue)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.PerformanceCounters.CategoryName">
            <summary>
            Sets the CategoryName
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.PerformanceCounters.CategoryHelp">
            <summary>
            Sets the description of the custom category.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.PerformanceCounters.Value">
            <summary>
            Gets the value of the counter
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.PerformanceCounters.CounterName">
            <summary>
            Sets the name of the counter.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.PerformanceCounters.MultiInstance">
            <summary>
            Sets a value indicating whether to create a multiple instance performance counter. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.PerformanceCounters.Exists">
            <summary>
            Gets whether the item exists
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.PerformanceCounters.CounterList">
            <summary>
            Sets the TaskItem[] that specifies the counters to create as part of the new category.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.PerformanceCounters.KeepExistingCounters">
            <summary>
            Sets a value whether existing performance counters of the given category should be preserved when adding new ones.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.PerformanceCounters.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.Network">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>GetDnsHostName</i> (<b>Required: HostName</b> <b>Output:</b> DnsHostName)</para>
            <para><i>GetFreePort</i> (<b>Output:</b> Port)</para>
            <para><i>GetInternalIP</i> (<b>Output:</b> Ip)</para>
            <para><i>GetRemoteIP</i> (<b>Required: </b>HostName <b>Output:</b> Ip)</para>
            <para><i>Ping</i> (<b>Required: </b> HostName <b>Optional: </b>Timeout, PingCount <b>Output:</b> Exists)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Get the Machine IP Addresses -->
                    <MSBuild.ExtensionPack.Computer.Network TaskAction="GetInternalIP">
                        <Output TaskParameter="IP" ItemName="TheIP"/>
                    </MSBuild.ExtensionPack.Computer.Network>
                    <Message Text="The IP: %(TheIP.Identity)"/>
                    <!-- Get Remote IP Addresses -->
                    <MSBuild.ExtensionPack.Computer.Network TaskAction="GetRemoteIP" HostName="www.freetodev.com">
                        <Output TaskParameter="IP" ItemName="TheRemoteIP"/>
                    </MSBuild.ExtensionPack.Computer.Network>
                    <Message Text="The Remote IP: %(TheRemoteIP.Identity)"/>
                    <!-- Ping a host -->
                    <MSBuild.ExtensionPack.Computer.Network TaskAction="Ping" HostName="www.freetodev.com">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.Network>
                    <Message Text="Exists: $(DoesExist)"/>
                    <!-- Gets the fully-qualified domain name for a hostname. -->
                    <MSBuild.ExtensionPack.Computer.Network TaskAction="GetDnsHostName" HostName="192.168.0.15">
                        <Output TaskParameter="DnsHostName" PropertyName="HostEntryName" />
                    </MSBuild.ExtensionPack.Computer.Network>
                    <Message Text="Host Entry name: $(HostEntryName)" />
                    <!-- Get free port details -->
                    <MSBuild.ExtensionPack.Computer.Network TaskAction="GetFreePort">
                        <Output TaskParameter="Port" ItemName="FreePort"/>
                    </MSBuild.ExtensionPack.Computer.Network>
                    <Message Text="Free Port Address: %(FreePort.Address)"/>
                    <Message Text="Free Port AddressFamily: %(FreePort.AddressFamily)"/>
                    <Message Text="Free Port Port: %(FreePort.Port)"/>
                    <Message Text="Free Port ToString: %(FreePort.ToString)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Network.HostName">
            <summary>
            Sets the HostName / IP address
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Network.Exists">
            <summary>
            Gets whether the Host Exists
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Network.PingCount">
            <summary>
            Sets the number of pings to attempt. Default is 5.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Network.Timeout">
            <summary>
            Sets the timeout in ms for a Ping. Default is 3000
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Network.IP">
            <summary>
            Gets the IP's
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Network.Port">
            <summary>
            Gets the free port. ItemSpec is Port. Metadata includes Address, AddressFamily, Port and ToString
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Network.DnsHostName">
            <summary>
            Gets the DnsHostName
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.Network.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.Registry">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>CheckEmpty</i> (<b>Required: </b> RegistryHive, Key <b>Optional:</b> RegistryView <b>Output: </b>Empty)</para>
            <para><i>CheckValueExists</i> (<b>Required: </b> RegistryHive, Key, Value <b>Optional:</b> RegistryView <b>Output: </b>Empty (true iff the value does not exist))</para>
            <para><i>CreateKey</i> (<b>Required: </b> RegistryHive, Key <b>Optional:</b> RegistryView)</para>
            <para><i>DeleteKey</i> (<b>Required: </b> RegistryHive, Key <b>Optional:</b> RegistryView)</para>
            <para><i>DeleteKeyTree</i> (<b>Required: </b> RegistryHive, Key <b>Optional:</b> RegistryView )</para>
            <para><i>DeleteValue</i> (<b>Required: </b> RegistryHive, Key, Value <b>Optional:</b> RegistryView<b>Output: </b>Empty (true iff the Delete was redundant))</para>
            <para><i>Get</i> (<b>Required: </b> RegistryHive, Key, Value  <b>Optional:</b> RegistryView <b>Output: </b>Data)</para>
            <para><i>Set</i> (<b>Required: </b> RegistryHive, Key, Value <b>Optional:</b> DataType, RegistryView)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Create a key -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="CreateKey" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp"/>
                    <!-- Check if a key is empty -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="CheckEmpty" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp">
                        <Output PropertyName="REmpty" TaskParameter="Empty"/>
                    </MSBuild.ExtensionPack.Computer.Registry>
                    <Message Text="SOFTWARE\ANewTemp is empty: $(REmpty)"/>
                    <!-- Set a value -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="Set" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp" Value="MySetting" Data="21"/>
                    <!-- Check if the value exists -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="CheckValueExists" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp" Value="MySetting">
                        <Output PropertyName="RExists" TaskParameter="Exists"/>
                    </MSBuild.ExtensionPack.Computer.Registry>
                    <Message Text="SOFTWARE\ANewTemp\@MySetting exists: $(RExists)"/>
                    <!-- Get the value out -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="Get" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp" Value="MySetting">
                        <Output PropertyName="RData" TaskParameter="Data"/>
                    </MSBuild.ExtensionPack.Computer.Registry>
                    <Message Text="Registry Value: $(RData)"/>
                    <!-- Check if a key is empty again -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="CheckEmpty" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp">
                        <Output PropertyName="REmpty" TaskParameter="Empty"/>
                    </MSBuild.ExtensionPack.Computer.Registry>
                    <Message Text="SOFTWARE\ANewTemp is empty: $(REmpty)"/>
                    <!-- Set some Binary Data -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="Set" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp" DataType="Binary" Value="binval" Data="10, 43, 44, 45, 14, 255" />
                    <!--Get some Binary Data--> 
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="Get" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp" Value="binval">
                        <Output PropertyName="RData" TaskParameter="Data"/>
                    </MSBuild.ExtensionPack.Computer.Registry>
                    <Message Text="Registry Value: $(RData)"/>
                    <!-- Delete a value -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="DeleteValue" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp" Value="MySetting" />
                    <!-- Delete a key -->
                    <MSBuild.ExtensionPack.Computer.Registry TaskAction="DeleteKey" RegistryHive="LocalMachine" Key="SOFTWARE\ANewTemp"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Registry.DataType">
            <summary>
            Sets the type of the data. RegistryValueKind Enumeration. Support for Binary, DWord, MultiString, QWord, ExpandString
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Registry.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Registry.Value">
            <summary>
            Sets the value. If Value is not provided, an attempt will be made to read the Default Value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Registry.RegistryHive">
            <summary>
            Sets the Registry Hive. Supports ClassesRoot, CurrentUser, LocalMachine, Users, PerformanceData, CurrentConfig, DynData
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Registry.RegistryView">
            <summary>
            Sets the Registry View. Supports Registry32, Registry64 and Default. Defaults to Default
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Registry.Key">
            <summary>
            Sets the key.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Registry.Empty">
            <summary>
            Indicates whether the Registry Key is empty or not
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.Registry.Exists">
            <summary>
            Indicates whether the Registry value exists
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.Registry.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.Registry.CheckEmpty">
            <summary>
            Checks if a Registry Key contains values or subkeys.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.NativeMethods">
            <summary>
            RegistryNativeMethods
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.ServiceStartMode">
            <summary>
            Start mode of the Windows base service.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceStartMode.Automatic">
            <summary>
            Service to be started automatically by the Service Control Manager during system startup.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceStartMode.Boot">
            <summary>
            Device driver started by the operating system loader. This value is valid only for driver services.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceStartMode.System">
            <summary>
            Device driver started by the operating system initialization process. This value is valid only for driver services.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceStartMode.Manual">
            <summary>
            Service to be started by the Service Control Manager when a process calls the StartService method.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceStartMode.Disabled">
            <summary>
            Service that can no longer be started.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceStartMode.AutomaticDelayedStart">
            <summary>
            Service to be started automatically by the Service Control Manager after all the service designated as Automatic have been started.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.ServiceReturnCode">
            <summary>
            The return code from the WMI Class Win32_Service
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.NotSupported">
            <summary>
            Not Supported
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.AccessDenied">
            <summary>
            Access Denied
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.DependentServicesRunning">
            <summary>
            Dependent Services Running
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.InvalidServiceControl">
            <summary>
            Invalid Service Control
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceCannotAcceptControl">
            <summary>
            Service Cannot Accept Control
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceNotActive">
            <summary>
            Service Not Active
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceRequestTimeout">
            <summary>
            Service Request Timeout
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.UnknownFailure">
            <summary>
            Unknown Failure
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.PathNotFound">
            <summary>
            Path Not Found
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceAlreadyRunning">
            <summary>
            Service Already Running
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceDatabaseLocked">
            <summary>
            Service Database Locked
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceDependencyDeleted">
            <summary>
            Service Dependency Deleted
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceDependencyFailure">
            <summary>
            Service Dependency Failure
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceDisabled">
            <summary>
            Service Disabled
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceLogOnFailure">
            <summary>
            Service Logon Failure
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceMarkedForDeletion">
            <summary>
            Service Marked For Deletion
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceNoThread">
            <summary>
            Service No Thread
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.StatusCircularDependency">
            <summary>
            Status Circular Dependency
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.StatusDuplicateName">
            <summary>
            Status Duplicate Name
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.StatusInvalidName">
            <summary>
            Status Invalid Name
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.StatusInvalidParameter">
            <summary>
            Status Invalid Parameter
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.StatusInvalidServiceAccount">
            <summary>
            Status Invalid Service Account
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.StatusServiceExists">
            <summary>
            Status Service Exists
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceReturnCode.ServiceAlreadyPaused">
            <summary>
            Service Already Paused
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.ServiceTypes">
            <summary>
            Type of services provided to processes that call them.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceTypes.KernalDriver">
            <summary>
            Kernel Driverr
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceTypes.FileSystemDriver">
            <summary>
            File System Driver
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceTypes.Adapter">
            <summary>
            Adapter
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceTypes.RecognizerDriver">
            <summary>
            Recognizer Driver
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceTypes.OwnProcess">
            <summary>
            Own Process
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceTypes.ShareProcess">
            <summary>
            Share Process
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceTypes.InteractiveProcess">
            <summary>
            Interactive Process
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.ServiceErrorControl">
            <summary>
            Severity of the error if the Create method fails to start. The value indicates the action taken by the startup program if failure occurs. All errors are logged by the system. 
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceErrorControl.UserNotNotified">
            <summary>
            User is not notified.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceErrorControl.UserNotified">
            <summary>
            User is notified.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceErrorControl.SystemRestartedWithLastKnownGoodConfiguration">
            <summary>
            System is restarted with the last-known-good configuration.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceErrorControl.SystemAttemptsToStartWithAGoodConfiguration">
            <summary>
            System attempts to start with a good configuration.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.ServiceState">
            <summary>
            Current state of the base service
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceState.Paused">
            <summary>
            Paused
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceState.StartPending">
            <summary>
            Start Pending
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceState.StopPending">
            <summary>
            Stop Pending
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceState.PausePending">
            <summary>
            Pause Pending
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Computer.ServiceState.ContinuePending">
            <summary>
            Continue Pending
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Computer.WindowsService">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>CheckExists</i> (<b>Required: </b> ServiceName <b>Optional: </b>MachineName, RemoteUser, RemoteUserPassword <b>Output: </b>Exists)</para>
            <para><i>Delete</i> (<b>Required: </b> ServiceName <b>Optional: </b>MachineName)</para>
            <para><i>Disable</i> (<b>Required: </b> ServiceName <b>Optional: </b>MachineName)</para>
            <para><i>Install</i> (<b>Required: </b> ServiceName, ServicePath, User<b>Optional: </b>Force, StartupType, CommandLineArguments, Description, ServiceDependencies, ServiceDisplayName, MachineName, RemoteUser, RemoteUserPassword)</para>
            <para><i>Restart</i> (<b>Required: </b> ServiceName <b>Optional: </b>MachineName). Any running directly dependent services will be restarted too.</para>
            <para><i>SetAutomatic</i> (<b>Required: </b> ServiceName <b>Optional: </b>MachineName)</para>
            <para><i>SetManual</i> (<b>Required: </b> ServiceName <b>Optional: </b>MachineName)</para>
            <para><i>Start</i> (<b>Required: </b> ServiceName or Services <b>Optional: </b>MachineName, RetryAttempts)</para>
            <para><i>Stop</i> (<b>Required: </b> ServiceName or Services <b>Optional: </b>MachineName, RetryAttempts)</para>
            <para><i>Uninstall</i> (<b>Required: </b> ServicePath <b>Optional: </b>MachineName, RemoteUser, RemoteUserPassword)</para>
            <para><i>UpdateIdentity</i> (<b>Required: </b> ServiceName, User, Password <b>Optional: </b>MachineName)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                    <User>serviceAcct</User>
                    <Password>P2ssw0rd</Password>
                    <RemoteMachine>VSTS2008</RemoteMachine>
                    <RemoteUser>vsts2008\tfssetup</RemoteUser>
                    <RemoteUserPassword>1Setuptfs</RemoteUserPassword>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- check whether a service exists (this should return true in most cases) -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="CheckExists" ServiceName="Schedule">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.WindowsService>
                    <Message Text="Schedule service exists: $(DoesExist)"/>
                    <!-- check whether another service exists (this should return false)-->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="CheckExists" ServiceName="ThisServiceShouldNotExist">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.WindowsService>
                    <Message Text="ThisServiceShouldNotExist service exists: $(DoesExist)"/>
                    <!-- Check whether a service exists on a Remote Machine(this should return true in most cases) -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="CheckExists" ServiceName="Schedule" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.Computer.WindowsService>
                    <Message Text="Schedule service exists on '$(RemoteMachine)': $(DoesExist)"/>
                    <!-- Start a service -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Start" ServiceName="MSSQLSERVER"/>
                    <!-- Start a service on a Remote Machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Start" ServiceName="BITS" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)" />
                    <!-- Stop a service -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Stop" ServiceName="MSSQLSERVER"/>
                    <!-- Stop a service on a Remote Machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Stop" ServiceName="BITS" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)"/>
                    <!-- Uninstall a service on the Local Machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Uninstall" ServiceName="__TestService1" ServicePath="c:\WINDOWS\system32\taskmgr.exe" />
                    <!-- Uninstall a service on a Remote Machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Uninstall" ServiceName="__TestService1" ServicePath="c:\WINDOWS\system32\taskmgr.exe" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)" />
                    <!-- Install a service on the Local machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Install" ServiceName="__TestService1" User="$(User)" Password="$(password)" ServicePath="c:\WINDOWS\system32\taskmgr.exe" />
                    <!-- Install a service on a Remote Machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Install" ServiceName="__TestService1" User="$(User)" Password="$(password)" ServicePath="c:\WINDOWS\system32\taskmgr.exe" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)" />
                    <!-- Disable a service -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Disable" ServiceName="__TestService1"/>
                    <!-- Disable a service on a Remote Machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Disable" ServiceName="__TestService1" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)"/>
                    <!-- Set a service to start automatically on system startup-->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="SetAutomatic" ServiceName="__TestService1"/>
                    <!-- Set a service to start automatically on system startup on a Remote Machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="SetAutomatic" ServiceName="__TestService1" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)"/>
                    <!-- Set a service to start manually -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="SetManual" ServiceName="__TestService1"/>
                    <!-- Set a service to start manually on a Remote Machine -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="SetManual" ServiceName="__TestService1" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)"/>
                    <!-- Update the Identity that the service runs in -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="UpdateIdentity" ServiceName="__TestService1" User="$(User)" Password="$(Password)"/>
                    <!-- Update the Identity that the service on a Remote Machine runs in -->
                    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="UpdateIdentity" ServiceName="__TestService1" User="$(User)" Password="$(Password)" RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(RemoteMachine)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.RetryAttempts">
            <summary>
            Sets the number of times to attempt Starting / Stopping a service. Default is 60.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.Exists">
            <summary>
            Gets whether the service exists
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.User">
            <summary>
            Sets the user.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.ServiceName">
            <summary>
            The Name of the service. Note, this is the 'Service Name' as displayed in services.msc, NOT the 'Display Name'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.ServiceDisplayName">
            <summary>
            The Display Name of the service. Defaults to ServiceName.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.ServicePath">
            <summary>
            Sets the path of the service executable
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.Password">
            <summary>
            Sets user password
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.Force">
            <summary>
            Sets a value indicating whether to delete a service if it already exists when calling Install
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.Description">
            <summary>
            Sets the service description
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.RemoteUser">
            <summary>
            Sets the user to impersonate on remote server.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.RemoteUserPassword">
            <summary>
            Sets the password for the user to impersonate on remote server.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.ServiceDependencies">
            <summary>
            Sets the services upon which the installed service depends.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.CommandLineArguments">
            <summary>
            Sets the command line arguments to be passed to the service.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.StartupType">
            <summary>
            Sets the Startup Type of the service. 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Computer.WindowsService.Services">
            <summary>
            Sets the collection of Services to target in parallel. See TaskAction parameters for which TaskActions support this.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Computer.WindowsService.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.FileSystem.FileVersion">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Increment</i> (<b>Required: </b>File <b>Optional: </b>Increment <b>Output: </b>Value)</para>
            <para><i>Reset</i> (<b>Required: </b>File <b>Optional: </b>Value <b>Output: </b>Value)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Perform a default increment of 1 -->
                    <MSBuild.ExtensionPack.FileSystem.FileVersion TaskAction="Increment" File="C:\a\MyVersionfile.txt">
                        <Output TaskParameter="Value" PropertyName="NewValue"/>
                    </MSBuild.ExtensionPack.FileSystem.FileVersion>
                    <Message Text="$(NewValue)"/>
                    <!-- Perform an increment of 5 -->
                    <MSBuild.ExtensionPack.FileSystem.FileVersion TaskAction="Increment" File="C:\a\MyVersionfile2.txt" Increment="5">
                        <Output TaskParameter="Value" PropertyName="NewValue"/>
                    </MSBuild.ExtensionPack.FileSystem.FileVersion>
                    <Message Text="$(NewValue)"/>
                    <!-- Reset a file value -->
                    <MSBuild.ExtensionPack.FileSystem.FileVersion TaskAction="Reset" File="C:\a\MyVersionfile3.txt" Value="10">
                        <Output TaskParameter="Value" PropertyName="NewValue"/>
                    </MSBuild.ExtensionPack.FileSystem.FileVersion>
                    <Message Text="$(NewValue)"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FileVersion.File">
            <summary>
            The file to store the incrementing version in.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FileVersion.Increment">
            <summary>
            Value to increment by. Default is 1.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FileVersion.Value">
            <summary>
            Gets value returned from the file, or used to reset the value in the file. Default is 0.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.FileSystem.FileVersion.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.FileSystem.FindUnder">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>FindFiles</i> (<b>Required: </b> Path <b>Optional: </b>ModifiedAfterDate, ModifiedBeforeDate, Recursive, SearchPattern <b>Output: </b>FoundItems)</para>
            <para><i>FindDirectories</i> (<b>Required: </b> Path <b>Optional: </b>ModifiedAfterDate, ModifiedBeforeDate, Recursive, SearchPattern <b>Output: </b>FoundItems)</para>
            <para><i>FindFilesAndDirectories</i> (<b>Required: </b> Path <b>Optional: </b>ModifiedAfterDate, ModifiedBeforeDate, Recursive, SearchPattern <b>Output: </b>FoundItems)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Demo">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Demo">
                    <!-- Only finds files -->
                    <MSBuild.ExtensionPack.FileSystem.FindUnder TaskAction="FindFiles" Path="$(MSBuildProjectDirectory)">
                        <Output ItemName="AllFoundFiles" TaskParameter="FoundItems"/>
                    </MSBuild.ExtensionPack.FileSystem.FindUnder>
                    <Message Text="===== Found Files =====" Importance="high"/>
                    <Message Text="AllFoundFiles:%0d%0a@(AllFoundFiles,'%0d%0a')"/>
                    <!-- Only finds directories -->
                    <MSBuild.ExtensionPack.FileSystem.FindUnder TaskAction="FindDirectories" Path="$(MSBuildProjectDirectory)\..\">
                        <Output ItemName="AllFoundDirectories" TaskParameter="FoundItems"/>
                    </MSBuild.ExtensionPack.FileSystem.FindUnder>
                    <Message Text="===== Found Directories =====" Importance="high"/>
                    <Message Text="AllFoundDirectories:%0d%0a@(AllFoundDirectories,'%0d%0a')"/>
                    <!-- Find both files and directories -->
                    <MSBuild.ExtensionPack.FileSystem.FindUnder TaskAction="FindFilesAndDirectories" Path="$(MSBuildProjectDirectory)\..\">
                        <Output ItemName="AllFoundItems" TaskParameter="FoundItems"/>
                    </MSBuild.ExtensionPack.FileSystem.FindUnder>
                    <Message Text="===== Found Files and Directories =====" Importance="high"/>
                    <Message Text="AllFoundItems:%0d%0a@(AllFoundItems,'%0d%0a')"/>
                    <!-- Find both files with SearchPattern = "F*" -->
                    <MSBuild.ExtensionPack.FileSystem.FindUnder TaskAction="FindFiles" Path="$(MSBuildProjectDirectory)\..\" SearchPattern="F*">
                        <Output ItemName="AllFilesStartingWithF" TaskParameter="FoundItems"/>
                    </MSBuild.ExtensionPack.FileSystem.FindUnder>
                    <Message Text="===== Found Files Starting with 'F' =====" Importance="high"/>
                    <Message Text="AllFilesStartingWithF:%0d%0a@(AllFilesStartingWithF,'%0d%0a')"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FindUnder.Recursive">
            <summary>
            Sets whether the File search is recursive. Default is true
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FindUnder.ModifiedAfterDate">
            <summary>
            Set this value to only return files or folders modified after the given value
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FindUnder.ModifiedBeforeDate">
            <summary>
            Set this value to only return files or folders modified before the given value
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FindUnder.Path">
            <summary>
            The path that the <c>FindUnder</c> will be executed against.
            This is a <b>Required</b> value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FindUnder.FoundItems">
            <summary>
            The list of items (files and or directories) which were found.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FindUnder.SearchPattern">
            <summary>
            This in an optional input property. This will set the <c>SearchPattern</c>
            to be used in the search.<br/>
            The default value for this is <c>"*"</c>;<br/>
            This value is passed to either the System.IO.DirectoryInfo.GetDirectories method and/or the
            System.IO.FileInfo.GetFiles method. See that documentation for usage guidlines.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FindUnder.FindFiles">
            <summary>
            Gets or sets a value indicating if files should be included in the result.<br/>
            The default value for this is <c>false</c>.<br/>
            Both <c>FindFiles</c> and <c>FindDirectories</c> cannot be <c>false</c>, atleast
            one <b>must</b> be <c>true</c>.
            </summary>
            <value><c>true</c> if file should be included in the find result; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.FindUnder.FindDirectories">
            <summary>
            Gets or sets a value indicating if directories should be included in the result.<br/>
            The default value for this is <c>false</c>.
            Both <c>FindFiles</c> and <c>FindDirectories</c> cannot be <c>false</c>, atleast
            one <b>must</b> be <c>true</c>.
            </summary>
            <value><c>true</c> if directories should be included in the find result; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MSBuild.ExtensionPack.FileSystem.RoboCopy">
            <summary>
            This task wraps RoboCopy. Successful non-zero exit codes from Robocopy are set to zero to not break MSBuild. Use the ReturnCode property to access the exit code from Robocopy
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <MSBuild.ExtensionPack.FileSystem.RoboCopy Source="C:\b" Destination="C:\bbzz" Files="*.*" Options="/MIR">
                        <Output TaskParameter="ExitCode" PropertyName="Exit" />
                        <Output TaskParameter="ReturnCode" PropertyName="Return" />
                    </MSBuild.ExtensionPack.FileSystem.RoboCopy>
                    <Message Text="ExitCode = $(Exit)"/>
                    <Message Text="ReturnCode = $(Return)"/>
                    <MSBuild.ExtensionPack.FileSystem.RoboCopy Source="C:\a" Destination="C:\abzz" Files="*.txt" Options="/e">
                        <Output TaskParameter="ExitCode" PropertyName="Exit" />
                        <Output TaskParameter="ReturnCode" PropertyName="Return" />
                    </MSBuild.ExtensionPack.FileSystem.RoboCopy>
                    <Message Text="ExitCode = $(Exit)"/>
                    <Message Text="ReturnCode = $(Return)"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.RoboCopy.Source">
            <summary>
            Source Directory (drive:\path or \\server\share\path).
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.RoboCopy.Destination">
            <summary>
            Destination Dir  (drive:\path or \\server\share\path).
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.RoboCopy.Files">
            <summary>
            File(s) to copy  (names/wildcards: default is "*.*").
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.RoboCopy.ReturnCode">
            <summary>
            Gets the Return Code from RoboCopy
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.RoboCopy.Options">
            <summary>
            Type 'robocopy.exe /?' at the command prompt for all available options
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.RoboCopy.LogToConsole">
            <summary>
            Set to true to log output to the console. Default is false
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.FileSystem.Share">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>CheckExists</i> (<b>Required: </b> ShareName <b>Output:</b> Exists)</para>
            <para><i>Create</i> (<b>Required: </b> ShareName, SharePath <b>Optional: </b>Description, MaximumAllowed, CreateSharePath, AllowUsers, DenyUsers)</para>
            <para><i>Delete</i> (<b>Required: </b> ShareName)</para>
            <para><i>ModifyPermissions</i> (<b>Required: </b> ShareName <b>Optional: </b>AllowUsers, DenyUsers).</para>
            <para><i>SetPermissions</i> (<b>Required: </b> ShareName <b>Optional: </b>AllowUsers, DenyUsers). SetPermissions will reset all existing permissions.</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <Allow Include="ADomain\ADomainUser"/>
                        <Allow Include="AMachine\ALocalReadUser">
                            <Permission>Read</Permission>
                        </Allow>
                        <Allow Include="AMachine\ALocalChangeUser">
                            <Permission>Change</Permission>
                        </Allow>
                    </ItemGroup>
                    <!-- Delete shares -->
                    <MSBuild.ExtensionPack.FileSystem.Share TaskAction="Delete" ShareName="MSBEPS1"/>
                    <MSBuild.ExtensionPack.FileSystem.Share TaskAction="Delete" ShareName="MSBEPS2"/>
                    <!-- Create a share and specify users. The share path will be created if it doesnt exist. -->
                    <MSBuild.ExtensionPack.FileSystem.Share TaskAction="Create" AllowUsers="@(Allow)" CreateSharePath="true" SharePath="C:\fff1" ShareName="MSBEPS1" Description="A Description of MSBEPS1"/>
                    <!-- Create a share. Defaults to full permission for Everyone. -->
                    <MSBuild.ExtensionPack.FileSystem.Share TaskAction="Create" SharePath="C:\fffd" ShareName="MSBEPS2" Description="A Description of MSBEPS2"/>
                    <!-- Create a share on a remote server -->
                    <MSBuild.ExtensionPack.FileSystem.Share TaskAction="Create" AllowUsers="@(Allow)" CreateSharePath="true" MachineName="MyFileShareServer" ShareName="Temp" SharePath="D:\Temp" Description="Folder for shared files used." />
                </Target>
            </Project>
            ]]></code>    
            </example> 
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.AccessDenied">
            <summary>
            AccessDenied
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.UnknownFailure">
            <summary>
            UnknownFailure
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.InvalidName">
            <summary>
            InvalidName
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.InvalidLevel">
            <summary>
            InvalidLevel
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.InvalidParameter">
            <summary>
            InvalidParameter
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.ShareAlreadyExists">
            <summary>
            ShareAlreadyExists
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.RedirectedPath">
            <summary>
            RedirectedPath
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.UnknownDeviceOrDirectory">
            <summary>
            UnknownDeviceOrDirectory
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.FileSystem.Share.ReturnCode.NetNameNotFound">
            <summary>
            NetNameNotFound
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Share.Description">
            <summary>
            Sets the desctiption for the share
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Share.ShareName">
            <summary>
            Sets the share name
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Share.SharePath">
            <summary>
            Sets the share path
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Share.MaximumAllowed">
            <summary>
            Sets the maximum number of allowed users for the share
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Share.CreateSharePath">
            <summary>
            Sets whether to create the SharePath if it doesnt exist. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Share.Exists">
            <summary>
            Gets whether the share exists
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Share.AllowUsers">
            <summary>
            Sets a collection of users allowed to access the share. Use the Permission metadata tag to specify permissions. Default is Full.
            <para/>
            <code lang="xml"><![CDATA[
            <Allow Include="AUser">
                <Permission>Full, Read or Change etc</Permission>
            </Allow>
            ]]></code>    
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Share.DenyUsers">
            <summary>
            Sets a collection of users not allowed to access the share
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.FileSystem.Share.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.FileSystem.Detokenise">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Analyse</i> (<b>Required: </b>TargetFiles or TargetPath <b>Optional: </b> CommandLineValues, DisplayFiles, TextEncoding, ForceWrite, ReplacementValues, Separator, TokenPattern, TokenExtractionPattern <b>Output: </b>FilesProcessed)</para>
            <para><i>Detokenise</i> (<b>Required: </b>TargetFiles or TargetPath <b>Optional: </b> SearchAllStores, IgnoreUnknownTokens, CommandLineValues, DisplayFiles, TextEncoding, ForceWrite, ReplacementValues, Separator, TokenPattern, TokenExtractionPattern <b>Output: </b>FilesProcessed, FilesDetokenised)</para>
            <para><i>Report</i> (<b>Required: </b>TargetFiles or TargetPath <b>Optional: </b> DisplayFiles, TokenPattern, ReportUnusedTokens <b>Output: </b>FilesProcessed, TokenReport, UnusedTokens)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default;Report" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <PropertyGroup>
                    <PathToDetokenise>C:\Demo\*</PathToDetokenise>
                    <CPHome>http://www.msbuildextensionpack.com</CPHome>
                    <Title>A New Title</Title>
                    <clv>hello=hello#~#hello1=how#~#hello2=are#~#Configuration=debug</clv>
                    <Configuration>debug</Configuration>
                    <Platform>x86</Platform>
                    <HiImAnUnsedToken>TheReportWillFindMe</HiImAnUnsedToken>
                </PropertyGroup>
                <Target Name="Default">
                    <ItemGroup>
                        <FileCollection Include="C:\Demo1\TestFile.txt"/>
                        <FileCollection2 Include="C:\Demo1\TestFile2.txt"/>
                        <FileCollection3 Include="C:\Demo1\TestFile3.txt"/>
                    </ItemGroup>
                    <ItemGroup>
                        <TokenValues Include="Title">
                            <Replacement>ANewTextString</Replacement>
                        </TokenValues >
                        <TokenValues Include="ProjectHome">
                            <Replacement>http://www.msbuildextensionpack.com</Replacement>
                        </TokenValues >
                    </ItemGroup>
                    <!-- Analyse a collection of files. This can be used to ensure that all tokens are known. -->
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Analyse" TargetFiles="@(FileCollection)" ReplacementValues="@(TokenValues)"/>
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Analyse" TargetFiles="@(FileCollection2)"/>
                    <!-- 1 Detokenise the files defined in FileCollection and use the TokenValues collection for substitution. -->
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Detokenise" TargetFiles="@(FileCollection)" ReplacementValues="@(TokenValues)"/>
                    <!-- 2 Detokenise the files defined in FileCollection2 and use the tokens defined by the .proj properties -->
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Detokenise" TargetFiles="@(FileCollection2)"/>
                    <!-- 3 Detokenise the files at the given TargetPath and perform a recursive search -->
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Detokenise" TargetPath="$(PathToDetokenise)"/>
                    <!-- 4 This will produce the same result as #3, but no file processing will be logged to the console. Because ForceWrite has been specified, all files will be re-written -->
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Detokenise" TargetPath="$(PathToDetokenise)" DisplayFiles="false" ForceWrite="true"/>
                    <!-- 5 This will produce the same result as 4, though ForceWrite is false by default so the difference can be displayed using the output parameters -->
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Detokenise" TargetPath="$(PathToDetokenise)" DisplayFiles="false">
                        <Output TaskParameter="FilesProcessed" ItemName="FilesProcessed"/>
                        <Output TaskParameter="FilesDetokenised" ItemName="FilesDetokenised"/>
                    </MSBuild.ExtensionPack.FileSystem.Detokenise>
                    <Message Text="FilesDetokenised = @(FilesDetokenised), FilesProcessed = @(FilesProcessed)"/>
                    <!-- 6 Detokenise using values that can be passed in via the command line -->
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Detokenise" TargetFiles="@(FileCollection3)" CommandLineValues="$(clv)"/>
                </Target>
                <!--- Generate a report of files showing which tokens are used in files -->
                <Target Name="Report" DependsOnTargets="GetFiles">
                    <CallTarget Targets="List"/>
                </Target>
                <Target Name="List" Inputs="@(Report1)" Outputs="%(Identity)">
                    <Message Text="Token: @(Report1)"/>
                    <Message Text="%(Report1.Files)"/>
                </Target>
                <Target Name="GetFiles">
                    <MSBuild.ExtensionPack.FileSystem.Detokenise TaskAction="Report" TargetPath="C:\Demo1*"  DisplayFiles="true" ReportUnusedTokens="true">
                        <Output TaskParameter="TokenReport" ItemName="Report1"/>
                        <Output TaskParameter="UnusedTokens" ItemName="Unused"/>
                    </MSBuild.ExtensionPack.FileSystem.Detokenise>
                    <Message Text="Unused Token - %(Unused.Identity)"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.DisplayFiles">
            <summary>
            Set to true for files being processed to be output to the console.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.TokenPattern">
            <summary>
            Specifies the regular expression format of the token to look for. The default pattern is \$\([0-9a-zA-Z-._]+\) which equates to $(token)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.TokenExtractionPattern">
            <summary>
            Specifies the regular expression to use to extract the token name from the TokenPattern provided. The default pattern is (?&lt;=\$\()[0-9a-zA-Z-._]+(?=\)), i.e it will extract token from $(token)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.ReplacementValues">
            <summary>
            Sets the replacement values.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.CommandLineValues">
            <summary>
            Sets the replacement values provided via the command line. The format is token1=value1#~#token2=value2 etc.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.Separator">
            <summary>
            Sets the separator to use to split the CommandLineValues. The default is #~#
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.ProjectFile">
            <summary>
            Sets the MSBuild file to load for token matching. Defaults to BuildEngine.ProjectFileOfTaskNode
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.ForceWrite">
            <summary>
            If this is set to true, then the file is re-written, even if no tokens are matched.
            this may be used in the case when the user wants to ensure all file are written
            with the same encoding.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.SearchAllStores">
            <summary>
            Specifies whether to search in the ReplacementValues, CommandLineValues and the ProjectFile for token values. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.IgnoreUnknownTokens">
            <summary>
            Specifies whether to ignore tokens which are not matched. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.TargetPath">
            <summary>
            Sets the TargetPath.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.TargetFiles">
            <summary>
            Sets the TargetFiles.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.TextEncoding">
            <summary>
            The file encoding to write the new file in. The task will attempt to default to the current file encoding. If TargetFiles is specified, individual encodings can be specified by providing an Encoding metadata value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.FilesProcessed">
            <summary>
            Gets the files processed count. [Output]
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.FilesDetokenised">
            <summary>
            Gets the files detokenised count. [Output]
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.TokenReport">
            <summary>
            ItemGroup containing the Tokens (Identity) and Files metadata containing all the files in which the token can be found.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.UnusedTokens">
            <summary>
            Itemgroup containing the tokens which have been provided but not found in the files scanned. ReportUnusedTokens must be set to true to use this.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Detokenise.ReportUnusedTokens">
            <summary>
            Set to true when running a Report to see which tokens are not used in any files scanned. Default is false.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.FileSystem.Detokenise.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.FileSystem.Folder">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddSecurity</i> (<b>Required: </b> Path, Users <b>Optional: </b>AccessType, Permission)</para>
            <para><i>DeleteAll</i> (<b>Required: </b> Path, Match)</para>
            <para><i>Get</i> (<b>Required: </b> Path <b>Optional:</b> Match, Recursive)</para>
            <para><i>Move</i> (<b>Required: </b> Path, TargetPath)</para>
            <para><i>RemoveContent</i> (<b>Required: </b> Path <b>Optional: </b>Force, RetryCount)</para>
            <para><i>RemoveSecurity</i> (<b>Required: </b> Path, Users <b>Optional: </b>AccessType)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <Users Include="AReadUser">
                            <Permission>ExecuteFile, Read</Permission>
                        </Users>
                        <Users Include="AChangeUser">
                            <Permission>FullControl</Permission>
                        </Users>
                        <FoldersToPermission Include="c:\az">
                            <Account>Performance Log Users</Account>
                            <Permission>Read,Write,Modify,Delete</Permission>
                            <AccessType>Allow</AccessType>
                        </FoldersToPermission>
                        <FoldersToPermission Include="c:\az">
                            <Account>AChangeUser</Account>
                            <Permission>Read,Write,Modify,Delete</Permission>
                            <AccessType>Allow</AccessType>
                        </FoldersToPermission>
                        <FoldersToRemovePermissions Include="c:\az">
                            <Account>Performance Log Users</Account>
                            <Permission>Read,Write,Modify,Delete</Permission>
                        </FoldersToRemovePermissions>
                    </ItemGroup>
                    <Microsoft.Build.Tasks.MakeDir Directories="c:\Demo2;c:\Demo1;c:\ddd"/>
                    <Microsoft.Build.Tasks.RemoveDir Directories="C:\adeeeee"/>
                    <!-- Add security for users -->
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="AddSecurity" Path="c:\Demo2" Users="@(Users)"/>
                    <!-- Remove security for users -->
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="RemoveSecurity" Path="c:\Demo2" Users="@(Users)"/>
                    <!-- Add Deny security for users -->
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="AddSecurity" AccessType="Deny" Path="c:\Demo2" Users="@(Users)"/>
                    <!-- Remove Deny security for users -->
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="RemoveSecurity" AccessType="Deny" Path="c:\Demo2" Users="@(Users)"/>
                    <!-- Delete all folders matching a given name -->
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="DeleteAll" Path="c:\Demo2" Match="_svn"/>
                    <!-- Remove all content from a folder whilst maintaining the target folder -->
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="RemoveContent" Path="c:\Demo"/>
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="AddSecurity" AccessType="%(FoldersToPermission.AccessType)" Path="%(FoldersToPermission.Identity)" Users="%(FoldersToPermission.Account)" Permission="%(FoldersToPermission.Permission)"/>
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="RemoveSecurity" AccessType="%(FoldersToRemovePermissions.AccessType)" Path="%(FoldersToRemovePermissions.Identity)" Users="%(FoldersToRemovePermissions.Account)" Permission="%(FoldersToRemovePermissions.Permission)"/>
                    <!-- Move a folder -->
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="Move" Path="c:\Demo1" TargetPath="C:\adeeeee"/>
                    <!-- Lets copy a selection of folders to multiple locations -->
                    <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="Get" Path="c:\ddd">
                        <Output TaskParameter="Folders" ItemName="FoundFolders"/>
                    </MSBuild.ExtensionPack.FileSystem.Folder>
                    <Message Text="%(FoundFolders.Identity)"/>
                    <ItemGroup>
                        <MyWebService Include="C:\a\Dist\**\*.*">
                            <ToDir>%(FoundFolders.Identity)</ToDir>
                        </MyWebService>
                    </ItemGroup>
                    <!-- Copy using the metadata -->
                    <Copy SourceFiles="@(MyWebService)" DestinationFolder="%(ToDir)\%(RecursiveDir)" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.Path">
            <summary>
            Sets the path to remove content from, or the base path for Delete
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.Match">
            <summary>
            Sets the regular expression to match in the name of a folder for Delete. Case is ignored.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.TargetPath">
            <summary>
            Sets the TargetPath for a renamed folder
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.Force">
            <summary>
            Sets a value indicating whether to delete readonly files when performing RemoveContent
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.Users">
            <summary>
            Sets the users collection. Use the Permission metadata tag to specify permissions. Separate pemissions with a comma.
            <para/> <UsersCol Include="AUser">
            <para/>     <Permission>Read,etc</Permission>
            <para/> </UsersCol>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.Permission">
            <summary>
            A comma-separated list of <a href="http://msdn.microsoft.com/en-us/library/942f991b.aspx">FileSystemRights</a>.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.AccessType">
            <summary>
            Set the AccessType. Can be Allow or Deny. Default is Allow.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.RetryCount">
            <summary>
            Sets a value indicating how many times to retry removing the content, e.g. if files are temporarily locked. Default is 5. The retry occurs every 5 seconds.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.Recursive">
            <summary>
            Set to true to perform a recursive scan. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.Folder.Folders">
            <summary>
            Gets the folder list
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.FileSystem.Folder.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
            <remarks>
            LogError should be thrown in the event of errors
            </remarks>
        </member>
        <member name="T:MSBuild.ExtensionPack.FileSystem.File">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddAttributes</i> (<b>Required: </b>Files)</para>
            <para><i>AddSecurity</i> (<b>Required: Users, AccessType, Path or Files</b> Optional: Permission</para>
            <para><i>CheckContainsContent</i> (<b>Required: </b>Files, RegexPattern <b>Optional: </b>RegexOptionList <b>Output: </b>Result)</para>
            <para><i>Concatenate</i> (<b>Required: </b>Files,  TargetPath)</para>
            <para><i>CountLines</i> (<b>Required: </b>Files <b>Optional: </b>CommentIdentifiers, MazSize, MinSize <b>Output: </b>TotalLinecount, CommentLinecount, EmptyLinecount, CodeLinecount, TotalFilecount, IncludedFilecount, IncludedFiles, ExcludedFilecount, ExcludedFiles, ElapsedTime)</para>
            <para><i>Create</i> (<b>Required: </b>Files <b>Optional: Size</b>). Creates file(s)</para>
            <para><i>GetChecksum</i> (<b>Required: </b>Path <b>Output: </b>Checksum)</para>
            <para><i>GetTempFileName</i> (<b>Output: </b>Path)</para>
            <para><i>FilterByContent</i> (<b>Required: </b>Files, RegexPattern <b>Optional: </b>RegexOptionList <b>Output: </b>IncludedFiles, IncludedFilecount, ExcludedFilecount, ExcludedFiles)</para>
            <para><i>Move</i> (<b>Required: </b>Path, TargetPath)</para>
            <para><i>RemoveAttributes</i> (<b>Required: </b>Files)</para>
            <para><i>RemoveLines</i> (<b>Required: </b>Files, Lines <b>Optional: </b>RegexOptionList, AvoidRegex, MatchWholeLine). This will remove lines from a file. Lines is a regular expression unless AvoidRegex is specified</para>
            <para><i>RemoveSecurity</i> (<b>Required: Users, AccessType, Path or Files</b> Optional: Permission</para>
            <para><i>Replace</i> (<b>Required: </b>RegexPattern <b>Optional: </b>Replacement, Path, TextEncoding, Files, RegexOptionList)</para>
            <para><i>SetAttributes</i> (<b>Required: </b>Files)</para>
            <para><i>WriteLines</i> (<b>Required: </b>Files, Lines). This will add lines to a file if the file does NOT contain them. The match is case insensitive.</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <FilesToParse Include="c:\demo\file.txt"/>
                    <FilesToCount Include="C:\Demo\**\*.cs"/>
                    <AllFilesToCount Include="C:\Demo\**\*"/>
                    <AtFiles Include="c:\demo\file1.txt">
                        <Attributes>ReadOnly;Hidden</Attributes>
                    </AtFiles>
                    <AtFiles2 Include="c:\demo\file1.txt">
                        <Attributes>Normal</Attributes>
                    </AtFiles2>
                    <MyFiles Include="C:\demo\**\*.csproj"/>
                    <FilesToSecure Include="C:\demo\file1.txt" />
                    <FilesToSecure Include="C:\demo\file2.txt" />
                    <Users Include="MyUser" />
                    <UsersWithPermissions Include="MyUser">
                        <Permission>Read,Write</Permission>
                    </UsersWithPermissions>
                    <FilesToWriteTo Include="C:\a\hosts"/>
                    <LinesToRemove Include="192\.156\.236\.25 www\.myurl\.com"/>
                    <LinesToRemove Include="192\.156\.234\.25 www\.myurl\.com"/>
                    <LinesToRemove Include="192\.156\.23sss4\.25 www\.myurl\.com"/>
                    <Lines Include="192.156.236.25 www.myurl.com"/>
                    <Lines Include="192.156.234.25 www.myurl.com"/>
                    <FilesToCreate Include="d:\a\File1-100.txt"/>
                    <FilesToCreate Include="d:\a\File2-100.txt"/>
                    <FilesToCreate Include="d:\a\File3-5000000.txt">
                        <size>5000000</size>
                    </FilesToCreate>
                    <FilesToCreate Include="d:\a\File4-100.txt"/>
                    <FilesToCheck Include="d:\a\*.*"/>
                    <FilesToConcatenate Include="c:\a\*.proj"/>
                </ItemGroup>
                <Target Name="Default">
                    <!-- Concatenate Files -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="Concatenate" Files="@(FilesToConcatenate)" TargetPath="c:\concatenatedfile.txt"/>
                    <!-- Check whether files contain matching content -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="CheckContainsContent" Files="@(FilesToCheck)" RegexPattern="Hello">
                        <Output TaskParameter="Result" PropertyName="TheResult"/>
                    </MSBuild.ExtensionPack.FileSystem.File>
                    <Message Text="$(TheResult)"/>
                    <!-- Create some files. Defaults the size to 1000 bytes, but one file overrides this using metadata -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="Create" Files="@(FilesToCreate)" Size="1000"/>
                    <!-- Write lines to a file. Lines only added if file does not contain them -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="WriteLines" Files="@(FilesToWriteTo)" Lines="@(Lines)"/>
                    <!-- Remove lines from a file based on regular expressions -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="RemoveLines" Files="@(FilesToWriteTo)" Lines="@(LinesToRemove)"/>
                    <!-- adding security -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="AddSecurity" Path="C:\demo\file3.txt" Users="@(Users)" AccessType="Allow" Permission="Read,Write" />
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="AddSecurity" Files="@(FilesToSecure)" Users="@(UsersWithPermissions)" AccessType="Deny" />
                    <!-- remove security -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="RemoveSecurity" Path="C:\demo\file4.txt" Users="@(Users)" AccessType="Allow" Permission="Read,Write" />
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="RemoveSecurity" Files="@(FilesToSecure)" Users="@(UsersWithPermissions)" AccessType="Deny" />
                    <!-- Get a temp file -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="GetTempFileName">
                        <Output TaskParameter="Path" PropertyName="TempPath"/>
                    </MSBuild.ExtensionPack.FileSystem.File>
                    <Message Text="TempPath: $(TempPath)"/>
                    <!-- Filter a collection of files based on their content -->
                    <Message Text="MyProjects %(MyFiles.Identity)"/>
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="FilterByContent" RegexPattern="Microsoft.WebApplication.targets" Files="@(MyFiles)">
                        <Output TaskParameter="IncludedFiles" ItemName="WebProjects"/>
                        <Output TaskParameter="ExcludedFiles" ItemName="NonWebProjects"/>
                        <Output TaskParameter="IncludedFileCount" PropertyName="WebProjectsCount"/>
                        <Output TaskParameter="ExcludedFileCount" PropertyName="NonWebProjectsCount"/>
                    </MSBuild.ExtensionPack.FileSystem.File>
                    <Message Text="WebProjects: %(WebProjects.Identity)"/>
                    <Message Text="NonWebProjects: %(NonWebProjects.Identity)"/>
                    <Message Text="WebProjectsCount: $(WebProjectsCount)"/>
                    <Message Text="NonWebProjectsCount: $(NonWebProjectsCount)"/>
                    <!-- Get the checksum of a file -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="GetChecksum" Path="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\AssemblyDemo.dll">
                        <Output TaskParameter="Checksum" PropertyName="chksm"/>
                    </MSBuild.ExtensionPack.FileSystem.File>
                    <Message Text="$(chksm)"/>
                    <!-- Replace file content using a regular expression -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="Replace" RegexPattern="regex" RegexOptionList="IgnoreCase|Singleline" Replacement="iiiii" Files="@(FilesToParse)"/>
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="Replace" RegexPattern="regex" Replacement="idi" Path="c:\Demo*"/>
                    <!-- Count the number of lines in a file and exclude comments -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="CountLines" Files="@(FilesToCount)" CommentIdentifiers="//">
                        <Output TaskParameter="CodeLinecount" PropertyName="csharplines"/>
                        <Output TaskParameter="IncludedFiles" ItemName="MyIncludedFiles"/>
                        <Output TaskParameter="ExcludedFiles" ItemName="MyExcludedFiles"/>
                    </MSBuild.ExtensionPack.FileSystem.File>
                    <Message Text="C# CodeLinecount: $(csharplines)"/>
                    <Message Text="MyIncludedFiles: %(MyIncludedFiles.Identity)"/>
                    <Message Text="MyExcludedFiles: %(MyExcludedFiles.Identity)"/>
                    <!-- Count all lines in a file -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="CountLines" Files="@(AllFilesToCount)">
                        <Output TaskParameter="TotalLinecount" PropertyName="AllLines"/>
                    </MSBuild.ExtensionPack.FileSystem.File>
                    <Message Text="All Files TotalLinecount: $(AllLines)"/>
                    <!-- Set some attributes -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="SetAttributes" Files="@(AtFiles)"/>
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="SetAttributes" Files="@(AtFiles2)"/>
                    <!-- Move a file -->
                    <MSBuild.ExtensionPack.FileSystem.File TaskAction="Move" Path="c:\demo\file.txt" TargetPath="c:\dddd\d\oo\d\mee.txt"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.AvoidRegex">
            <summary>
            Set to true to avoid using Regular Expressions. This may increase performance for certain operations against large files.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.MatchWholeLine">
            <summary>
            Used with AvoidRegex. Set to true to match the whole line. The default is false i.e. a line.Contains operation is used.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.AccessType">
            <summary>
            Set the AccessType. Can be Allow or Deny. Default is Allow.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Permission">
            <summary>
            A comma-separated list of <a href="http://msdn.microsoft.com/en-us/library/942f991b.aspx">FileSystemRights</a>.
            </summary>
            <remarks>If Permission is not set, the task will look for Permission meta-data on each user item.</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Users">
            <summary>
            Sets the users collection. Use the Permission metadata tag to specify permissions. Separate pemissions with a comma.
            <remarks>
            The Permission metadata is only used if the Permission property is not set.
            <code lang="xml"><![CDATA[
            <UsersCol Include="AUser">
                <Permission>Read,etc</Permission>
            </UsersCol>
            ]]></code>
            </remarks>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Lines">
            <summary>
            Sets the Lines to use. For WriteLines this is interpreted as plain text. For RemoveLines this is interpreted as a regular expression
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.RegexPattern">
            <summary>
            Sets the regex pattern.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Replacement">
            <summary>
            The replacement text to use. Default is string.Empty
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.RegexOptionList">
            <summary>
            Sets the Regular Expression options, e.g. None|IgnoreCase|Multiline|ExplicitCapture|Compiled|Singleline|IgnorePatternWhitespace|RightToLeft|RightToLeft|ECMAScript|CultureInvariant  Default is RegexOptions.Compiled
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Path">
            <summary>
            A path to process or get. Use * for recursive folder processing. For the GetChecksum TaskAction, this indicates the path to the file to create a checksum for.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.TextEncoding">
            <summary>
            The file encoding to write the new file in. The task will attempt to default to the current file encoding.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.CommentIdentifiers">
            <summary>
            Sets characters to be interpreted as comment identifiers. Semi-colon delimited. Only single line comments are currently supported.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Files">
            <summary>
            An ItemList of files to process. If calling SetAttributes, RemoveAttributes or AddAttributes, include the attributes in an Attributes metadata tag, separated by a semicolon.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.TargetPath">
            <summary>
            Sets the TargetPath for a renamed file or to save concatenated files
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.TotalLinecount">
            <summary>
            Gets the total number of lines counted
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.CommentLinecount">
            <summary>
            Gets the number of comment lines counted
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.EmptyLinecount">
            <summary>
            Gets the number of empty lines countered. Whitespace is ignored.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.TotalFilecount">
            <summary>
            Gets the number of files counted
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.CodeLinecount">
            <summary>
            Gets the number of code lines countered. This is calculated as Total - Comment - Empty
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.ExcludedFilecount">
            <summary>
            Gets the number of excluded files
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.IncludedFilecount">
            <summary>
            Gets the number of included files
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.MaxSize">
            <summary>
            Sets the maximum size of files to count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.MinSize">
            <summary>
            Sets the minimum size of files to count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Size">
            <summary>
            Sets the size of the file in bytes for TaskAction="Create". This can be overridden by using a metadata tag called size on the Files items.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.ElapsedTime">
            <summary>
            Gets the time taken to count the files. Value in seconds.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Result">
            <summary>
            Gets the result
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.Checksum">
            <summary>
            Gets the file checksum
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.ExcludedFiles">
            <summary>
            Item collection of files Excluded from the count.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.FileSystem.File.IncludedFiles">
            <summary>
            Item collection of files included after filtering operations
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.FileSystem.File.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.AsyncExec">
            <summary>
            Asynchronously runs a specified program or command with no arguments. This is similar to
            the Exec Task: http://msdn.microsoft.com/en-us/library/x8zx72cd.aspx.
            <para/>This task is useful when you need to run a fire-and-forget command-line task during the build process.
            <para/>Note that that is a fire and forget call. No errors are handled.
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <Target Name="Default">
                <MSBuild.ExtensionPack.Framework.AsyncExec Command="iisreset.exe"/>
                <MSBuild.ExtensionPack.Framework.AsyncExec Command="copy &quot;d:\a\*&quot; &quot;d:\b\&quot; /Y"/>
              </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AsyncExec.Command">
            <summary>
            Gets or sets the command(s) to run. These can be system commands,
            such as attrib, or an executable, such as program.exe, runprogram.bat, or setup.msi.
            This parameter can contain multiple lines of commands (each command on a new-line).
            Alternatively, you can place multiple commands in a batch file and run it using this parameter.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.AsyncExec.Execute">
            <summary>
            Executes the build operation.
            </summary>
            <returns>true if the operation started with no exceptions; false otherwise.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.AsyncExec.HasCommandArguments(System.String)">
            <summary>
            Gets the command arguments from the command string.
            </summary>
            <param name="command">The full command string with arguments</param>
            <returns>True if the command has arguments, false otherwise</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.AsyncExec.CreateBatchProgram(System.String)">
            <summary>
            Creates a batch program file containing the command.
            </summary>
            <param name="command">The full command string with arguments</param>
            <returns>The batch program file path</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.AsyncExec.GetCommandLine(System.String)">
            <summary>
            Gets a command process object with the command specified.
            </summary>
            <param name="command">The command to execute</param>
            <returns>Returns a command prompt start information that is ready to start</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.CommandLine">
            <summary>
            Launches command-line executables with robust warning and error message
            integration in MSBuild and Visual Studio. This is an expanded version
            of the Exec Task: http://msdn.microsoft.com/en-us/library/x8zx72cd.aspx.
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <Target Name="Default" DependsOnTargets="FxCop;JSLint"/>
              <Target Name="FxCop">
                <PropertyGroup Condition="'$(FxCopEnabled)' == 'true'">
                  <!--
                    Regex for matching FxCop errors and warnings:
                      filename(line,column) : warning|error :? CAxxxx : <error message>
                      [Location not stored in Pdb] : warning|error :? CAxxxx : <error message>
                  -->
                  <FxCopErrorRegularExpression>(?imnx-s:^((\[Location\ not\ stored\ in\ Pdb\])|(Project)|((?&lt;File&gt;[^(]+)\((?&lt;Line&gt;\d+),(?&lt;Column&gt;\d+)\)))\s*:\s*\w+\s*:?\s*(?&lt;Message&gt;(?&lt;ErrorCode&gt;CA\d+)\s*:?\s*.*)$)</FxCopErrorRegularExpression>
                  <TargetBinaryRoot Condition="'$(TargetBinaryRoot)' == ''"></TargetBinaryRoot>
                  <TargetFileName Condition="'$(TargetFileName)' == ''"></TargetFileName>
                  <PublicRoot Condition="'$(PublicRoot)' == ''"></PublicRoot>
                  <FxCopVersion Condition="'$(FxCopVersion)' == ''">1.36</FxCopVersion>
                  <!--
                    Build wide rule exclusions (format: -<Namespace>#<CheckId>, e.g., -Microsoft.Design#CA1020):
                      None
                  -->
                  <FxCopRules Condition="'$(FxCopRules)' != ''">&quot;/ruleid:$(FxCopRules)&quot;</FxCopRules>
                </PropertyGroup>
                <!-- Use FxCopCmd.exe /? for information on the command-line switches used -->
                <MSBuild.ExtensionPack.Framework.CommandLine
                  Command="&quot;$(PublicRoot)\FxCop\$(FxCopVersion)\FxCopCmd.exe&quot; /console /searchgac &quot;/file:$(TargetBinaryRoot)\$(TargetFileName)&quot; &quot;/directory:$(TargetBinaryRoot)&quot; $(FxCopRules)"
                  CustomErrorRegularExpression="$(FxCopErrorRegularExpression)"
                  ContinueOnError="true" />
              </Target>
              <ItemDefinitionGroup>
                <JavaScript />
              </ItemDefinitionGroup>
              <Target Name="JSLint">
                <PropertyGroup>
                  <!--
                  Regex for matching JSLint (http://www.jslint.com) errors and warnings:
                  -->
                  <JSLintErrorRegularExpression>(?imnx-s:^cscript\s+\"[^"]+\"\s+\&lt;\"(?&lt;File&gt;[^"]+)\".*\bLint\s+[^\d]+(?&lt;Line&gt;\d+)[^\d]+(?&lt;Column&gt;\d+)\:\s+(?&lt;Message&gt;.*\n.*)$)</JSLintErrorRegularExpression>
                  <PublicRoot Condition="'$(PublicRoot)' == ''"></PublicRoot>
                  <JSLintVersion Condition="'$(JSLintVersion)' == ''">1.0</JSLintVersion>
                </PropertyGroup>
                <ItemGroup>
                  <!--
                    Include all *.js files under the project folder and sub-folders
                    Exclude all *.js files under the project bin, obj, or objd folders and sub-folders
                    -->
                  <JavaScript Include="**\*.js" Exclude="**\bin\**\*.js;**\obj\**\*.js;**\objd\**\*.js" />
                </ItemGroup>
                <!-- Use cscript (Windows Script Host) to execute jslint.js -->
                <!-- Information on JSLint: http://www.jslint.com/lint.html -->
                <MSBuild.ExtensionPack.Framework.CommandLine
                  Command="&quot;cscript $(PublicRoot)\JSLint\$(JSLintVersion)\jslint.js&quot; &lt;&quot;%(JavaScript.FullPath)&quot;"
                  CustomErrorRegularExpression="$(JSLintErrorRegularExpression)"
                  ContinueOnError="true" />
              </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.CommandLine.StandardErrorFormat">
            <summary>
            The standard error format. Included as an error pattern, unless the
            <see cref="P:MSBuild.ExtensionPack.Framework.CommandLine.IgnoreStandardErrorWarningFormat"/> is set to true.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.CommandLine.StandardWarningFormat">
            <summary>
            The standard warning format. Included as an error pattern, unless the
            <see cref="P:MSBuild.ExtensionPack.Framework.CommandLine.IgnoreStandardErrorWarningFormat"/> is set to true.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.Command">
            <summary>
            Gets or sets the command(s) to run. These can be system commands,
            such as attrib, or an executable, such as program.exe, runprogram.bat, or setup.msi.
            This parameter can contain multiple lines of commands (each command on a new-line).
            Alternatively, you can place multiple commands in a batch file and run it using this parameter.
            </summary>
            <remarks>Exec Equivalent: Command</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.CustomErrorRegularExpression">
            <summary>
            Gets or sets the error regular expression.
            Leaving this unset will result in no output errors.
            </summary>
            <remarks>
            Exec Equivalent: CustomErrorRegularExpression
              The regular expression object has no options set: RegexOptions.None.
              This can be changed in the provided expression by using the regular
              expression options group syntax. For information on .NET Regular Expressions:
                http://msdn.microsoft.com/en-us/library/hs600312%28VS.71%29.aspx
              Capturing groups can be defined for the following values:
                * SubCategory - A description of the error type
                * ErrorCode   - The error code
                * HelpKeyword - Help keyword for the error
                * File        - Path to the file
                * Line        - The line where the error begins
                * Column      - The column where the error begins
                * EndLine     - The end line where the error ends
                * EndColumn   - The end column where the error ends
                * Message     - The error message
              These values are used to integrate in to MSBuild and the IDE.
              Examples:
                NMake errors:
                  NMAKE : Nxxxx: {error message}
                  NMAKE : fatal error Uxxxx: {error message}
                  NMAKE : FXCOPxx: {error message}
                RegEx for matching NMake errors:
                  ^NMAKE\s+:\s+(fatal\s+error\s+)?(?&lt;ErrorCode&gt;(FXCOP|U|N)\d+):\s+(?&lt;Message&gt;.*)$
                File specific NMake or CS errors:
                  filename(line) : fatal error Uxxxx: {error message}
                  filename(line) : error CSxxxx: {error message}
                  filename(line,column) : error CSxxxx: {error message}
                RegEx for matching file specific NMake or CS errors:
                  ^(?&lt;File&gt;[^(]+)\((?&lt;Line&gt;\d+)(,(?&lt;Column&gt;\d+))?\)\s*:\s+(fatal\s+)?error\s+(?&lt;ErrorCode&gt;(U|CS)\d+):\s+(?&lt;Message&gt;.*)$
                CS reference errors:
                   filename: error CSxxxx: {error message}
                RegEx for matching CS reference errors:
                   ^(?&lt;File&gt;.+?)\s*:\s+error\s+(?&lt;ErrorCode&gt;CS\d+):\s+(?&lt;Message&gt;.*)$
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.CustomWarningRegularExpression">
            <summary>
            Gets or sets the warning regular expression.
            Leaving this unset will result in no output warnings.
            </summary>
            <remarks>
            Exec Equivalent: CustomWarningRegularExpression
              See CustomErrorRegularExpression for information on regular expression
              matching groups and examples.
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.IgnoreStandardErrorWarningFormat">
            <summary>
            Gets or sets a value indicating whether the output is examined for
            standard errors and warnings. This does not override errors and
            warnings defined via <see cref="P:MSBuild.ExtensionPack.Framework.CommandLine.CustomErrorRegularExpression"/> and
            <see cref="P:MSBuild.ExtensionPack.Framework.CommandLine.CustomWarningRegularExpression"/>.
            </summary>
            <remarks>Exec Equivalent: IgnoreStandardErrorWarningFormat</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.SuccessExitCode">
            <summary>
            Gets or sets the success exit code for the command. Default is zero (0).
            </summary>
            <remarks>No Exec Equivalent</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.ExitCode">
            <summary>
            Gets the Int32 exit code provided by the executed command.
            </summary>
            <remarks>Exec Equivalent: ExitCode</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.IgnoreExitCode">
            <summary>
            Gets or sets a value indicating whether to ignore the command exit code.
            If true, the task ignores the exit code provided by the executed command.
            Otherwise, the task returns false if the executed command returns an exit code
            that does not match <see cref="P:MSBuild.ExtensionPack.Framework.CommandLine.SuccessExitCode"/>.
            </summary>
            <remarks>Exec Equivalent: IgnoreExitCode</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.Outputs">
            <summary>
            Gets or sets the output items from the task. The Execute task does not set these itself.
            Instead, you can provide them as if it did set them, so that they can be used later in the project.
            </summary>
            <remarks>Exec Equivalent: Outputs</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.StdErrEncoding">
            <summary>
            Gets or sets the StdErr stream encoding. Specifies the encoding of the captured task standard error stream.
            The default is the current console output encoding.
            </summary>
            <remarks>Exec Equivalent: StdErrEncoding</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.StdOutEncoding">
            <summary>
            Gets or sets the StdOut stream encoding. Specifies the encoding of the captured task standard output stream.
            The default is the current console output encoding.
            </summary>
            <remarks>Exec Equivalent: StdOutEncoding</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.WorkingDirectory">
            <summary>
            Gets or sets the directory in which the command will run.
            </summary>
            <remarks>Exec Equivalent: WorkingDirectory</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.WarningExpressionList">
            <summary>
            Gets or sets the warning expression list.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.ErrorExpressionList">
            <summary>
            Gets or sets the error expression list.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.CommandLine.CollectedOutput">
            <summary>
            Gets or sets the collected output from the command-line.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.CommandLine.Execute">
            <summary>
            Executes the build operation.
            </summary>
            <returns>true if the operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.CommandLine.GetCommandLine(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a command process object with the command specified.
            </summary>
            <param name="command">The command to execute</param>
            <param name="workingDirectory">The command working directory</param>
            <param name="standardErrorEncoding">The standard error stream encoding</param>
            <param name="standardOutputEncoding">The standard output stream encoding</param>
            <returns>Returns a command prompt start information that is ready to start</returns>
            <remarks>StdErr and StdOut are always redirected.</remarks>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.CommandLine.PerformMatching(System.String)">
            <summary>
            Performs matching across the entire text block.
            </summary>
            <param name="text">The block of output text</param>
            <returns>True if no error was encountered; false otherwise</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.CommandLine.PerformMatch(System.String,System.String,System.Boolean)">
            <summary>
            Performs the regular expression match; if a match is found then an
            error or warning is logged.
            </summary>
            <param name="pattern">The pattern</param>
            <param name="text">The haystack</param>
            <param name="error">True if the pattern matches a build error; false otherwise</param>
            <returns>True if no error was encountered; false otherwise</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.CommandLine.CollectOutputLine(System.String)">
            <summary>
            Collects a line of output.
            </summary>
            <param name="text">The text line</param>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DotNetConfigurationFile.MachineConfig">
            <summary>
            Update the machine.config.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DotNetConfigurationFile.WebConfig">
            <summary>
            Update the web.config in the framework config directory
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.ConfigManager">
            <summary>
            Task used to work with the .NET framework web.config and machine config files
            <b>Valid TaskActions are:</b>
            <para><i>ProtectConfigSection</i> (<b>Required: </b> Section <b>Optional: </b>Site, Path, ConfigurationFileType, ProtectionProvider, SaveMode)</para>
            <para><i>RemoveAppSetting</i> (<b>Required: </b> SettingName <b>Optional: </b>Site, Path, ConfigurationFileType, SaveMode)</para>
            <para><i>RemoveConnectionString</i> (<b>Required: </b> SettingName <b>Optional: </b>Site, Path, ConfigurationFileType, SaveMode)</para>
            <para><i>SetAppSetting</i> (<b>Required: </b> SettingName <b>Optional: </b>Site, Path, SettingValue, ConfigurationFileType, SaveMode)</para>
            <para><i>SetConnectionString</i> (<b>Required: </b> SettingName <b>Optional: </b>Site, Path, SettingValue, ConfigurationFileType, SaveMode)</para>
            <para><i>UnprotectConfigSection</i> (<b>Required: </b> Section <b>Optional: </b>Site, Path, ConfigurationFileType, SaveMode)</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <MachineConfigSettings Include="settingName" >
                            <Value>settingValue</Value>
                        </MachineConfigSettings>
                    </ItemGroup>
                    <!-- Update machine.config app settings -->
                    <MSBuild.ExtensionPack.Framework.ConfigManager TaskAction="SetAppSetting" SettingName="%(MachineConfigSettings.Identity)" SettingValue="%(Value)" SaveMode="Full"/>
                    <ItemGroup>
                        <ConnectionStrings Include="myAppDB">
                            <Value>Server=MyServer;</Value>
                        </ConnectionStrings>
                    </ItemGroup>
                    <!-- Update a website's connection strings -->
                    <MSBuild.ExtensionPack.Framework.ConfigManager TaskAction="SetConnectionString" SettingName="%(ConnectionStrings.Identity)" SettingValue="%(Value)" ConfigurationFileType="WebConfig" Site="NewSite" Path="/" />
                    <!-- Encrypt a website's connection strings -->
                    <MSBuild.ExtensionPack.Framework.ConfigManager TaskAction="ProtectConfigSection" Section="connectionStrings"  ProtectionProvider="DataProtectionConfigurationProvider" ConfigurationFileType="WebConfig" Site="NewSite" Path="/" />
                    <!-- Un-encrypt a website's connection strings -->
                    <MSBuild.ExtensionPack.Framework.ConfigManager TaskAction="UnprotectConfigSection" Section="connectionStrings" ConfigurationFileType="WebConfig" Site="NewSite" Path="/" />
                    <MSBuild.ExtensionPack.Framework.ConfigManager TaskAction="RemoveConnectionString" SettingName="%(ConnectionStrings.Identity)" ConfigurationFileType="WebConfig"  Site="NewSite" Path="/" />
                    <!--- Remove a setting from a website -->
                    <MSBuild.ExtensionPack.Framework.ConfigManager TaskAction="RemoveAppSetting" SettingName="removeMe" ConfigurationFileType="WebConfig"  Site="NewSite" Path="/" />
                    <!-- Remove connection string 'obsoleteConnection' from machine.config file -->
                    <MSBuild.ExtensionPack.Framework.ConfigManager TaskAction="RemoveConnectionString" SettingName="obsoleteConnection" />
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ConfigManager.ConfigurationFileType">
            <summary>
            Which .NET framework configuration file to update. Supports WebConfig and MachineConfig. Default is MachineConfig
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ConfigManager.Site">
            <summary>
            Sets the Site to work on. Leave blank to target the .net framework web.config
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ConfigManager.Path">
            <summary>
            Sets the Path to work on. Leave blank to target the .net framework web.config
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ConfigManager.SaveMode">
            <summary>
            How should changes to the config file be saved? See 
            http://msdn.microsoft.com/en-us/library/system.configuration.configurationsavemode.aspx for the list of values. Default is Minimal
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ConfigManager.SettingName">
            <summary>
            The setting name to update.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ConfigManager.Section">
            <summary>
            The config section to protect or unprotect
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ConfigManager.ProtectionProvider">
            <summary>
            The encryption provider. Supports RSAProtectedConfigurationProvider and DataProtectionConfigurationProvider. Default is RSAProtectedConfigurationProvider
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ConfigManager.SettingValue">
            <summary>
            The setting's value.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.Parallel">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>BuildTargetsInParallel</i> (<b>Required: </b> Targets <b>Optional:</b> AdditionalProperties, ProjectFile, WaitAll, WorkingDirectory, MultiLog, MultiLogOpenOnFailure, MultiLogVerbosity, MultiLogResponseVerbosity, MultiProc, MaxCpuCount, NodeReuse)</para>
            <para><i>BuildTargetSetsInParallel</i> (<b>Required: </b> Targets <b>Optional:</b> AdditionalProperties, ProjectFile, WaitAll, WorkingDirectory, MultiLog, MultiLogOpenOnFailure, MultiLogVerbosity, MultiLogResponseVerbosity, MultiProc, MaxCpuCount, NodeReuse)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" InitialTargets="Throttle" DefaultTargets="Normal;BuildTargetSetsInParallel;BuildTargetsInParallel" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <MyTargetSets Include="1">
                        <LogFilePath>C:\b</LogFilePath>
                        <LogFileName>Target1yahoo.txt</LogFileName>
                        <Targets>Target1;Target2</Targets>
                        <Properties>MyPropValue=MyPropValue1</Properties>
                    </MyTargetSets>
                    <MyTargetSets Include="2">
                        <Targets>Target3</Targets>
                    </MyTargetSets>
                    <MyTargets Include="Target1">
                        <Properties>MyPropValue=MyPropValue1</Properties>
                    </MyTargets>
                    <MyTargets Include="Target2;Target3">
                        <LogFilePath>C:\b</LogFilePath>
                    </MyTargets>
                </ItemGroup>
                <Target Name="Normal" DependsOnTargets="Target1;Target2;Target3"/>
                <Target Name="BuildTargetSetsInParallel">
                    <MSBuild.ExtensionPack.Framework.Parallel MultiLog="$(MultiLog)" MultiLogAppend="$(MultiLogAppend)" MultiLogOpenOnFailure="$(MultiLogOpenOnFailure)" TaskAction="BuildTargetSetsInParallel" Targets="@(MyTargetSets)"  AdditionalProperties="SkipInitial=true"/>
                </Target>
                <Target Name="BuildTargetsInParallel">
                    <MSBuild.ExtensionPack.Framework.Parallel MultiLog="$(MultiLog)" MultiLogAppend="$(MultiLogAppend)" MultiLogOpenOnFailure="$(MultiLogOpenOnFailure)" TaskAction="BuildTargetsInParallel" Targets="@(MyTargets)" AdditionalProperties="SkipInitial=true"/>
                </Target>
                <Target Name="Target1">
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="1000"/>
                    <Message Text="MyPropValue = $(MyPropValue)" Importance="High"/>
                </Target>
                <Target Name="Target2">
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="4000"/>
                </Target>
                <Target Name="Target3">
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="2000"/>
                </Target>
                <Target Name="Throttle" Condition="$(SkipInitial) != 'true'">
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="1000"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.MultiProc">
            <summary>
            Specifies whether or not to use the /m multiproc parameter. If you include this switch without specifying a value for MaxCpuCount, MSBuild will use up to the number of processors in the computer. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.MaxCpuCount">
            <summary>
            Specifies the maximum number of concurrent processes to use when building. Use this with MultiProc parameter. Default is 0.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.NodeReuse">
            <summary>
            Enable or disable the re-use of MSBuild nodes when using MultiProc. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.WaitAll">
            <summary>
            Specifies whether to wait for all Targets to complete execution before returning to MSBuild or whether to wait for all to complete. Default is true.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.WorkingDirectory">
            <summary>
            Specifies the working directory. Default is null and MSBuild is resolved to the Path environment variable.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.MultiLog">
            <summary>
            Specifies whether each parallel execution should log to it's own log file rather than the parent. Default is false.
            For BuildTargetsInParallel you can specify a LogFilePath metadata value to define the root path to log to, 
            otherwise they are written to the directory of the calling project. The name of the target is used as the file name.
            For BuildTargetSetsInParallel you can specify a LogFilePath and a LogFileName metatdatavalue. If LogFileName is not passed, the target name is used.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.MultiLogOpenOnFailure">
            <summary>
            Specifies whether to open the log file containing the error info on failure. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.MultiLogAppend">
            <summary>
            Specifies whether to append to existing log files. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.MultiLogVerbosity">
            <summary>
            Specifies the verbosity to log to the individual files with. Default is Diagnostic. Note this is case sensitive.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.MultiLogResponseVerbosity">
            <summary>
            Specifies the verbosity of logging fed back to the calling task. Default is Minimal
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.ProjectFile">
            <summary>
            Speficies the MSBuild project to use. Defaults to the calling MSBuild file.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.Targets">
            <summary>
            Specifies the Targets to execute. Properties and Targets metadata can be set depending on the TaskAction. See the samples.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Parallel.AdditionalProperties">
            <summary>
            Specifies additional properties to pass through to the new parallel instances of MSBuild.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.DynamicExecute">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Define</i> (<b>Required: </b> Code <b>Optional: </b> Inputs, Outputs, References, UsingNamespaces, NoDefaultParameters, NoDefaultReferences, NoDefaultUsingNamespaces <b>Output: </b> OutputMethodId). Defines and compiles a new method, which can then be used to create a closure.</para>
            <para><i>Create</i> (<b>Required: </b> MethodId <b>Output: </b> OutputClosureId). Creates a new closure. All input and output arguments for this closure are set to their default values.</para>
            <para><i>SetInput</i> (<b>Required: </b> ClosureId, Name, InputValue). Sets an argument value for a closure.</para>
            <para><i>Invoke</i> (<b>Required: </b> ClosureId). Invokes a closure.</para>
            <para><i>GetOutput</i> (<b>Required: </b> ClosureId, Name <b>Output: </b> OutputValue). Retrieves a result value (output parameter value) from a closure.</para>
            <para><i>Destroy</i> (<b>Required: </b> ClosureId). Disposes of a closure. The closure ID is no longer valid after this task action.</para>
            <para><i>Call</i> (<b>Required: </b> MethodId <b>Optional: </b> Input1, Input2, Input3 <b>Output: </b> Output1, Output2, Output3). Calls a method with up to three inputs, returning up to three outputs. Internally, creates a closure, sets the input parameters, invokes it, retrieves the output parameters, and destroys it.</para>
            <para><i>Run</i> (<b>Required: </b> Code <b>Optional: </b> Inputs, Outputs, References, UsingNamespaces, NoDefaultParameters, NoDefaultReferences, NoDefaultUsingNamespaces, Input1, Input2, Input3 <b>Output: </b> Output1, Output2, Output3, OutputMethodId). Defines a method and runs it. The task outputs include the outputs from the method as well as the method identifier.</para>
            <para><b>Remote Execution Support: </b> None.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:MSBuild.ExtensionPack.Framework.DynamicExecute"/> task allows defining and executing code at build time. The code is not interpreted; rather, it is compiled and then loaded into the MSBuild process.</para>
            <para>Currently, the only supported language is C#.</para>
            <para><b>Code, Methods, and Closures</b></para>
            <para>"Code" is the actual source code to be executed. Code may be executed directly by the <b>Run</b> task action, or code may be used to define a method by the <b>Define</b> task action.</para>
            <para>A "method" is a piece of defined code. Methods are compiled and loaded into the MSBuild process dynamically. A method may be executed by the <b>Call</b> task action, or used to create a closure by the <b>Create</b> task action.</para>
            <para>A "closure" is a reference to a method along with values for all the method's input and output parameters.</para>
            <para><b>Using Closures</b></para>
            <para>A closure contains values for all inputs and outputs of a particular method. Generally, a closure is created, its input values are set, it is invoked, its output values are retrieved, and finally the closure is destroyed.</para>
            <para>When a closure is created, all input and output values are set to their default values. It is possible to call a method without specifying input values; in this case, the default values are used. It is also possible to re-use a closure instead of destroying it; however, this may cause confusion since the output values are not reset before invoking the method again.</para>
            <para>Most of the time, the <b>Call</b> or <b>Run</b> task actions are used. These create a closure to do their work, destroying it when they are done. These task actions are much more compact than using the closure-based task actions such as <b>SetInput</b> and <b>GetOutput</b>.</para>
            <para>However, <b>Call</b> and <b>Run</b> do have limitations. Closures allow any number of input and output values, instead of just three. Also, input and output values are set and retrieved by name when using closures directly; <b>Run</b> and <b>Call</b> can only set and retrieve by position.</para>
            <para><b>Code Context</b></para>
            <para>The actual code is compiled into a static method of a class. Enclosing <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code"/> in curly braces is not necessary.</para>
            <para>There are three types of parameters passed to the method: default parameters, input parameters, and output parameters.</para>
            <para>Currently, there is only one default parameter, named "@this". Its type is <b>Microsoft.Build.Utilities.Task</b>, and it may be used to access task-level properties such as <b>Log</b> and <b>BuildEngine2</b>. Default parameters may be disabled by specifying <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultParameters"/>.</para>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- A very simple example, showing the default parameter (currently, there is only one) -->
                    <!-- Output: Hi! -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Code="@this.Log.LogMessage(%22Hi!%22);"
                                                                    />
                </Target>
            </Project>
            ]]></code>
            <para>Input parameters are strongly-typed, as defined by <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Inputs"/>.</para>
            <para>Output parameters are likewise strongly-typed, as defined by <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Outputs"/>. They are compiled as <b>ref</b> parameters, so all method outputs are optional by definition.</para>
            <para>The compiled method returns void, so code containing a simple <b>return</b> will compile, but any code attempting to return a value will not. All method outputs must be assigned to an output parameter before returning.</para>
            <para>Assembly references and using namespaces may be augmented or replaced; see <b>Advanced Code Options</b> below for more details.</para>
            <para><b>Specifying Inputs and Outputs</b></para>
            <para>Each input or output has a type and a name. The name must be a legal C# parameter name, and cannot start with "_" or be equal to "@this". Input and output names must be unique; an input cannot have the same name as an output.</para>
            <para>If <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultParameters"/> is specified, then input and output names may start with "_" or be equal to "@this".</para>
            <para>Type and name pairs may be specified one of three ways. The first (and most compact) way is to pass a comma-delimited string of type and name pairs. This is the most familiar syntax to C#.</para>
            <para>The second way is to pass an array of task items, with the identity of each item set to its type and name separated by at least one space.</para>
            <para>The third way is to pass an array of task items, with the type looked up from the item's "Type" metadata. The name may be specified by the item's "Name" metadata or its identity.</para>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- These are equivalent -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="string format"
                                                                    Outputs="string result"
                                                                    Input1="yyyy-MM-dd"
                                                                    Code="result = DateTime.Now.ToString(format);"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="FormattedDate"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <Message Text="Formatted date: $(FormattedDate)"/>
                    <ItemGroup>
                        <FormatInputs Include="string format"/>
                        <FormatOutputs Include="result">
                            <Type>string</Type>
                        </FormatOutputs>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="@(FormatInputs)"
                                                                    Outputs="@(FormatOutputs)"
                                                                    Input1="yyyy-MM-dd"
                                                                    Code="result = DateTime.Now.ToString(format);"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="FormattedDate"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <Message Text="Formatted date: $(FormattedDate)"/>
                </Target>
            </Project>
            ]]></code>
            <para><b>Supported Input and Output Types</b></para>
            <para>Input and output types must be one of the following:</para>
            <para><b>Group A</b> - <b>ITaskItem[]</b> or <b>ITaskItem</b>. This is the MSBuild task item group / task item, which may be used to access metadata.</para>
            <para><b>Group B</b> - The CLR types convertible to and from <b>string</b>. This includes the types <b>string</b>, <b>char</b>, <b>bool</b>, <b>byte</b>, <b>sbyte</b>, <b>short</b>, <b>ushort</b>, <b>int</b>, <b>uint</b>, <b>long</b>, <b>ulong</b>, <b>float</b>, <b>double</b>, <b>Decimal</b>, and <b>DateTime</b>.</para>
            <para><b>Group C</b> - Any nullable type whose underlying type is in Group B. This includes the types <b>char?</b>, <b>bool?</b>, <b>byte?</b>, <b>sbyte?</b>, <b>short?</b>, <b>ushort?</b>, <b>int?</b>, <b>uint?</b>, <b>long?</b>, <b>ulong?</b>, <b>float?</b>, <b>double?</b>, <b>Decimal?</b>, and <b>DateTime?</b>.</para>
            <para><b>Group D</b> - An array of any type from Group B. Each element of the array must contain a value; it is not valid to pass or return arrays if one of the elements in the array is null.</para>
            <para>Invalid input and output types are not detected at compile time. They are only detected if a value fails to convert to or from the specified type.</para>
            <para><b>Conversion of Input Parameters</b></para>
            <para>An input argument value passes through two conversions. The first is the default MSBuild conversion, and the second is performed by the <b>SetInput</b>, <b>Call</b>, or <b>Run</b> task action.</para>
            <para>The MSBuild conversion always converts to <b>ITaskItem[]</b>, because this is the type of the <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.InputValue"/>, <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Input1"/>, <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Input2"/>, and <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Input3"/> properties.</para>
            <para>Once the input value has been converted to an array of task items, the <b>DynamicExecute</b> task action performs a second conversion. This is designed to work similarly to the MSBuild conversions and default C# conversions to prevent unexpected behavior. The exact steps taken are dependent on the group the input type belongs to; see <i>Supported Types</i> above for more information about the type grouping.</para>
            <para><b>Group A</b> - No actual conversion is performed. If the method expects a single <b>ITaskItem</b>, then the task action ensures that the input value contains only a single task item.</para>
            <para><b>Groups B and C</b> - The task ensures that the input value contains only a single task item. Then, the task item's <b>ItemSpec</b> is used as a string value, and this string is converted to the expected type.</para>
            <para><b>Group D</b> - Each task item's <b>ItemSpec</b> is used as a string value, and this string is converted to the expected type. The result is an array with the same number of elements as the array of task items.</para>
            <para>If an input argument value is null, then no conversions are performed; the method is passed a null value.</para>
            <para>Special conversions exist if the input parameter is of <b>bool</b> type. Valid values include "true", "false", "yes", "no", "on", and "off", all case-insensitive. In addition, these values may be prefixed with the logical "not" operator ("!"). These conversions are supported because they are MSBuild conventions.</para>
            <para><b>Conversion of Strings</b></para>
            <para>String input parameters may cause problems if the argument value contains semicolons. In this case, the default MSBuild conversion will split the string into an array of <b>ITaskItem</b>, using the semicolons as separators.</para>
            <para>To prevent this behavior, one may first escape the string by using the <see cref="T:MSBuild.ExtensionPack.Framework.TextString"/> <i>Replace</i> task action, as this example illustrates:</para>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <PropertyGroup>
                        <String>This semicolon does not separate items; it is used in a grammatical sense.</String>
                    </PropertyGroup>
                    <!-- Semicolons normally act as item separators; to prevent this treatment, escape them first -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Replace"
                                                                OldString="$(String)"
                                                                OldValue=";"
                                                                NewValue="%3B"
                                                                >
                        <Output TaskParameter="NewString" PropertyName="EscapedString"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <!-- $(String) would be treated as a vector argument (2 elements), but $(EscapedString) is a scalar argument -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="string test"
                                                                    Outputs="string result"
                                                                    Code="result = test;"
                                                                    Input1="$(EscapedString)"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="Result"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Converting the result to an item group shows that the semicolon is still not used as a separator -->
                    <ItemGroup>
                        <!-- Only one item will exist in this item group -->
                        <ResultItemGroup Include="$(Result)"/>
                    </ItemGroup>
                    <!-- Result:  This semicolon does not separate items; it is used in a grammatical sense.  -->
                    <Message Text="Result: @(ResultItemGroup->' %(Identity) ')"/>
                </Target>
            </Project>
            ]]></code>
            <para><b>Conversion of Output Parameters</b></para>
            <para>An output argument value passes through two conversions. The first is performed by the <b>GetOutput</b>, <b>Call</b>, or <b>Run</b> task action. The second is the default MSBuild conversion.</para>
            <para>The <b>DynamicExecute</b> task action performs the first conversion. This is always a conversion to <b>ITaskItem[]</b>, because that is the type of the <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.OutputValue"/>, <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Output1"/>, <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Output2"/>, and <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Output3"/> properties.</para>
            <para>This conversion is designed to work similarly to the MSBuild conversions and default C# conversions to prevent unexpected behavior. The exact steps taken are dependent on the group the output type belongs to; see <i>Supported Types</i> above for more information about the type grouping.</para>
            <para><b>Group A</b> - The actual objects returned must be of type <b>TaskItem</b> or <b>TaskItem[]</b> (returning an instance of another type implementing <b>ITaskItem</b> is not supported). No actual conversion is performed. If the method produces a single <b>TaskItem</b>, then the task action creates an array of task items containing only the single element.</para>
            <para><b>Groups B and C</b> - An array of task items is returned containing a single element. The <b>ItemSpec</b> of that single element is the output value converted to a string. Note that null values are treated specially (see below).</para>
            <para><b>Group D</b> - An array of task items is returned, with the same number of items as the output array. For each corresponding array item, the <b>ItemSpec</b> of the task item array element is set to the string representation of the output array element.</para>
            <para>If an output argument value is null, then no conversions are performed by the task action. MSBuild will convert a null value to an empty string or empty item group if necessary.</para>
            <para>The default MSBuild conversion will convert from <b>ITaskItem[]</b> to an item group or string as necessary.</para>
            <para><b>Advanced Code Options</b></para>
            <para>When a method is compiled, it is given some assembly references by default. See <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.References"/> for a list of the default references. Specify <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultReferences"/> to prevent default references from being used.</para>
            <para>The method is also given some <b>using namespace</b> declarations by default. See <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.UsingNamespaces"/> for a list of the default "using namespaces". Specify <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultUsingNamespaces"/> to prevent default "using namespaces" from being used.</para>
            <para>Finally, the method is given some default parameters. Currently, the only default parameter is "@this", but all parameter names beginning with an underscore ("_") are reserved for future default parameters. Specify <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultParameters"/> to prevent default parameters from being used.</para>
            <para><b>Limitations</b></para>
            <para>One defined method may not call another defined method.</para>
            <para>There is no facility for a method storing data in a way that it could be retrieved by a future call of the method (or another method). A workaround is to convert any such data to a string representation and pass that as an input and / or output parameter.</para>
            </remarks>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- A very simple example, using a default parameter -->
                    <!-- Output: Hi! -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Code="@this.Log.LogMessage(%22Hi!%22);"
                                                                    />
                    <!-- An example that takes a string argument and returns a string result -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="string format"
                                                                    Outputs="string result"
                                                                    Input1="yyyy-MM-dd"
                                                                    Code="result = DateTime.Now.ToString(format);"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="FormattedDate"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output (varies by time): 2009-06-10 -->
                    <Message Text="Formatted date: $(FormattedDate)"/>
                    <!-- An example that shows the more advanced conversions available for boolean arguments -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="bool test"
                                                                    Outputs="bool result"
                                                                    Input1="!no"
                                                                    Code="result = test;"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="ConversionTestResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: Converts '!no' to: True -->
                    <Message Text="Converts '!no' to: $(ConversionTestResult)"/>
                    <!-- Take two array arguments and return an array -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="string[] first, string[] second"
                                                                    Outputs="string[] result"
                                                                    Input1="1;2;3"
                                                                    Input2="10;10;10"
                                                                    Code="result = new string[first.Length];   for (int i = 0; i != first.Length; ++i)   result[i] = first[i] + second[i];"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="ArrayTestResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: Array test result: 110;210;310 -->
                    <Message Text="Array test result: $(ArrayTestResult)"/>
                    <!-- Take two array arguments of non-string type and return an array -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="int[] first, int[] second"
                                                                    Outputs="int[] result"
                                                                    Input1="1;2;3"
                                                                    Input2="10;10;10"
                                                                    Code="result = new int[first.Length];   for (int i = 0; i != first.Length; ++i)   result[i] = first[i] + second[i];"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="ArrayTestResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: Array test result: 11;12;13 -->
                    <Message Text="Array test result: $(ArrayTestResult)"/>
                    <!-- A much more complex example: defining a more reusable DynamicTask, that performs a cross product on item groups -->
                    <PropertyGroup>
                        <CrossProductCode>
                            &lt;![CDATA[
                                if (string.IsNullOrEmpty(separator))
                                    separator = ";";
                                result = new TaskItem[itemGroup1.Length * itemGroup2.Length];
                                int i = 0;
                                foreach (ITaskItem item1 in itemGroup1)
                                {
                                    foreach (ITaskItem item2 in itemGroup2)
                                    {
                                        // Determine metadata
                                        Dictionary<string, string> metadata = new Dictionary<string, string>();
                                        // Copy all metadata from the first item
                                        if (string.IsNullOrEmpty(prefix1))
                                        {
                                            foreach (string name in item1.MetadataNames)
                                                metadata.Add(name, item1.GetMetadata(name));
                                        }
                                        else
                                        {
                                            foreach (string name in item1.MetadataNames)
                                                metadata.Add(prefix1 + name, item1.GetMetadata(name));
                                        }
                                        // Copy all metadata from the second item
                                        if (string.IsNullOrEmpty(prefix2))
                                        {
                                            foreach (string name in item2.MetadataNames)
                                                if (!metadata.ContainsKey(name))
                                                    metadata.Add(name, item2.GetMetadata(name));
                                        }
                                        else
                                        {
                                            foreach (string name in item2.MetadataNames)
                                                if (!metadata.ContainsKey(prefix2 + name))
                                                    metadata.Add(prefix2 + name, item2.GetMetadata(name));
                                        }
                                        // Create an output item with a (hopefully unique) itemspec.
                                        result[i++] = new TaskItem(item1.ItemSpec + separator + item2.ItemSpec, metadata);
                                    }
                                }
                            ]]&gt;
                        </CrossProductCode>
                    </PropertyGroup>
                    <ItemGroup>
                        <!-- Parameters and results: these are used in the method definition -->
                        <CrossProductParameters Include="itemGroup1;itemGroup2">
                            <Type>ITaskItem[]</Type>
                        </CrossProductParameters>
                        <CrossProductParameters Include="separator;prefix1;prefix2">
                            <Type>string</Type>
                        </CrossProductParameters>
                        <CrossProductResults Include="result">
                            <Type>ITaskItem[]</Type>
                        </CrossProductResults>
                        <!-- Arguments: these are used by the closure -->
                        <CrossProductArguments1 Include="x;y;z">
                            <M1>Meta1</M1>
                        </CrossProductArguments1>
                        <CrossProductArguments2 Include="1;2">
                            <M2>Meta2</M2>
                        </CrossProductArguments2>
                        <CrossProductArguments2 Include="3">
                            <M1>Meta1 that is overwritten</M1>
                            <M2>A different Meta2</M2>
                        </CrossProductArguments2>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="@(CrossProductParameters)"
                                                                    Outputs="@(CrossProductResults)"
                                                                    Input1="@(CrossProductArguments1)"
                                                                    Input2="@(CrossProductArguments2)"
                                                                    Code="$(CrossProductCode)"
                                                                    >
                        <Output TaskParameter="Output1" ItemName="CrossProductResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: Cross product:  x;1 { M1=Meta1, M2=Meta2 } ; x;2 { M1=Meta1, M2=Meta2 } ; x;3 { M1=Meta1, M2=A different Meta2 } ; y;1 { M1=Meta1, M2=Meta2 } ; y;2 { M1=Meta1, M2=Meta2 } ; y;3 { M1=Meta1, M2=A different Meta2 } ; z;1 { M1=Meta1, M2=Meta2 } ; z;2 { M1=Meta1, M2=Meta2 } ; z;3 { M1=Meta1, M2=A different Meta2 } -->
                    <Message Text="Cross product: @(CrossProductResult->' %(Identity) { M1=%(M1), M2=%(M2) } ')"/>
                    <!-- The "Run" and "Call" TaskActions are limited to 3 inputs and 3 outputs (currently), but by separating out each step,
                            any number of inputs and outputs may be specified, and they may be specified by name -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Define"
                                                                    Inputs="@(CrossProductParameters)"
                                                                    Outputs="@(CrossProductResults)"
                                                                    Code="$(CrossProductCode)"
                                                                    >
                        <Output TaskParameter="OutputMethodId" PropertyName="CrossProductMethodId"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Create"
                                                                    MethodId="$(CrossProductMethodId)"
                                                                    >
                        <Output TaskParameter="OutputClosureId" PropertyName="CrossProductClosureId"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="SetInput"
                                                                    ClosureId="$(CrossProductClosureId)"
                                                                    Name="itemGroup1"
                                                                    InputValue="@(CrossProductArguments1)"
                                                                    />
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="SetInput"
                                                                    ClosureId="$(CrossProductClosureId)"
                                                                    Name="itemGroup2"
                                                                    InputValue="@(CrossProductArguments2)"
                                                                    />
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="SetInput"
                                                                    ClosureId="$(CrossProductClosureId)"
                                                                    Name="prefix1"
                                                                    InputValue="P1_"
                                                                    />
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="SetInput"
                                                                    ClosureId="$(CrossProductClosureId)"
                                                                    Name="prefix2"
                                                                    InputValue="P2_"
                                                                    />
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="SetInput"
                                                                    ClosureId="$(CrossProductClosureId)"
                                                                    Name="separator"
                                                                    InputValue="."
                                                                    />
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Invoke"
                                                                    ClosureId="$(CrossProductClosureId)"
                                                                    />
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="GetOutput"
                                                                    ClosureId="$(CrossProductClosureId)"
                                                                    Name="result"
                                                                    >
                        <Output TaskParameter="OutputValue" ItemName="ComplexCrossProductResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: Cross product with more parameters:  x.1 { P1_M1=Meta1, P2_M1=, P2_M2=Meta2 } ; x.2 { P1_M1=Meta1, P2_M1=, P2_M2=Meta2 } ; x.3 { P1_M1=Meta1, P2_M1=Meta1 that is overwritten, P2_M2=A different Meta2 } ; y.1 { P1_M1=Meta1, P2_M1=, P2_M2=Meta2 } ; y.2 { P1_M1=Meta1, P2_M1=, P2_M2=Meta2 } ; y.3 { P1_M1=Meta1, P2_M1=Meta1 that is overwritten, P2_M2=A different Meta2 } ; z.1 { P1_M1=Meta1, P2_M1=, P2_M2=Meta2 } ; z.2 { P1_M1=Meta1, P2_M1=, P2_M2=Meta2 } ; z.3 { P1_M1=Meta1, P2_M1=Meta1 that is overwritten, P2_M2=A different Meta2 } -->
                    <Message Text="Cross product with more parameters: @(ComplexCrossProductResult->' %(Identity) { P1_M1=%(P1_M1), P2_M1=%(P2_M1), P2_M2=%(P2_M2) } ')"/>
                    <!-- Testing nullable parameter values -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="int? arg"
                                                                    Outputs="int? result"
                                                                    Input1="33"
                                                                    Code="result = arg + 3;"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="DefaultResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: 33 + 3: 36 -->
                    <Message Text="33 + 3: $(DefaultResult)"/>
                    <!-- Testing nullable parameter values with null argument (the output value is actually null in this case, which MSBuild converts to an empty string) -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="int? arg"
                                                                    Outputs="int? result"
                                                                    Code="result = arg + 3;"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="DefaultResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: default(int?) + 3: -->
                    <Message Text="default(int?) + 3: $(DefaultResult)"/>
                    <!-- Testing parameter values with default argument -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Inputs="int arg"
                                                                    Outputs="int? result"
                                                                    Code="result = arg + 3;"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="DefaultResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: default(int) + 3: 3 -->
                    <Message Text="default(int) + 3: $(DefaultResult)"/>
                    <!-- Defining a method once and calling it multiple times (this is more resource-efficient than always using Run) -->
                    <!--   (the GUID-testing regex was taken from the Regular Expression Library, http://regexlib.com/ ) -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Define"
                                                                    Inputs="string arg"
                                                                    Outputs="bool result"
                                                                    UsingNamespaces="System.Text.RegularExpressions"
                                                                    Code="result = Regex.IsMatch(arg, @%22[{|\(]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[\)|}]?%22);"
                                                                    >
                        <Output TaskParameter="OutputMethodId" PropertyName="IsGuidMethod"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- The first call -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Call"
                                                                    MethodId="$(IsGuidMethod)"
                                                                    Input1="{914D226A-2F5B-4944-934D-96BBE6571977}"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="IsGuidResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: IsGuid({914D226A-2F5B-4944-934D-96BBE6571977}): True -->
                    <Message Text="IsGuid({914D226A-2F5B-4944-934D-96BBE6571977}): $(IsGuidResult)"/>
                    <!-- The second call; recompiling the method is unnecessary for this call -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Call"
                                                                    MethodId="$(IsGuidMethod)"
                                                                    Input1="{X14D226A-2F5B-4944-934D-96BBE6571977}"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="IsGuidResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: IsGuid({X14D226A-2F5B-4944-934D-96BBE6571977}): False -->
                    <Message Text="IsGuid({X14D226A-2F5B-4944-934D-96BBE6571977}): $(IsGuidResult)"/>
                    <!-- Using a parameter to define part of the code for a Run task action. -->
                    <PropertyGroup>
                        <MathArgument>42 - 37</MathArgument>
                    </PropertyGroup>
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    Outputs="int result"
                                                                    Code="result = 2 * ($(MathArgument));"
                                                                    >
                        <Output TaskParameter="Output1" PropertyName="MathResult"/>
                    </MSBuild.ExtensionPack.Framework.DynamicExecute>
                    <!-- Output: 2 * (42 - 37) = 10 -->
                    <Message Text="2 * (42 - 37) = $(MathResult)"/>
                    <!-- Other assemblies may also be referenced, along with optional "using namespace" declarations -->
                    <!-- Output: {"Hi from Windows Forms!" in a MessageBox} -->
                    <MSBuild.ExtensionPack.Framework.DynamicExecute TaskAction="Run"
                                                                    References="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                                                                    UsingNamespaces="System.Windows;System.Windows.Forms"
                                                                    Code="MessageBox.Show(%22Hi from Windows Forms!%22);"
                                                                    />
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DynamicExecute.Methods">
            <summary>
            The shared collection of method definitions. Once defined, a method is never undefined.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DynamicExecute.Closures">
            <summary>
            The shared collection of closure instances. Created closures may be destroyed at a later time.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Inputs">
            <summary>
            Specifies the inputs for <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code"/>. Each input has a type and a name.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Define</b> and <b>Run</b> task actions.</para>
            <para>This may be set to a string containing a comma-delimited or semicolon-delimited sequence of (type, name) pairs.</para>
            <para>Otherwise, each input is represented by a task item. The name of an input is taken from the metadata "Name", if it exists; otherwise, it is taken from the item's identity. The type of an input is taken from the metadata "Type".</para>
            </remarks>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultParameters"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Outputs">
            <summary>
            Specifies the outputs for <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code"/>. Each output has a type and a name.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Define</b> and <b>Run</b> task actions.</para>
            <para>This may be set to a string containing a comma-delimited or semicolon-delimited sequence of (type, name) pairs.</para>
            <para>Otherwise, each output is represented by a task item. The name of an output is taken from the metadata "Name", if it exists; otherwise, it is the item's identity. The type of an output is taken from the metadata "Type".</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.References">
            <summary>
            Specifies additional references for <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code"/>.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Define</b> and <b>Run</b> task actions.</para>
            <para>The name of a reference is taken from the metadata "Name", if it exists; otherwise, it is the item's identity.</para>
            <para>To reference assemblies in the GAC, a strong name must be used, e.g., "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089".</para>
            <para>The default references are System (System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089), System.Core (System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089), Microsoft.Build.Framework (Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a), and Microsoft.Build.Utilities.v4.0 (Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a).</para>
            </remarks>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultReferences"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.UsingNamespaces">
            <summary>
            Specifies additional "using namespaces" for <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code"/>. These are namespaces that are brought into the code's scope.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Define</b> and <b>Run</b> task actions.</para>
            <para>The name of a namespace is taken from the metadata "Name", if it exists; otherwise, it is the item's identity.</para>
            <para>The default namespaces are System, System.Collections.Generic, System.Linq, System.Text, Microsoft.Build.Framework, and Microsoft.Build.Utilities.</para>
            </remarks>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultUsingNamespaces"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code">
            <summary>
            The actual method code for dynamic execution.
            </summary>
            <remarks>
            <para>This is a required parameter for the <b>Define</b> and <b>Run</b> task actions.</para>
            <para>This code is treated as a method body when compiled. The method does not return a value; rather, outputs are passed as reference parameters to the method.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultUsingNamespaces">
            <summary>
            Specifies to not include the default "using namespaces" for <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code"/>.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Define</b> and <b>Run</b> task actions.</para>
            </remarks>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.UsingNamespaces"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultReferences">
            <summary>
            Specifies to not include the default references for <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code"/>.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Define</b> and <b>Run</b> task actions.</para>
            </remarks>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.References"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.NoDefaultParameters">
            <summary>
            Specifies to not define the default parameters for <see cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Code"/>.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Define</b> and <b>Run</b> task actions.</para>
            </remarks>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Inputs"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodId">
            <summary>
            The identifier of the method definition.
            </summary>
            <remarks>
            <para>This is a required parameter for the <b>Create</b> and <b>Call</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.ClosureId">
            <summary>
            The identifier of the closure instance.
            </summary>
            <remarks>
            <para>This is a required parameter for the <b>SetInput</b>, <b>Invoke</b>, <b>GetOutput</b>, and <b>Destroy</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Name">
            <summary>
            The name of the input argument to set, or the output argument to retrieve.
            </summary>
            <remarks>
            <para>This is a required parameter for the <b>SetInput</b> and <b>GetOutput</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.InputValue">
            <summary>
            The value to set.
            </summary>
            <remarks>
            <para>This is a required parameter for the <b>SetInput</b> task action.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Input1">
            <summary>
            The value for the first input parameter.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Run</b> and <b>Call</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Input2">
            <summary>
            The value for the second input parameter.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Run</b> and <b>Call</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Input3">
            <summary>
            The value for the third input parameter.
            </summary>
            <remarks>
            <para>This is an optional parameter for the <b>Run</b> and <b>Call</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.OutputMethodId">
            <summary>
            The ID of a defined method.
            </summary>
            <remarks>
            <para>This is an output for the <b>Define</b> and <b>Run</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.OutputClosureId">
            <summary>
            The ID of a closure instance.
            </summary>
            <remarks>
            <para>This is an output for the <b>Create</b> task action.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.OutputValue">
            <summary>
            The value of a closure output.
            </summary>
            <remarks>
            <para>This is an output for the <b>GetOutput</b> task action.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Output1">
            <summary>
            The value of the first closure output.
            </summary>
            <remarks>
            <para>This is an output for the <b>Run</b> and <b>Call</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Output2">
            <summary>
            The value of the second closure output.
            </summary>
            <remarks>
            <para>This is an output for the <b>Run</b> and <b>Call</b> task actions.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.Output3">
            <summary>
            The value of the third closure output.
            </summary>
            <remarks>
            <para>This is an output for the <b>Run</b> and <b>Call</b> task actions.</para>
            </remarks>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ConvertScalarArgument(System.Type,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Converts a scalar MSBuild input value into a method input value.
            </summary>
            <param name="type">The input type that the method is expecting.</param>
            <param name="value">The MSBuild input value.</param>
            <returns>A method input value.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ConvertArgument(System.Type,Microsoft.Build.Framework.ITaskItem[])">
            <summary>
            Converts an MSBuild input value into a method input value.
            </summary>
            <param name="type">The input type that the method is expecting.</param>
            <param name="value">The MSBuild input value.</param>
            <returns>A method input value.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ConvertScalarResult(System.Object)">
            <summary>
            Converts a single, scalar method output value into a scalar MSBuild output value.
            </summary>
            <param name="value">The value returned by the method.</param>
            <returns>An MSBuild output value.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ConvertResult(System.Object)">
            <summary>
            Converts a single method output value into an MSBuild output value.
            </summary>
            <param name="value">The value returned by the method.</param>
            <returns>An MSBuild output value.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.NameOrIdentity(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Returns the value of the "Name" metadata, if it exists. Otherwise, the item specification is returned.
            </summary>
            <param name="item">The task item to inspect.</param>
            <returns>The item's name or identity.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.DefineMethod(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Defines a method.
            </summary>
            <param name="method">The compiled method code.</param>
            <param name="inputs">The definitions of the inputs to the method.</param>
            <param name="outputs">The definitions of the outputs from the method.</param>
            <param name="numberOfDefaultParameters">The number of default parameters for the method.</param>
            <returns>The ID of the method definition.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.LookupMethod(System.String)">
            <summary>
            Retrieves a previously-defined method by ID.
            </summary>
            <param name="methodId">The ID of the method definition.</param>
            <returns>The method definition.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.CreateClosure(System.String)">
            <summary>
            Creates a new closure and adds it to the container of existing closures.
            </summary>
            <param name="methodId">The ID of the method definition.</param>
            <returns>The ID of the new closure instance.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.LookupClosure(System.String)">
            <summary>
            Retrieves a previously-created closure by id.
            </summary>
            <param name="closureId">The ID of the previously-created closure.</param>
            <returns>The previously-created closure.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.DestroyClosure(System.String)">
            <summary>
            Deletes a closure. If the closure id does not identify a previously-created closure, no error is thrown.
            </summary>
            <param name="closureId">The ID of the closure to delete.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ParseTypeAndName(System.String)">
            <summary>
            Splits a string containing a type followed by a name, separated by any number of space characters.
            </summary>
            <param name="typeAndName">The string containing the type and name.</param>
            <returns>An object containing the split string.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ParseInputsOutputs(Microsoft.Build.Framework.ITaskItem[])">
            <summary>
            Parses the inputs or outputs, yielding a sequence of <see cref="T:MSBuild.ExtensionPack.Framework.DynamicExecute.NameAndType"/> objects.
            </summary>
            <param name="inputsOutputs">The inputs or outputs value.</param>
            <returns>A sequence of <see cref="T:MSBuild.ExtensionPack.Framework.DynamicExecute.NameAndType"/> objects.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.NumberOfDefaultParameters">
            <summary>
            Returns the number of default parameters for a method currently being defined.
            </summary>
            <returns>The number of default parameters.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Execute(MSBuild.ExtensionPack.Framework.DynamicExecute.Closure)">
            <summary>
            Sets all the default parameters and then executes the closure.
            </summary>
            <param name="closure">The closure to execute.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ExecuteRun">
            <summary>
            Executes the Run task action.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ExecuteCall">
            <summary>
            Executes the Call task action.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ExecuteDefine">
            <summary>
            Executes the Define task action.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ExecuteCreate">
            <summary>
            Executes the Create task action.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ExecuteSetInput">
            <summary>
            Executes the SetInput task action.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ExecuteInvoke">
            <summary>
            Executes the Invoke task action.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ExecuteGetOutput">
            <summary>
            Executes the GetOutput task action.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.ExecuteDestroy">
            <summary>
            Executes the Destroy task action.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition">
            <summary>
            Represents a compiled DynamicExecute method definition.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.numberOfDefaultParameters">
            <summary>
            The number of default parameters for this method.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.inputs">
            <summary>
            The names of input parameters for this method.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.outputs">
            <summary>
            The names of output parameters for this method.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.compiledMethod">
            <summary>
            The actual compiled method.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.#ctor(System.Reflection.MethodInfo,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition"/> class, creating a new method definition.
            </summary>
            <param name="compiledMethod">The underlying compiled method.</param>
            <param name="numberOfDefaultParameters">The number of default parameters for this method.</param>
            <param name="inputs">The inputs for the method.</param>
            <param name="outputs">The outputs for the method.</param>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.CompiledMethod">
            <summary>
            Returns the actual compiled method.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.NumberOfParameters">
            <summary>
            Returns the total number of parameters required to invoke the method (including default, explicit, and return values).
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.GetDefaultArgumentIndex(System.Int32)">
            <summary>
            Returns the argument index for the given default parameter, or -1 if it is not defined.
            </summary>
            <param name="defaultIndex">The zero-based index of the default parameter.</param>
            <returns>The argument index for the default parameter, or -1 if that parameter is not defined.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.GetInputArgumentIndex(System.Int32)">
            <summary>
            Returns the argument index for the given input parameter, or -1 if it is not defined.
            </summary>
            <param name="inputIndex">The zero-based index of the input parameter.</param>
            <returns>The argument index for the input parameter, or -1 if that parameter is not defined.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.GetInputArgumentIndex(System.String)">
            <summary>
            Returns the argument index for the given input parameter, or -1 if it is not defined.
            </summary>
            <param name="inputName">The name of the input parameter.</param>
            <returns>The argument index for the input parameter, or -1 if that parameter is not defined.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.GetOutputArgumentIndex(System.Int32)">
            <summary>
            Returns the argument index for the given output parameter, or -1 if it is not defined.
            </summary>
            <param name="outputIndex">The zero-based index of the output parameter.</param>
            <returns>The argument index for the output parameter, or -1 if that parameter is not defined.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition.GetOutputArgumentIndex(System.String)">
            <summary>
            Returns the argument index for the given output parameter, or -1 if it is not defined.
            </summary>
            <param name="outputName">The name of the output parameter.</param>
            <returns>The argument index for the output parameter, or -1 if that parameter is not defined.</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure">
            <summary>
            Represents a closure, including values for the default, input, and output parameters.
            </summary>
            <remarks>
            <para>A "parameter index" is a 0-based index into the array of parameters. It may refer to a default, input, or output parameter.</para>
            </remarks>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.methodDefinition">
            <summary>
            The underlying method definition.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.arguments">
            <summary>
            The arguments (and return values) for this closure.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.#ctor(MSBuild.ExtensionPack.Framework.DynamicExecute.MethodDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure"/> class. Creates a new closure, allocating space for the parameters.
            </summary>
            <param name="methodDefinition">The method definition used to create the new closure.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.SetDefaultArgument(System.Int32,System.Object)">
            <summary>
            Sets a default argument to a value. Invalid default parameter indices are ignored.
            </summary>
            <param name="defaultParameterIndex">The zero-based index of the default parameter to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.SetArgument(System.Int32,System.Object)">
            <summary>
            Sets an input argument to a value.
            </summary>
            <param name="inputIndex">The zero-based index of the input parameter to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.SetArgument(System.String,System.Object)">
            <summary>
            Sets an input argument to a value.
            </summary>
            <param name="inputName">The name of the input parameter to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.TryGetOutput(System.Int32)">
            <summary>
            Gets an output argument value. Returns null if the output argument does not exist.
            </summary>
            <param name="outputIndex">The zero-based index of the output argument to retrieve.</param>
            <returns>The value of the output argument, or null if the index is out of bounds.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.GetOutput(System.String)">
            <summary>
            Gets an output argument value.
            </summary>
            <param name="outputName">The name of the output argument to retrieve.</param>
            <returns>The value of the output argument.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.GetInputParameterType(System.Int32)">
            <summary>
            Gets an input parameter's CLI type.
            </summary>
            <param name="inputIndex">The zero-based index of the input parameter to retrieve.</param>
            <returns>The type of the input parameter.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.GetInputParameterType(System.String)">
            <summary>
            Gets an input parameter's CLI type.
            </summary>
            <param name="inputName">The name of the input parameter to retrieve.</param>
            <returns>The type of the input parameter.</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.DynamicExecute.Closure.Run">
            <summary>
            Executes the underlying compiled method, with the currently-defined arguments.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.GenericTool">
            <summary>
            This task can be used to wrap any executable
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <Param Include="Source">
                            <value>c:\b</value>
                        </Param>
                        <Param Include="Destination">
                            <value>c:\bb 3</value>
                        </Param>
                        <Param Include="Files">
                            <value>*.*</value>
                        </Param>
                        <Param Include="Options">
                            <value>/Mir</value>
                        </Param>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.Framework.GenericTool Executable="robocopy.exe" Parameters="@(Param)" SuccessExitCodes="0;1" WarningExitCodes="2;4" ErrorExitCodes="8;16"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.GenericTool.Parameters">
            <summary>
            Sets the parameters to pass to the Executable. The parameter should be defined in the 'value' metadata of an Item.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.GenericTool.SuccessExitCodes">
            <summary>
            The list of Success Exit Codes
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.GenericTool.WarningExitCodes">
            <summary>
            The list of Warning Exit Codes
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.GenericTool.ErrorExitCodes">
            <summary>
            The list of Error Exit Codes
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.GenericTool.RealExitCode">
            <summary>
            The real exit code returned from the Executable
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.GenericTool.LogToConsole">
            <summary>
            Set to true to log output to the console. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.GenericTool.Executable">
            <summary>
            The Executable to call
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.ILMerge">
            <summary>
            This task wraps ILMerge.
            <para/> This has been tested using ILMerge v2.10.0526
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <Input Include="C:\b\MSBuild.ExtensionPack.dll"/>
                        <Input Include="C:\b\Ionic.Zip.dll"/>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.Framework.ILMerge InputAssemblies="@(Input)" OutputFile="C:\a\MyNewAssembly.dll"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.AllowDuplicateResources">
            <summary>
            AllowDuplicateResources
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.AllowDuplicateTypes">
            <summary>
            Allows the user to either allow all public types to be renamed when they are duplicates, or to specify it for arbitrary type names
            <para/>Command line option: [/allowDup[:typeName]]*
            <para/>Default: no duplicates of public types allowed.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.AllowMultipleAssemblyLevelAttributes">
            <summary>
            If set, any assembly-level attributes names that have the same type are copied over into the target directory as long as the definition of the attribute type specifies that “AllowMultiple” is true.
            <para/>Command line option: /allowMultiple
            <para/>Default: false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.AllowZeroPeKind">
            <summary>
            When this is set before calling Merge, then if an assembly's PeKind flag (this is the value of the field listed as .corflags in the Manifest) is zero it will be treated as if it was ILonly.
            <para/>This can be used to allow C++ assemblies to be merged; it does not appear that the C++ compiler writes the value as ILonly.
            <para/>However, if such an assembly has any non-IL features, then they will probably not be copied over into the target assembly correctly.
            <para/>So please use this option with caution.
            <para/>Command line option: /zeroPeKind
            <para/>Default: false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.AttributeFile">
            <summary>
            If this is set before calling Merge, then it specifies the path and filename to an atttribute assembly, an assembly that will be used to get all of the assembly-level attributes such as Culture, Version, etc.
            <para/>It will also be used to get the Win32 Resources from. It is mutually exclusive with the CopyAttributes property (Section 2.7).
            <para/>When it is not specified, then the Win32 Resources from the primary assembly are copied over into the target assembly.
            <para/>If it is not a full path, then the current directory is used.
            <para/>Command line option: /attr:filename
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.Closed">
            <summary>
            When this is set before calling Merge, then the "transitive closure" of the input assemblies is computed and added to the list of input assemblies.
            <para/>An assembly is considered part of the transitive closure if it is referenced, either directly or indirectly, from one of the originally
            <para/> specified input assemblies and it has an external reference to one of the input assemblies, or one of the assemblies that has such a reference.
            <para/>Command line option: /closed
            <para/>Default: false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.CopyAttributes">
            <summary>
            When this is set before calling Merge, then the assembly level attributes of each input assembly are copied over into the target assembly.
            <para/>Any duplicate attribute overwrites a previously copied attribute. If you want to allow duplicates (for those attributes whose type specifies “AllowMultiple” in their definition), then you can also set the AllowMultipleAssemblyLevelAttributes.
            <para/>The input assemblies are processed in the order they are specified. This option is mutually exclusive with specifying an attribute assembly, i.e., the property AttributeFile.
            <para/>When an attribute assembly is specified, then no assembly-level attributes are copied over from the input assemblies
            <para/>Command line option: /copyattrs
            <para/>Default: false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.DebugInfo">
            <summary>
            When this is set to true, ILMerge creates a .pdb file for the output assembly and merges into it any .pdb files found for input assemblies.
            <para/>If you do not want a .pdb file created for the output assembly, either set this property to false or else specify the /ndebug option at the command line.
            <para/>Command line option: /ndebug
            <para/>Default: true
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.DelaySign">
            <summary>
            When this is set before calling Merge, then the target assembly will be delay signed. This can be set only in conjunction with the /keyfile option (Section 2.13).
            <para/>Command line option: /delaysign
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.ExcludeFile">
            <summary>
            This property is used only in conjunction with the Internalize property (Section 2.12). When this is set before calling Merge, it indicates 
            <para/>the path and filename that will be used to identify types that are not to have their visibility modified.
            <para/>If Internalize is true, but ExcludeFile is "", then all types in any assembly other than the primary assembly are made non-public.
            <para/>Setting this property implicitly sets Internalize to true. The contents of the file should be one regular expression per line.
            <para/>The syntax is that defined in the .NET namespace System.Text.RegularExpressions for regular expressions.
            <para/>The regular expressions are matched against each type's full name, e.g., "System.Collections.IList".
            <para/>If the match fails, it is tried again with the assembly name (surrounded by square brackets) prepended to the type name.
            <para/>Thus, the pattern “\[A\].*” excludes all types in assembly A from being made non-public. (The backslashes are required because the string is treated as a regular expression.)
            <para/>The pattern “N.T” will match all types named T in the namespace named N no matter what assembly they are defined in.
            <para/> It is important to note that the regular expressions are not anchored to the beginning of the string; if this is desired, use the appropriate regular expression operator characters to do so.
            <para/>Command line option: /internalize[:excludeFile]
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.InputAssemblies">
            <summary>
            Sets the input assemblies to merge.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.DeleteInputAssemblies">
            <summary>
            Set to true to delete the InputAssemblies after the merged file has been created. Default is false;
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.Internalize">
            <summary>
            This controls whether types in assemblies other than the primary assembly have their visibility modified. When it is true, then all non-exempt types that are visible outside of their assembly 
            <para/>have their visibility modified so that they are not visible from outside of the merged assembly. A type is exempt if its full name matches a line from the ExcludeFile (Section 2.10) using the .NET regular expression engine.
            <para/>Command line option: /internalize[:excludeFile]
            <para/>Default: false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.FileAlignment">
            <summary>
            This controls the file alignment used for the target assembly. The setter sets the value to the largest power of two that is no larger than the supplied argument, and is at least 512. 
            <para/>Command line option: /align:n
            <para/>Default: 512
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.KeyFile">
            <summary>
            When this is set before calling Merge, it specifies the path and filename to a .snk file. The target assembly will be signed with its contents and will 
            <para/>then have a strong name. It can be used with the DelaySign property (Section 2.9) to have the target assembly delay signed. 
            <para/>This can be done even if the primary assembly was fully signed.
            <para/>Command line option: /keyfile:filename
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.LogMessages">
            <summary>
            When this is set before calling Merge, then log messages are written. It is used in conjunction with the LogFile property.
            <para/>If Log is true, but LogFile is null, then log messages are written to Console.Out. To specify this behavior on the command line, the option "/log" can be given without a log file.
            <para/>Command line option: /log[:logfile]
            <para/>Default: false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.LogFile">
            <summary>
            When this is set before calling Merge, it indicates the path and filename that log messages are written to. If LogMessages is true, but LogFile is null, then log messages are written to Console.Out.
            <para/>Command line option: /log[:logfile]
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.OutputFile">
            <summary>
            This must be set before calling Merge. It specifies the path and filename that the target assembly will be written to.
            <para/>Command line option: /out:filename
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.PublicKeyTokens">
            <summary>
            This must be set before calling Merge. It indicates whether external assembly references in the manifest of the target assembly will use full public keys (false) or public key tokens (true).
            <para/>Command line option: /out:filename
            <para/>Default: true
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.TargetPlatformVersion">
            <summary>
            This method sets the .NET Framework for the target assembly to be the one specified by platform. Valid strings for the first argument are "v1", "v1.1", "v2", and "v4". 
            <para/>The "v" is case insensitive and is also optional. This way ILMerge can be used to "cross-compile", i.e., it can run in one version of the framework and generate 
            <para/>the target assembly so it will run under a different assembly. The second argument is the directory in which mscorlib.dll is to be found.
            <para/>Command line option: /targetplatform:version,platformdirectory
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.TargetPlatformDirectory">
            <summary>
            This method sets the .NET Framework for the target assembly to be the one specified by platform. Valid strings for the first argument are "v1", "v1.1", "v2", and "v4". 
            <para/>The "v" is case insensitive and is also optional. This way ILMerge can be used to "cross-compile", i.e., it can run in one version of the framework and generate 
            <para/>the target assembly so it will run under a different assembly. The second argument is the directory in which mscorlib.dll is to be found.
            <para/>Command line option: /targetplatform:version,platformdirectory
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.StrongNameLost">
            <summary>
            Once merging is complete, this property is true if and only if the primary assembly had a strong name, but the target assembly does not. 
            <para/>This can occur when an .snk file is not specified, or if something goes wrong trying to read its contents.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.TargetKind">
            <summary>
            This controls whether the target assembly is created as a library, a console application or as a Windows application. When it is not specified, then the target 
            <para/>assembly will be the same kind as that of the primary assembly. (In that case, the file extensions found on the specified target assembly and the primary 
            <para/>assembly must match.) When it is specified, then the file extension of the target assembly must match the specification. The possible values are ILMerge.Kind.{Dll, Exe, WinExe}
            <para/>Command line option: /target:(library|exe|winexe)
            <para/>Default: ILMerge.Kind.SameAsPrimaryAssembly
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.UnionMerge">
            <summary>
            When this is true, then types with the same name are all merged into a single type in the target assembly. The single type is the union of all of the individual 
            <para/>types in the input assemblies: it contains all of the members from each of the corresponding types in the input assemblies. It cannot be specified at the same time as /allowDup.
            <para/>Command line option: /union
            <para/>Default: false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.Version">
            <summary>
            When this has a non-null value, then the target assembly will be given its value as the version number of the assembly. When specified on the command line, the 
            <para/>version is read in as a string and should look like "6.2.1.3" (but without the quote marks). The version must be a valid assembly version as defined by the attribute AssemblyVersion in the System.Reflection namespace.
            <para/>Command line option: /ver:version
            <para/>Default: null
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.XmlDocs">
            <summary>
            This property controls whether XML documentation files are merged to produce an XML documentation file for the target assembly.
            <para/>Command line option: /xmldocs
            <para/>Default: false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.ILMerge.SearchDirectories">
            <summary>
            Sets the directories to be used to search for input assemblies. Each item should contain a directory name.
            <para/>Command line option: /lib:directory
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.Path">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>ChangeExtension</i> (<b>Required: </b> Filepath, Extension <b>Output: </b>Value)</para>
            <para><i>Combine</i> (<b>Required: </b> Filepath, Filepath2 <b>Output: </b>Value)</para>
            <para><i>GetDirectoryName</i> (<b>Required: </b> Filepath <b>Output: </b>Value)</para>
            <para><i>GetExtension</i> (<b>Required: </b> Filepath <b>Output: </b>Value)</para>
            <para><i>GetFileName</i> (<b>Required: </b> Filepath <b>Output: </b>Value)</para>
            <para><i>GetFileNameWithoutExtension</i> (<b>Required: </b> Filepath <b>Output: </b>Value)</para>
            <para><i>GetFullPath</i> (<b>Required: </b> Filepath <b>Output: </b>Value)</para>
            <para><i>GetPathRoot</i> (<b>Required: </b> Filepath <b>Output: </b>Value)</para>
            <para><i>GetRandomFileName</i> (<b>Output: </b>Value)</para>
            <para><i>GetTempPath</i> (<b>Output: </b>Value)</para>
            <para><i>HasExtension</i> (<b>Required: </b> Filepath <b>Output: </b>Value)</para>
            <para><i>IsPathRooted</i> (<b>Required: </b> Filepath <b>Output: </b>Value)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="ChangeExtension" Filepath="c:\temp\filename.txt" Extension="log">
                        <Output TaskParameter="Value" PropertyName="NewFilename" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="NewFilename = $(NewFilename)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="Combine" Filepath="c:\temp" Filepath2="filename.txt">
                        <Output TaskParameter="Value" PropertyName="CombinedFilename" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="CombinedFilename = $(CombinedFilename)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="GetDirectoryName" Filepath="c:\temp\filename.txt">
                        <Output TaskParameter="Value" PropertyName="JustTheDirectory" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="JustTheDirectory = $(JustTheDirectory)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="GetExtension" Filepath="c:\temp\filename.txt">
                        <Output TaskParameter="Value" PropertyName="JustTheExtension" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="JustTheExtension = $(JustTheExtension)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="GetFileName" Filepath="c:\temp\filename.txt">
                        <Output TaskParameter="Value" PropertyName="JustTheFilename" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="JustTheFilename = $(JustTheFilename)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="GetFileNameWithoutExtension" Filepath="c:\temp\filename.txt">
                        <Output TaskParameter="Value" PropertyName="JustTheFilename" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="JustTheFilename = $(JustTheFilename)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="GetFullPath" Filepath="c:\temp\filename.txt">
                        <Output TaskParameter="Value" PropertyName="FullPath" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="FullPath = $(FullPath)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="GetPathRoot" Filepath="c:\temp\filename.txt">
                        <Output TaskParameter="Value" PropertyName="PathRoot" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="PathRoot = $(PathRoot)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="GetRandomFileName">
                        <Output TaskParameter="Value" PropertyName="RandomFilename" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="RandomFilename = $(RandomFilename)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="GetTempPath">
                        <Output TaskParameter="Value" PropertyName="TempPath" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="TempPath = $(TempPath)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="HasExtension" Filepath="c:\temp\filename.txt">
                        <Output TaskParameter="Value" PropertyName="FileHasAnExtension" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="FileHasAnExtension = $(FileHasAnExtension)"/>
                    <MSBuild.ExtensionPack.Framework.Path TaskAction="IsPathRooted" Filepath="c:\temp\filename.txt">
                        <Output TaskParameter="Value" PropertyName="FileIsRooted" />
                    </MSBuild.ExtensionPack.Framework.Path>
                    <Message Text="FileIsRooted = $(FileIsRooted)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Path.Filepath">
            <summary>
            The file path to use
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Path.Filepath2">
            <summary>
            The file path to use for the second filepath parameter for the Combine task
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Path.Extension">
            <summary>
            The file extension to use for the ChangeExtension task
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Path.Value">
            <summary>
            Gets value returned from the invoked Path method
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.SmartExec">
            <summary>
            Runs a specified program or command without blocking the UI. This is similar to
            the Exec Task: http://msdn.microsoft.com/en-us/library/x8zx72cd.aspx.
            <para/>This task is useful when you need to run a long command-line task during the build process.
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="3.5" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <Target Name="Default">
                <MSBuild.ExtensionPack.Framework.SmartExec Command="iisreset.exe"/>
                <MSBuild.ExtensionPack.Framework.SmartExec Command="copy &quot;d:\a\*&quot; &quot;d:\b\&quot; /Y"/>
              </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.SmartExec.Command">
            <summary>
            Gets or sets the command(s) to run. These can be system commands,
            such as attrib, or an executable, such as program.exe, runprogram.bat, or setup.msi.
            This parameter can contain multiple lines of commands (each command on a new-line).
            Alternatively, you can place multiple commands in a batch file and run it using this parameter.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.SmartExec.SuccessExitCode">
            <summary>
            Gets or sets the success exit code for the command. Default is zero (0).
            </summary>
            <remarks>No Exec Equivalent</remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.SmartExec.IgnoreExitCode">
            <summary>
            Gets or sets a value indicating whether to ignore the command exit code.
            If true, the task ignores the exit code provided by the executed command.
            Otherwise, the task returns false if the executed command returns an exit code
            that does not match <see cref="P:MSBuild.ExtensionPack.Framework.SmartExec.SuccessExitCode"/>.
            </summary>
            <remarks>Exec Equivalent: IgnoreExitCode</remarks>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.SmartExec.HasCommandArguments(System.String)">
            <summary>
            Gets the command arguments from the command string.
            </summary>
            <param name="command">The full command string with arguments</param>
            <returns>True if the command has arguments, false otherwise</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.SmartExec.CreateBatchProgram(System.String)">
            <summary>
            Creates a batch program file containing the command.
            </summary>
            <param name="command">The full command string with arguments</param>
            <returns>The batch program file path</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.SmartExec.GetCommandLine(System.String)">
            <summary>
            Gets a command process object with the command specified.
            </summary>
            <param name="command">The command to execute</param>
            <returns>Returns a command prompt start information that is ready to start</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.SmartExec.ReadStdOut">
            <summary>
            Handles reading of stdout and firing an event for
            every line read
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.SmartExec.ReadStdErr">
            <summary>
            Handles reading of stdErr
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.XProduct">
            <summary>
            This task creates a cross product of up to 10 ItemGroups
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <AllConfigurations Include="Release">
                        <Name>Release</Name>
                        <Framework>net-3.5</Framework>
                        <OutputDirectory>net-3.5\bin\release\</OutputDirectory>
                    </AllConfigurations>
                    <AllConfigurations Include="Debug">
                        <Name>Debug</Name>
                        <Framework>net-3.5</Framework>
                        <OutputDirectory>net-3.5\bin\debug\</OutputDirectory>
                    </AllConfigurations>
                    <AllPlatforms Include="x86">
                        <Use32Bit>True</Use32Bit>
                    </AllPlatforms>
                    <AllPlatforms Include="x64">
                        <Use32Bit>False</Use32Bit>
                    </AllPlatforms>
                    <AllDatabaseSystems Include="SqlServerLocal"  Condition="'true' == 'true'">
                        <DataSource>localhost\.</DataSource>
                        <DatabaseDirectory>C:\Databases\.</DatabaseDirectory>
                    </AllDatabaseSystems>
                    <AllDatabaseSystems Include="SqlServer2005">
                        <DataSource>localhost\MSSQL2005</DataSource>
                        <DatabaseDirectory>C:\Databases\MsSql2005</DatabaseDirectory>
                    </AllDatabaseSystems>
                </ItemGroup>
                <Target Name="Default">
                    <MSBuild.ExtensionPack.Framework.XProduct IdentityFormat="{0}-{1}-{2}" Group1="@(AllConfigurations)" Group2="@(AllPlatforms)" Group3="@(AllDatabaseSystems)" >
                        <Output ItemName="NewList" TaskParameter="Result" />
                        <Output PropertyName="CountX" TaskParameter="Count" />
                    </MSBuild.ExtensionPack.Framework.XProduct>
                    <Message Text="Got $(CountX) configurations" />
                    <Message Text="%(NewList.Identity)
                                %(NewList.Name)
                                %(NewList.Framework)
                                %(NewList.OutputDirectory)
                                %(NewList.Use32Bit)
                                %(NewList.DataSource)
                                %(NewList.DataBaseDirectory)" />
                </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Result">
            <summary>
            The cross-product result output.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Count">
            <summary>
            The number of items produced by the cross-product
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.IdentityFormat">
            <summary>
            Specifies the format to use for the new ItemGroup names
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.AddOriginalIdentityUsingGroupNumberSuffix">
            <summary>
            Copies original Identity metadata to result item as well - suffixed by the group number, i.e. you can use <c>%(ResultList.Identity1)</c>.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group1">
            <summary>
            ItemGroup1
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group2">
            <summary>
            ItemGroup2
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group3">
            <summary>
            ItemGroup3
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group4">
            <summary>
            ItemGroup4
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group5">
            <summary>
            ItemGroup5
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group6">
            <summary>
            ItemGroup6
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group7">
            <summary>
            ItemGroup7
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group8">
            <summary>
            ItemGroup8
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group9">
            <summary>
            ItemGroup9
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.XProduct.Group10">
            <summary>
            ItemGroup10
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.Metadata">
            <summary>
            Please note that this can be accomplished using vanilla MSBuild. See <a href="https://msbuildextensionpack.codeplex.com/discussions/447856">MSBuild metadata discussion</a>.
            <b>Valid TaskActions are:</b>
            <para><i>Add</i> (<b>Required:</b> Items, NewMetadata <b>Output: </b> NewItems)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project xmlns="http:///schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Demo">
             <PropertyGroup>
               <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
               <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
             </PropertyGroup>
             <Import Project="$(TPath)"/>
             <ItemGroup>
               <Server Include="dev01;dev02;dev03">
                 <DbServer>dev-db01</DbServer>
               </Server>
             </ItemGroup>
             <Target Name="Demo">
               <MSBuild.ExtensionPack.Framework.Metadata TaskAction="Add" Items="@(Server)" NewMetadata="Source=server01;Dest=server02">
                 <!-- No way to change the existing item, only to make a new one. -->
                 <Output ItemName="Server2" TaskParameter="ResultItems"/>
               </MSBuild.ExtensionPack.Framework.Metadata>
               <Message Text="Result:%0d%0a@(Server2->'%(Identity)=Source: %(Source) Dest: %(Dest) DbServer: %(DbServer)','%0d%0a')"/>
             </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Metadata.Items">
            <summary>
            Sets the source Items.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Metadata.NewMetadata">
            <summary>
            Sets the string which contains the metadata.<br/>
            This should be in the format <i>n1=v1;n2=v2;...</i>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Metadata.ResultItems">
            <summary>
            Gets the item which contains the result.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.Metadata.ParseParameters(System.String)">
            <summary>
            Can be used to create a dictionary with all the key/value pairs 
            that are contained in <c>parameters</c>.
            </summary>
            <param name="parameters">string to parse</param>
            <returns>IDictionary</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.IncrementMethod">
            <summary>
            Specifies how certain version numbers are incremented by the task.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.IncrementMethod.NoIncrement">
            <summary>
            Do not auto-increment the number.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.IncrementMethod.AutoIncrement">
            <summary>
            Add one to the current number.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.IncrementMethod.DateString">
            <summary>
            Format the current date and time using a formatting string, and use that as the number.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.IncrementMethod.Julian">
            <summary>
            Format the current date as the two digit year and the day of the year, and use that as the number, i.e. the revision number for 7/03/2009 is 09184
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.IncrementMethod.YearWeekDay">
            <summary>
            Format the current date as YYWWDW where YY is the year, WW is the week number and DW is the day of the week e.g. 2 Feb 2010 would be 10062. 15 March 2010 will be 10121 and 19 December 2010 10475.
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Framework.IncrementMethod.ElapsedDays">
            <summary>
            Calculate the number of days elapsed since a given StartDate. Take note of the StartDate, PaddingCount and PaddingDigit parameters.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.AssemblyInfo">
            <summary>
            The AssemblyInfo task provides a way to manipulate the content of AssemblyInfo files at build time. It works with
            C#, VB, and J# AssemblyInfo files.
            <para/>This task is based on the AssemblyInfo task written by Neil Enns (http://code.msdn.microsoft.com/AssemblyInfoTaskvers). It is used here with permission.<para/>
            </summary>
            <remarks>
                <para>The primary use of the AssemblyInfo task is to set assembly version numbers
                at build time. The typical way to use it is to add the
                MSBuild.ExtensionPack.VersionNumber.Targets file to your project file, and to then specify
                properties in your project file to control the assembly version numbers.</para>
                <para>Version numbers are of the form A.B.C.D, where:</para>
                <list type="bullet">
                    <item>A is the major version</item>
                    <item>B is the minor version</item>
                    <item>C is the build number</item>
                    <item>D is the revision</item>
                </list>
                <para>Typically the major and minor versions are fixed and do not change over the
                course of multiple daily builds. The build number is frequently set to increment on a daily
                basis, either starting at 1 and continuing from there, or as some representation of
                the date of the build. The revision is typically used to differentiate between multiple builds on
                the same day, usually starting at 1 and incrementing for each build.</para>
                <para>
                    To get the standard Visual Studio-style version simply add the
                    MSBuild.ExtensionPack.VersionNumber.Targets file to your project. To override the default
                    version numbers, such as the major and minor version, you can set the
                    appropriate properties. For more information see the
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyMajorVersion">AssemblyMajorVersion</see> and
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyMinorVersion">AssemblyMinorVersion</see> items.
                </para>
            <para/>
            <para/>
            <b>For use with Team Foundation Server, see this blog post: </b><a href="http://blogs.msdn.com/aaronhallberg/archive/2007/06/08/team-build-and-the-assemblyinfo-task.aspx">Team Build and the AssemblyInfo Task</a><para/>
            <para/><b>How To: Auto-Increment Version Numbers for a Project</b>
            The most common way to use the AssemblyInfo task is to add a reference to the MSBuild.ExtensionPack.VersionNumber.targets file to any project file whose AssemblyInfo you want to manage.
            <para/>
            For standard .csproj, .vbproj, and .vjsproj files do the following:
            <para/>
            Open the project in Visual Studio 2005 
            Right-click on the project in Solution Explorer and select Unload Project 
            Right-click on the project in Solution Explorer and select Edit [project file]
            If the AssemblyInfoTask was installed into the Global Assembly Cache add the following line at the end of the project file after the last &lt;Import&gt; tag:
            <para/>
            &lt;Import Project="$(MSBuildExtensionsPath)\Microsoft\ExtensionPack\MSBuild.ExtensionPack.VersionNumber.targets"/&gt;
            <para/>
            If the AssemblyInfoTask was installed into the user's Application Data folder add the following line at the end of the project file after the last &lt;Import&gt; tag:
            <para/>
            &lt;Import Project="$(APPDATA)\Microsoft\MSBuild\ExtensionPack\MSBuild.ExtensionPack.VersionNumber.targets"/&gt;
            Save and close the project file 
            Right-click on the project in Solution Explorer and select Reload Project
            With these project file modifications all builds will have auto-incrementing assembly and file versions of the following format:
            <para/>
            1.0.date.revision
            <para/>
            For example, the first build on November 10th, 2005 will have a version number of:
            <para/>
            1.0.51110.00 
            <para/>
            Subsequent builds on the same day will have version numbers 1.0.51110.01, 1.0.51110.02, and so on.
            <para/>
            Note: All AssemblyInfo.* files must have have entries with a starting value of "1.0.0.0" for AssemblyVersion and AssemblyFileVersion so the AssemblyInfoTask will work correctly. If these entries are missing from the files a build error will be generated.
            <para/>
            Overriding the Default Version Number Behaviour
            In some situations the desired version number behaviour may be different than the defaults offered by the MSBuild.ExtensionPack.VersionNumber.targets file.
            <para/>
            To set the assembly and file versions to specific numbers add the appropriate property to your project file. For example, to set the major version to 8, add the following two properties:
            <para/>
            &lt;AssemblyMajorVersion&gt;8&lt;/AssemblyMajorVersion&gt;
            <para/>
            &lt;AssemblyFileMajorVersion&gt;8&lt;/AssemblyFileMajorVersion&gt;
            <para/>
            For more information see the assembly version properties reference.
            </remarks>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyMajorVersion"/>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyMinorVersion"/>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <AssemblyInfoFiles Include="C:\a\CommonAssemblyInfo.cs"/>
                        <AssemblyInfoFiles1 Include="C:\a\CommonAssemblyInfo1.cs"/>
                        <AssemblyInfoFiles2 Include="C:\a\CommonAssemblyInfo2.cs"/>
                    </ItemGroup>
                    <!-- Update an attribute and don't do any versioning -->
                    <MSBuild.ExtensionPack.Framework.AssemblyInfo ComVisible="true" AssemblyInfoFiles="@(AssemblyInfoFiles)" SkipVersioning="true"/>
                    <!-- Version using YearWeekDay and set the start of the week as a Sunday -->
                    <MSBuild.ExtensionPack.Framework.AssemblyInfo AssemblyInfoFiles="@(AssemblyInfoFiles1)" AssemblyBuildNumberType="YearWeekDay" FirstDayOfWeek="Sunday"/>
                    <!-- Version using the number of days elapsed since a given start date-->
                    <MSBuild.ExtensionPack.Framework.AssemblyInfo AssemblyInfoFiles="@(AssemblyInfoFiles2)" StartDate="1 Jan 1976" AssemblyBuildNumberType="ElapsedDays"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyMajorVersion">
            <summary>
            The major version of the assembly.
            </summary>
            <remarks>
                <para>To change the assembly major version set this to the specific major version
                you want. For example, for Visual Studio 2005 build 8.0.50727.42 this is set to
                "8".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyMajorVersion</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyMajorVersion&gt;8&lt;/AssemblyMajorVersion&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyMinorVersion">
            <summary>
            The minor version of the assembly.
            </summary>
            <remarks>
                <para>To change the assembly minor version set this to the specific minor version
                you want. For example, for Visual Studio 2005 build 8.0.50727.42 this is set to
                "0".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyMinorVersion</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyMinorVersion&gt;0&lt;/AssemblyMinorVersion&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumber">
            <summary>
            The build number of the assembly.
            </summary>
            <remarks>
                <para>
                    To change the assembly build number set this to the specific build number you
                    want. In most cases you do not want to use this property. Instead, use the
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberType">AssemblyBuildNumberType</see> and
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberFormat">AssemblyBuildNumberFormat</see>
                    properties to have this value determined automatically at build time.
                </para>
                <para>
                    To force the build number to a specific value when using the
                    MSBuild.ExtensionPack.VersionNumber.Targets, use the <em>AssemblyBuildNumber</em> property,
                    and set the <em>AssemblyBuildNumberFormat</em> property to
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">DirectSet</see>.
                </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyBuildNumber&gt;0&lt;/AssemblyBuildNumber&gt;
            &lt;AssemblyBuildNumberType&gt;DirectSet&lt;/AssemblyBuildNumberType&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberType"/>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberFormat"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevision">
            <summary>
            The revision of the assembly.
            </summary>
            <remarks>
                <para>
                    To change the assembly revision set this to the specific revision number you
                    want. In most cases you do not want to use this property. Instead, use the
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionType">AssemblyRevisionNumberType</see> and
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionFormat">AssemblyRevisionNumberFormat</see>
                    properties to have this value determined automatically at build time.
                </para>
                <para>
                    To force the revision number to a specific value when using the
                    MSBuild.ExtensionPack.VersionNumber.Targets, set the <em>AssemblyRevision</em> property to
                    the value and set the <em>AssemblyRevisionFormat</em> property to
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">DirectSet</see>.
                </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyRevision&gt;0&lt;/AssemblyRevision&gt;
            &lt;AssemblyRevisionType&gt;DirectSet&lt;/AssemblyRevisionType&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionType"/>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionFormat"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyVersion">
            <summary>
            The complete version of the assembly.
            </summary>
            <remarks>
                <para>
                    Use AssemblyVersion to directly set the entire version number with a single
                    parameter. For example, if you know you want your version to be "1.2.3.4", you
                    can set AssemblyVersion to this instead of having to use each of the individual
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyMajorVersion">AssemblyMajorVersion</see>,
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyMinorVersion">AssemblyMinorVersion</see>,
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumber">AssemblyBuildNumber</see>, and
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevision">AssemblyRevision</see> properties.
                </para>
                <para>Note that the other four properties override this one. For example, If you
                set AssemblyVersion to "1.2.3.4" and then set AssemblyMinorVersion to 6, the resulting
                version will be "1.6.3.4".</para>
                <para>
                    This property is an input only. If you want to know what the final version
                    generated was, use the
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.MaxAssemblyVersion">MaxAssemblyVersion</see> output property
                    instead.
                </para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file the best way to specify
                this is to set the <em>AssemblyVersion</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyVersion&gt;1.2.3.4&lt;/AssemblyVersion&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.MaxAssemblyVersion"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberType">
            <summary>
            The type of update to use when setting the <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumber">AssemblyBuildNumber</see> property.
            </summary>
            <remarks>
                <para>
                    The AssemblyBuildNumber can be set using several different methods. The
                    AssemblyBuildNumberType property is used to select the desired method. The
                    supported types are defined in the
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">IncrementMethod</see> enumeration.
                </para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file the default setting is
                DateFormat. To override this set the <em>AssemblyBuildNumberType</em>
                property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyBuildNumberType&gt;DateFormat&lt;/AssemblyBuildNumberType&gt;
            &lt;AssemblyBuildNumberFormat&gt;yyMMdd&lt;/AssemblyBuildNumberFormat&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberFormat"/>
            <seealso cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionType">
            <summary>
            The type of update to use when setting the <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevision">AssemblyRevision</see> property.
            </summary>
            <remarks>
                <para>
                    The AssemblyRevision can be set using several different methods. The
                    AssemblyRevisionType property is used to select the desired method. The
                    supported types are defined in the
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">IncrementMethod</see> enumeration.
                </para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file the default setting is
                AutoIncrement. To override this set the <em>AssemblyRevisionType</em>
                property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyRevisionType&gt;AutoIncrement&lt;/AssemblyRevisionType&gt;
            &lt;AssemblyRevisionFormat&gt;00&lt;/AssemblyRevisionFormat&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionFormat"/>
            <seealso cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionReset">
            <summary>
            Whether the AssemblyRevisionNumber will be reset to 0 when a DateString or Julian BuildNumberType is used in conjunction with an AutoIncrement <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionType">AssemblyRevisionType</see>.
            </summary>
            <remarks>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file, the default setting is
                True. To override this set the <em>AssemblyRevisionReset</em>
                property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyRevisionReset&gt;False&lt;/AssemblyRevisionReset&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionFormat"/>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionType"/>
            <seealso cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevisionReset">
            <summary>
            Whether the AssemblyFileRevisionNumber will be reset to 0 when a DateString or Julian BuildNumberType is used in conjunction with an AutoIncrement <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionType">AssemblyRevisionType</see>.
            </summary>
            <remarks>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file, the default setting is
                True. To override this set the <em>AssemblyFileRevisionReset</em>
                property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileRevisionReset&gt;False&lt;/AssemblyFileRevisionReset&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionFormat"/>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionType"/>
            <seealso cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.SkipVersioning">
            <summary>
            Set to true to skip setting version information. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberFormat">
            <summary>
            The format string to apply when converting the build number to a text string.
            </summary>
            <remarks>
                <para>
                    Use this property to control the formatting of the build number when it is
                    converted from a number to a string. This is particularly useful when used in
                    conjunction with the <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">DateFormat</see> or
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">AutoIncrement</see> methods of setting the build
                    number. Any valid .NET formatting string can be specified.
                </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyBuildNumberType&gt;DateFormat&lt;/AssemblyBuildNumberType&gt;
            &lt;AssemblyBuildNumberFormat&gt;yyMMdd&lt;/AssemblyBuildNumberFormat&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberType"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionFormat">
            <summary>
            The format string to apply when converting the revision to a text string.
            </summary>
            <remarks>
                <para>
                    Use this property to control the formatting of the revision when it is
                    converted from a number to a string. This is particularly useful when used in
                    conjunction with the <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">DateFormat</see> or
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">AutoIncrement</see> methods of setting the
                    revision. Any valid .NET formatting string can be specified.
                </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyRevisionType&gt;AutoIncrement&lt;/AssemblyRevisionType&gt;
            &lt;AssemblyRevisionFormat&gt;00&lt;/AssemblyRevisionFormat&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberType"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.MaxAssemblyVersion">
            <summary>Returns the largest assembly version set by the task.</summary>
            <remarks>
                <para>Use this property to find out the largest assembly version that was generated
                by the task. If only one assemblyinfo.* file was specified as an input, this will
                be the resulting assembly version for that file. If more than one assemblyinfo.*
                file was specified, this will be the largest build number generated.</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file this value is placed in
                <em>MaxAssemblyVersion</em> property after the UpdateAssemblyInfoFiles target is
                run.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileMajorVersion">
            <summary>
            The major version of the assembly file.
            </summary>
            <remarks>
                <para>To change the assembly file major version set this to the specific major version
                you want. For example, for Visual Studio 2005 build 8.0.50727.42 this is set to
                "8".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyFileMajorVersion</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileMajorVersion&gt;8&lt;/AssemblyFileMajorVersion&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileMinorVersion">
            <summary>
            The minor version of the assembly file.
            </summary>
            <remarks>
                <para>To change the assembly file minor version set this to the specific minor version
                you want. For example, for Visual Studio 2005 build 8.0.50727.42 this is set to
                "0".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyFileMinorVersion</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileMinorVersion&gt;0&lt;/AssemblyFileMinorVersion&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumber">
            <summary>
            The build number of the assembly file.
            </summary>
            <remarks>
                <para>
                    To change the assembly file build number set this to the specific build number you
                    want. In most cases you do not want to use this property. Instead, use the
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumberType">AssemblyFileBuildNumberType</see> and
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumberFormat">AssemblyFileBuildNumberFormat</see>
                    properties to have this value determined automatically at build time.
                </para>
                <para>
                    To force the build number to a specific value when using the
                    MSBuild.ExtensionPack.VersionNumber.Targets, use the <em>AssemblyFileBuildNumber</em> property,
                    and set the <em>AssemblyFileBuildNumberFormat</em> property to
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">DirectSet</see>.
                </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileBuildNumber&gt;0&lt;/AssemblyFileBuildNumber&gt;
            &lt;AssemblyFileBuildNumberType&gt;DirectSet&lt;/AssemblyFileBuildNumberType&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumberType"/>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumberFormat"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevision">
            <summary>
            The revision of the assembly file.
            </summary>
            <remarks>
                <para>
                    To change the assembly file revision set this to the specific revision number you
                    want. In most cases you do not want to use this property. Instead, use the
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevisionType">AssemblyFileRevisionNumberType</see> and
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevisionFormat">AssemblyFileRevisionNumberFormat</see>
                    properties to have this value determined automatically at build time.
                </para>
                <para>
                    To force the revision number to a specific value when using the
                    MSBuild.ExtensionPack.VersionNumber.Targets, set the <em>AssemblyFileRevision</em> property to
                    the value and set the <em>AssemblyFileRevisionFormat</em> property to
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">DirectSet</see>.
                </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileRevision&gt;0&lt;/AssemblyFileRevision&gt;
            &lt;AssemblyFileRevisionType&gt;DirectSet&lt;/AssemblyFileRevisionType&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionType"/>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyRevisionFormat"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileVersion">
            <summary>
            The complete version of the assembly file.
            </summary>
            <remarks>
                <para>
                    Use AssemblyFileVersion to directly set the entire file version number with a single
                    parameter. For example, if you know you want your version to be "1.2.3.4", you
                    can set AssemblyVersion to this instead of having to use each of the individual
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileMajorVersion">AssemblyFileMajorVersion</see>,
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileMinorVersion">AssemblyFileMinorVersion</see>,
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumber">AssemblyFileBuildNumber</see>, and
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevision">AssemblyFileRevision</see> properties.
                </para>
                <para>Note that the other four properties override this one. For example, If you
                set AssemblyFileVersion to "1.2.3.4" and then set AssemblyFileMinorVersion to 6, the resulting
                version will be "1.6.3.4".</para>
                <para>
                    This property is an input only. If you want to know what the final version
                    generated was, use the
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.MaxAssemblyFileVersion">MaxAssemblyFileVersion</see> output property
                    instead.
                </para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file the best way to specify
                this is to set the <em>AssemblyFileVersion</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileVersion&gt;1.2.3.4&lt;/AssemblyFileVersion&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.MaxAssemblyFileVersion"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumberType">
            <summary>
            The type of update to use when setting the <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumber">AssemblyFileBuildNumber</see> property.
            </summary>
            <remarks>
                <para>
                    The AssemblyFileBuildNumber can be set using several different methods. The
                    AssemblyFileBuildNumberType property is used to select the desired method. The
                    supported types are defined in the
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">IncrementMethod</see> enumeration.
                </para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file the default setting is
                DateFormat. To override this set the <em>AssemblyFileBuildNumberType</em>
                property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileBuildNumberType&gt;DateFormat&lt;/AssemblyFileBuildNumberType&gt;
            &lt;AssemblyFileBuildNumberFormat&gt;yyMMdd&lt;/AssemblyFileBuildNumberFormat&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumberFormat"/>
            <seealso cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevisionType">
            <summary>
            The type of update to use when setting the <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevision">AssemblyFileRevision</see> property.
            </summary>
            <remarks>
                <para>
                    The AssemblyFileRevision can be set using several different methods. The
                    AssemblyFileRevisionType property is used to select the desired method. The
                    supported types are defined in the
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">IncrementMethod</see> enumeration.
                </para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file the default setting is
                AutoIncrement. To override this set the <em>AssemblyFileRevisionType</em>
                property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileRevisionType&gt;AutoIncrement&lt;/AssemblyFileRevisionType&gt;
            &lt;AssemblyFileRevisionFormat&gt;00&lt;/AssemblyFileRevisionFormat&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevisionFormat"/>
            <seealso cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumberFormat">
            <summary>
            The format string to apply when converting the file build number to a text string.
            </summary>
            <remarks>
                <para>
                    Use this property to control the formatting of the file build number when it is
                    converted from a number to a string. This is particularly useful when used in
                    conjunction with the <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">DateFormat</see> or
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">AutoIncrement</see> methods of setting the file build
                    number. Any valid .NET formatting string can be specified.
                </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileBuildNumberType&gt;DateFormat&lt;/AssemblyFileBuildNumberType&gt;
            &lt;AssemblyFileBuildNumberFormat&gt;yyMMdd&lt;/AssemblyFileBuildNumberFormat&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileBuildNumberType"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyFileRevisionFormat">
            <summary>
            The format string to apply when converting the file revision to a text string.
            </summary>
            <remarks>
                <para>
                    Use this property to control the formatting of the file revision when it is
                    converted from a number to a string. This is particularly useful when used in
                    conjunction with the <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">DateFormat</see> or
                    <see cref="T:MSBuild.ExtensionPack.Framework.IncrementMethod">AutoIncrement</see> methods of setting the file
                    revision. Any valid .NET formatting string can be specified.
                </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyFileRevisionType&gt;AutoIncrement&lt;/AssemblyFileRevisionType&gt;
            &lt;AssemblyFileRevisionFormat&gt;00&lt;/AssemblyFileRevisionFormat&gt;
                </code>
            </example>
            <seealso cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyBuildNumberType"/>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.MaxAssemblyFileVersion">
            <summary>Returns the largest assembly file version set by the task.</summary>
            <remarks>
                <para>Use this property to find out the largest assembly file version that was generated
                by the task. If only one assemblyinfo.* file was specified as an input, this will
                be the resulting assembly file version for that file. If more than one assemblyinfo.*
                file was specified, this will be the largest build number generated.</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file this value is placed in
                <em>MaxAssemblyFileVersion</em> property after the UpdateAssemblyInfoFiles target is
                run.</para>
            </remarks>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyTitle">
            <summary>The title of the assembly.</summary>
            <remarks>
                <para>To change the
                <a href="http://msdn.microsoft.com/en-us/library/zf8bbayf(v=vs.100).aspx">
                assembly title</a> set this to the specific title you want. For example, for Visual
                Studio 2005 this is set to "Microsoft Visual Studio 2005".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyTitle</em> property.</para>
            </remarks>
            <example>
                <code lang="MSBuild" title="[New Example]">
            &lt;AssemblyTitle&gt;Microsoft Visual Studio 2005&lt;/AssemblyTitle&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyDescription">
            <summary>The description of the assembly.</summary>
            <remarks>
                <para>To change the
                <a href="http://msdn.microsoft.com/en-us/library/05bfs1hb(v=vs.100).aspx">
                assembly description</a> set this to the specific description you want. For
                example, for Visual Studio 2005 this is set to "Microsoft Visual Studio
                2005".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyDescription</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyDescription&gt;Microsoft Visual Studio 2005&lt;/AssemblyDescription&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyConfiguration">
            <summary>The configuration of the assembly.</summary>
            <remarks>
                <para>To change the
                <a href="http://msdn.microsoft.com/en-us/library/zf72c7kz(v=vs.100).aspx">
                assembly configuration text</a> set this to the specific configuration text you
                want.</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyConfiguration</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyConfiguration&gt;Debug&lt;/AssemblyConfiguration&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyCompany">
            <summary>The company that created the assembly.</summary>
            <remarks>
                <para>To change the
                <a href="http://msdn.microsoft.com/en-us/library/bw6s9761(v=vs.100).aspx">
                assembly company</a> set this to the specific company name you want. For example,
                for Visual Studio 2005 this is set to "Microsoft Corporation".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyCompany</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyCompany&gt;Microsoft Corporation&lt;/AssemblyCompany&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyProduct">
            <summary>The product name of the assembly.</summary>
            <remarks>
                <para>To change the
                <a href="http://msdn.microsoft.com/en-us/library/system.reflection.assemblyproductattribute.aspx">
                assembly company</a> set this to the specific company name you want. For example,
                for Visual Studio 2005 assemblies this is set to "Microsoft Visual Studio
                2005".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyProduct</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyProduct&gt;Microsoft Visual Studio 2005&lt;/AssemblyProduct&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyCopyright">
            <summary>The copyright information for the assembly.</summary>
            <remarks>
                <para>To change the
                <a href="http://msdn.microsoft.com/en-us/library/system.reflection.assemblycopyrightattribute(v=vs.100).aspx">
                assembly copyright</a> set this to the specific copyright text you want. For
                example, for Visual Studio 2005 assemblies this is set to " Microsoft Corporation.
                All rights reserved.".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyCopyright</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyCopyright&gt; Microsoft Corporation. All rights reserved.&lt;/AssemblyCopyright&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyTrademark">
            <summary>The trademark information for the assembly.</summary>
            <remarks>
                <para>To change the
                <a href="http://msdn.microsoft.com/en-us/library/hk2dbf64(v=vs.100).aspx">
                assembly trademark</a> set this to the specific trademark text you want.</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyTrademark</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyTrademark&gt;Microsoft Corporation&lt;/AssemblyTrademark&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyInformationalVersion">
            <summary>The AssemblyInformationalVersion for the assembly.</summary>
            <remarks>
                <para>The 
                <a href="http://msdn.microsoft.com/en-us/library/system.reflection.assemblyinformationalversionattribute(v=vs.100).aspx">
            AssemblyInformationalVersion </a> attribute attaches additional version information to an assembly. If this attribute is applied to an assembly, the string it specifies can be obtained at run time by using the Application.ProductVersion property. The string is also used in the path and registry key provided by the Application.UserAppDataPath property and the Application.UserAppDataRegistry property. If the AssemblyInformationalVersionAttribute is not applied to an assembly, the version number specified by the AssemblyVersionAttribute attribute is used instead.
            Although you can specify any text, a warning message appears on compilation if the string is not in the format used by the assembly version number, or if it is in that format but contains wildcard characters. This warning is harmless. </para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyInformationalVersion&gt;1.2.3.4&lt;/AssemblyInformationalVersion&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.UpdateAssemblyInformationalVersion">
            <summary>Set to true to update the AssemblyInformationalVersion.</summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyCulture">
            <summary>The culture information for the assembly.</summary>
            <remarks>
                <para>To change the
                <a href="http://msdn.microsoft.com/en-us/library/de8csy41(v=vs.100).aspx">
                assembly culture</a> set this to the specific culture text you want. For example,
                for the English satellite resources this is set to "en".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyCulture</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyCulture&gt;en&lt;/AssemblyCulture&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.Guid">
            <summary>The GUID for the assembly.</summary>
            <remarks>
                <para>To change the
                GUID for the assembly set this to the specific GUID you want.</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyGuid</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyGuid&gt;56269a04-c55a-4c5a-92ba-dfdb569bc708&lt;/AssemblyGuid&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyIncludeSigningInformation">
            <summary>Controls whether assembly signing information is replaced in the AssemblyInfo files.</summary>
            <remarks>
                <para>
                    This property controls whether the
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyDelaySign">AssemblyDelaySign</see>,
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyKeyFile">AssemblyKeyFile</see> and
                    <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyKeyName">AssemblyKeyName</see> properties are written out to
                    the assembly info files. In order for either of those three properties to
                    persist, AssemblyIncludeSigningInformation must be set to true.
                </para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyIncludeSigningInformation</em> property. By default this is set to
                <em>false</em>.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyIncludeSigningInformation&gt;true&lt;/AssemblyIncludeSigningInformation&gt;
            &lt;AssemblyDelaySign&gt;true&lt;/AssemblyDelaySign&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyDelaySign">
            <summary>Controls delay signing of the assembly.</summary>
            <remarks>
                <para>To enable delay signing of the assembly set this property to "true".</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyDelaySign</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyDelaySign&gt;false&lt;/AssemblyDelaySign&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyKeyFile">
            <summary>Specifies the key file used to sign the assembly.</summary>
            <remarks>
                <para>To specify the key file used to sign the compiled assembly set this to the file name of the key file.</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyKeyFile</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyKeyFile&gt;c:\key.snk&lt;/AssemblyKeyFile&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyKeyName">
            <summary>Specifies the name of a key container within the CSP containing the key pair used to generate a strong name.</summary>
            <remarks>
                <para>To specify the key used to sign the compiled assembly set this to the name of the key container.</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyKeyName</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyKeyName&gt;myContainer&lt;/AssemblyKeyName&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.ComVisible">
            <summary>Specifies whether the assembly is visible to COM.</summary>
            <remarks>
                <para>
                    To specify whether the assembly shoul be visible to COM set this to true and
                    provide a valid GUID using the <see cref="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.Guid">Guid</see>
                    property. The default value is <em>null</em>.
                </para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file set this using the
                <em>AssemblyComVisible</em> property.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;AssemblyComVisible&gt;myContainer&lt;/AssemblyComVisible&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.AssemblyInfoFiles">
            <summary>
            Specifies the list of AssemblyInfo files the task should update.
            </summary>
            <remarks>
                <para>Use the AssemblyInfoFile property to provide the task with the list of AssemblyInfo files that should
            be updated by the task. This can be a mix of VB, C# and J# AssemblyInfo Files.</para>
                <para>When using the MSBuild.ExtensionPack.VersionNumber.Targets file add items to the AssemblyInfoFiles item group
            to have them processed by the task.</para>
            </remarks>
            <example>
                <code lang="xml">
            &lt;!-- Add all AssemblyInfo files in all sub-directories to the list of
            files that should be processed by the task --&gt;
            &lt;ItemGroup&gt;
                &lt;AssemblyInfoFiles&gt;**\AssemblyInfo.*&lt;/AssemblyInfoFiles&gt;
            &lt;/ItemGroup&gt;
                </code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.UseUtc">
            <summary>
            Set to true to use UTC Date / Time in calculations. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.FirstDayOfWeek">
            <summary>
            Set the first day of the week for IncrementMethod.YearWeekDay. Defaults to Monday
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.PaddingCount">
            <summary>
            Sets the number of padding digits to use, e.g. 4
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.PaddingDigit">
            <summary>
            Sets the padding digit to use, e.g. 0
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.StartDate">
            <summary>
            Sets the start date to use when using IncrementMethod.ElapsedDays
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.AssemblyInfo.TextEncoding">
            <summary>
            The encoding to write the new file in. The default is UTF8
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.AssemblyInfo.Execute">
            <summary>
            Executes the AssemblyInfo task.
            </summary>
            <returns>True if the task was run sucecssfully. False if the task failed.</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.Gac">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddAssembly</i> (<b>Required: </b> AssemblyPath <b>Optional: </b>MachineName, RemoteAssemblyPath, UserName, UserPassword)</para>
            <para><i>CheckExists</i> (<b>Required: </b> AssemblyName <b>Optional: </b>MachineName)</para>
            <para><i>RemoveAssembly</i> (<b>Required: </b> AssemblyName <b>Optional: </b>MachineName, UserName, UserPassword)</para>
            <para><b>Remote Execution Support:</b> Partial (not for CheckExists)</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Add an assembly to the local cache -->
                    <MSBuild.ExtensionPack.Framework.Gac TaskAction="AddAssembly" AssemblyPath="c:\AnAssembly.dll"/>
                    <!-- Remove an assembly from the local cache. -->
                    <MSBuild.ExtensionPack.Framework.Gac TaskAction="RemoveAssembly" AssemblyName="AnAssembly Version=3.0.8000.0,PublicKeyToken=f251491100750aea"/>
                    <!-- Add an assembly to a remote machine cache. Note that gacutil.exe must exist on the remote server and be in it's Path environment variable -->
                    <MSBuild.ExtensionPack.Framework.Gac TaskAction="AddAssembly" AssemblyPath="c:\aaa.dll" RemoteAssemblyPath="\\ANEWVM\c$\apath\aaa.dll" MachineName="ANEWVM" UserName="Administrator" UserPassword="O123"/>
                    <!-- Remove an assembly from a remote machine cache -->
                    <MSBuild.ExtensionPack.Framework.Gac TaskAction="RemoveAssembly" AssemblyName="aaa, Version=1.0.0.0,PublicKeyToken=e24a7ed7109b7e39" MachineName="ANEWVM" UserName="Admministrator" UserPassword="O123"/>
                    <!-- Check whether an assembly exists in the local cache -->
                    <MSBuild.ExtensionPack.Framework.Gac TaskAction="CheckExists" AssemblyName="aaa, Version=1.0.0.0,PublicKeyToken=e24a7ed7109b7e39">
                        <Output PropertyName="Exists2" TaskParameter="Exists"/>
                    </MSBuild.ExtensionPack.Framework.Gac>
                    <Message Text="Exists: $(Exists2)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Gac.RemoteAssemblyPath">
            <summary>
            Sets the remote path of the assembly. Note that gacutil.exe must exist on the remote server and be in it's Path environment variable
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Gac.AssemblyPath">
            <summary>
            Sets the path to the assembly to be added the GAC
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Gac.AssemblyName">
            <summary>
            Sets the name of the assembly.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Gac.Force">
            <summary>
            Set to True to force the file to be gacc'ed (overwrite any existing)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Gac.Exists">
            <summary>
            Gets whether the assembly exists in the GAC
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.Gac.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.Gac.GetIAssemblyCache">
            <summary>
            Gets the IAssemblyCache interface.
            </summary>
            <returns>
            An IAssemblyCache interface.
            </returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.NativeMethods">
            <summary>
            GacNativeMethods
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.Assembly">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>GetInfo</i> (<b>Required: </b>NetAssembly <b>Output: </b>OutputItems)</para>
            <para><i>GetMethodInfo</i> (<b>Required: </b>NetAssembly, NetClass, <b>Output: </b>OutputItems)</para>
            <para><i>Invoke</i> (<b>Required: </b>NetAssembly <b>Optional: </b>NetMethod, NetArguments<b>Output: </b>ReturnValue)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <!-- define a set of arguments to use against an assembly -->
                        <Args Include="1">
                            <Type>int</Type>
                        </Args>
                        <Args Include="2">
                            <Type>int</Type>
                        </Args>
                        <ArgsM Include="2.9845">
                            <Type>decimal</Type>
                        </ArgsM>
                        <ArgsM Include="1.9845">
                            <Type>decimal</Type>
                        </ArgsM>
                        <ArgsF Include="C:\Demo1 - Please Delete">
                            <Type>string</Type>
                        </ArgsF>
                    </ItemGroup>
                    <!-- Get information on an assembly -->
                    <MSBuild.ExtensionPack.Framework.Assembly TaskAction="GetInfo" NetAssembly="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\BuildBinaries\MSBuild.ExtensionPack.dll">
                        <Output TaskParameter="OutputItems" ItemName="Info"/>
                    </MSBuild.ExtensionPack.Framework.Assembly>
                    <Message Text="Identity: %(Info.Identity)" />
                    <Message Text="FullName: %(Info.FullName)" />
                    <Message Text="PublicKeyToken: %(Info.PublicKeyToken)" />
                    <Message Text="Culture: %(Info.Culture)" />
                    <Message Text="CultureDisplayName: %(Info.CultureDisplayName)" />
                    <Message Text="FileVersion: %(Info.FileVersion)" />
                    <Message Text="AssemblyVersion: %(Info.AssemblyVersion)" />
                    <Message Text="AssemblyInformationalVersion: %(Info.AssemblyInformationalVersion)" />
                    <!-- This will cause a default constructor call only -->
                    <MSBuild.ExtensionPack.Framework.Assembly TaskAction="Invoke" NetClass="AssemblyDemo" NetAssembly="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\AssemblyDemo.dll"/>
                    <!--Invoke the assembly with the args collection of arguments -->
                    <MSBuild.ExtensionPack.Framework.Assembly TaskAction="Invoke" NetArguments="@(Args)" NetClass="AssemblyDemo" NetMethod="AddNumbers" NetAssembly="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\AssemblyDemo.dll">
                        <Output TaskParameter="Result" PropertyName="R"/>
                    </MSBuild.ExtensionPack.Framework.Assembly>
                    <Message Text="Result: $(R)"/>
                    <MSBuild.ExtensionPack.Framework.Assembly TaskAction="Invoke" NetArguments="@(ArgsM)" NetClass="AssemblyDemo" NetMethod="MultiplyNumbers" NetAssembly="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\AssemblyDemo.dll">
                        <Output TaskParameter="Result" PropertyName="R"/>
                    </MSBuild.ExtensionPack.Framework.Assembly>
                    <Message Text="Result: $(R)"/>
                    <MSBuild.ExtensionPack.Framework.Assembly TaskAction="Invoke" NetArguments="@(ArgsF)" NetClass="AssemblyDemo" NetMethod="CreateFolder" NetAssembly="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\AssemblyDemo.dll"/>
                    <MSBuild.ExtensionPack.Framework.Assembly TaskAction="Invoke" NetClass="AssemblyDemo" NetMethod="CreateDefaultFolder" NetAssembly="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\AssemblyDemo.dll"/>
                    <!-- Extract some information on the assembly interface -->
                    <MSBuild.ExtensionPack.Framework.Assembly TaskAction="GetMethodInfo" NetAssembly="C:\Projects\MSBuildExtensionPack\Solutions\Main3.5\SampleScratchpad\SampleBuildBinaries\AssemblyDemo.dll">
                        <Output TaskParameter="OutputItems" ItemName="TypeInfo"/>
                    </MSBuild.ExtensionPack.Framework.Assembly>
                    <Message Text="%(TypeInfo.Identity) %(TypeInfo.Parameters)" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Assembly.NetAssembly">
            <summary>
            Sets the name of the Assembly
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Assembly.NetClass">
            <summary>
            Sets the name of the Class
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Assembly.NetMethod">
            <summary>
            Sets the name of the Method. If this is not provided, a call is made to the default constructor.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Assembly.Result">
            <summary>
            Gets any Result that is returned
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Assembly.OutputItems">
            <summary>
            Gets the outputitems.
            <para/>For a call to GetMethodInfo, OutputItems provides the following metadata: Parameters
            <para/>For a call to GetInfo, OutputItems provides the following metadata: AssemblyVersion, FileVersion, Culture, CultureDisplayName, FullName, PublicKeyToken, AssemblyInformationalVersion
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Assembly.NetArguments">
            <summary>
            Sets the arguments to use for invoking a method. The arguments must be specified with a type, i.e.
               <Args Include="1">
                   <Type>int</Type>
               </Args>
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.Signing">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddSkipVerification</i> (<b>Required: </b> PublicKeyToken <b>Optional: </b> ToolPath)</para>
            <para><i>RemoveAllSkipVerification</i> (<b>Optional: </b> ToolPath)</para>
            <para><i>Sign</i> (<b>Required: </b> Assemblies, KeyFile <b>Optional: </b> ToolPath)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <AssemblyToSign Include="C:\AnAssembly.dll"/>
                    </ItemGroup>
                    <!-- Sign an assembly -->
                    <MSBuild.ExtensionPack.Framework.Signing TaskAction="Sign" ToolPath="C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bin" KeyFile="c:\aPrivateKey.snk" Assemblies="@(AssemblyToSign)"/>
                    <!-- Add SkipVerification for a public key -->
                    <MSBuild.ExtensionPack.Framework.Signing TaskAction="AddSkipVerification" ToolPath="C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bin" PublicKeyToken="119b85861667ee6a"/>
                    <!-- Remove all SkipVerification -->
                    <MSBuild.ExtensionPack.Framework.Signing TaskAction="RemoveAllSkipVerification" ToolPath="C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bin"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Signing.KeyFile">
            <summary>
            Sets the KeyFile to use when Signing the Assemblies
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Signing.ToolPath">
            <summary>
            Sets the folder path to sn.exe
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Signing.PublicKeyToken">
            <summary>
            Sets the PublicKeyToken for AddSkipVerification
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Signing.Assemblies">
            <summary>
            Sets the Item Collection of Assemblies to sign
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.DateAndTime">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddDays</i> (<b>Required: </b>Format, Value <b>Optional: </b>Start <b>Output: </b> Result)</para>
            <para><i>AddHours</i> (<b>Required: </b>Format, Value <b>Optional: </b>Start <b>Output: </b> Result)</para>
            <para><i>AddMilliseconds</i> (<b>Required: </b>Format, Value <b>Optional: </b>Start <b>Output: </b> Result)</para>
            <para><i>AddMinutes</i> (<b>Required: </b>Format, Value <b>Optional: </b>Start <b>Output: </b> Result)</para>
            <para><i>AddMonths</i> (<b>Required: </b>Format, Value <b>Optional: </b>Start <b>Output: </b> Result)</para>
            <para><i>AddSeconds</i> (<b>Required: </b>Format, Value <b>Optional: </b>Start <b>Output: </b> Result)</para>
            <para><i>AddTicks</i> (<b>Required: </b>Format, Value <b>Optional: </b>Start <b>Output: </b> Result)</para>
            <para><i>AddYears</i> (<b>Required: </b>Format, Value <b>Optional: </b>Start <b>Output: </b> Result)</para>
            <para><i>CheckBetween</i> (<b>Required: </b>Start, End <b>Optional:</b> UseUtc <b>Output: </b> BoolResult)</para>
            <para><i>CheckLater</i> (<b>Required: </b>Start <b>Optional:</b> UseUtc <b>Output: </b> BoolResult)</para>
            <para><i>Get</i> (<b>Required: </b>Format <b>Optional:</b> UseUtc <b>Output: </b> Result)</para>
            <para><i>GetElapsed</i> (<b>Required: </b>Format, Start <b>Optional: </b>End, UseUtc <b>Output: </b> Result)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <PropertyGroup>
                    <Start>1 Jan 2009</Start>
                </PropertyGroup>
                <Target Name="Default">
                    <!-- Let's Time how long it takes to perform a certain group of tasks -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="Get" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="MyStartTime"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="I'm sleeping..."/>
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="2000"/>
                    <Message Text="Sleep Over!"/>
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(MyStartTime)" Format="Seconds">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Slept For: $(DTResult)"/>
                    <!-- Get the elapsed days since the start date -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" Format="Days">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Days Since $(Start): $(DTResult)"/>
                    <!-- Get the elapsed minutes since the start date -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" Format="Minutes">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Minutes Since $(Start): $(DTResult)"/>
                    <!-- Get the elapsed hours since the start date -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" Format="Hours">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Hours Since $(Start): $(DTResult)"/>
                    <!-- Get the total elapsed time since the start date -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" Format="Total">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Total Elapsed Time Since $(Start): $(DTResult)"/>
                    <!-- Get the time in the specified format -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="Get" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Date / Time: $(DTResult)"/>
                    <!-- Get the UTC time in the specified format -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="Get" Format="dd MMM yy HH:mm:ss" UseUtc="true">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="UTC Date / Time: $(DTResult)"/>
                    <!-- Check if its later than a given time -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="CheckLater" Start="14:10">
                        <Output TaskParameter="BoolResult" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Later: $(DTResult)"/>
                    <!-- Check if the current time is between two times -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="CheckBetween" Start="14:10" End="14:25">
                        <Output TaskParameter="BoolResult" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Between: $(DTResult)"/>
                    <!-- Test Add time targets based on start time provided in AddTimeStart. -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="Get" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="AddTimeStart"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Add Time To: $(AddTimeStart)"/>
                    <!-- Add days -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddDays" Start="$(Start)" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Add 30 days: $(DTResult)"/>
                    <!-- Verify add days -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" End="$(DTResult)" Format="Days">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Days Since $(Start): $(DTResult)"/>
                    <!-- Add hours -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddHours" Start="$(Start)" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 hours from time: $(DTResult)"/>
                    <!-- Verify add hours -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" End="$(DTResult)" Format="Hours">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Hours Since $(Start): $(DTResult)"/>
                    <!-- Add milliseconds -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddMilliseconds" Start="$(Start)" Value="3000" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="3000 Millisecond from time: $(DTResult)"/>
                    <!-- Verify add milliseconds -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" End="$(DTResult)" Format="MilliSeconds">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Milliseconds Since $(Start): $(DTResult)"/>
                    <!-- Add minutes -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddMinutes" Start="$(Start)" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 minutes from time: $(DTResult)"/>
                    <!-- Verify add minutes -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" End="$(DTResult)" Format="Minutes">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Minutes Since $(Start): $(DTResult)"/>
                    <!-- Add months -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddMonths" Start="$(Start)" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 months from time: $(DTResult)"/>
                    <!-- Add seconds -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddSeconds" Start="$(Start)" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 Seconds from time: $(DTResult)"/>
                    <!-- Verify add seconds -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="GetElapsed" Start="$(Start)" End="$(DTResult)" Format="Seconds">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="Seconds Since $(Start): $(DTResult)"/>
                    <!-- Add ticks -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddTicks" Start="$(Start)" Value="3000" Format="dd MMM yy HH:mm:ss:fff">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="3000 ticks from time: $(DTResult)"/>
                    <!-- Add years -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddYears" Start="$(Start)" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 Years from time: $(DTResult)"/>
                    <!-- Test Add time targets based current time. -->
                    <!-- Add days -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddDays" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 days from time: $(DTResult)"/>
                    <!-- Add hours -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddHours" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 hours from time: $(DTResult)"/>
                    <!-- Add milliseconds -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddMilliseconds" Value="3000" Format="dd MMM yy HH:mm:ss:fff">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="3000 Millisecond from time: $(DTResult)"/>
                    <!-- Add minutes -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddMinutes" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 minutes from time: $(DTResult)"/>
                    <!-- Add months -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddMonths" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 months from time: $(DTResult)"/>
                    <!-- Add seconds -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddSeconds" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 Seconds from time: $(DTResult)"/>
                    <!-- Add ticks -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddTicks" Value="3000" Format="dd MMM yy HH:mm:ss:fff">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="3000 ticks from time: $(DTResult)"/>
                    <!-- Add years -->
                    <MSBuild.ExtensionPack.Framework.DateAndTime TaskAction="AddYears" Value="30" Format="dd MMM yy HH:mm:ss">
                        <Output TaskParameter="Result" PropertyName="DTResult"/>
                    </MSBuild.ExtensionPack.Framework.DateAndTime>
                    <Message Text="30 Years from time: $(DTResult)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DateAndTime.Start">
            <summary>
            The start time to use
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DateAndTime.End">
            <summary>
            The end time to use for GetElapsed. Default is DateTime.Now
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DateAndTime.Format">
            <summary>
            Format to apply to the Result. For GetTime, Format can be any valid DateTime format. For GetElapsed, Format can be Milliseconds, Seconds, Minutes, Hours, Days or Total. Total returns dd:hh:mm:ss
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DateAndTime.Value">
            <summary>
            Specifies the value to operate with
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DateAndTime.Result">
            <summary>
            The output Result
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DateAndTime.BoolResult">
            <summary>
            The output boolean result.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.DateAndTime.UseUtc">
            <summary>
            Set to true to use UTC Date / Time for the TaskAction. Default is false.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.Guid">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Create</i> (<b>Output: </b> GuidString, FormattedGuidString)</para>
            <para><i>CreateCrypto</i> (<b>Output: </b> GuidString, FormattedGuidString)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Create a new Guid and get the formatted and unformatted values -->
                    <MSBuild.ExtensionPack.Framework.Guid TaskAction="Create">
                        <Output TaskParameter="FormattedGuidString" PropertyName="FormattedGuidString1" />
                        <Output TaskParameter="GuidString" PropertyName="GuidStringItem" />
                    </MSBuild.ExtensionPack.Framework.Guid>
                    <Message Text="GuidStringItem: $(GuidStringItem)"/>
                    <Message Text="FormattedGuidString: $(FormattedGuidString1)"/>
                    <!-- Create a new cryptographically strong Guid and get the formatted and unformatted values -->
                    <MSBuild.ExtensionPack.Framework.Guid TaskAction="CreateCrypto">
                        <Output TaskParameter="FormattedGuidString" PropertyName="FormattedGuidString1" />
                        <Output TaskParameter="GuidString" PropertyName="GuidStringItem" />
                    </MSBuild.ExtensionPack.Framework.Guid>
                    <Message Text="GuidStringItem Crypto: $(GuidStringItem)"/>
                    <Message Text="FormattedGuidString Crypto: $(FormattedGuidString1)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Guid.FormattedGuidString">
            <summary>
            32 digits separated by hyphens: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Guid.GuidString">
            <summary>
            32 digits: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.Guid.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.Guid.Get">
            <summary>
            Gets this instance.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.Guid.GetCrypto">
            <summary>
            Gets the crypto.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.Thread">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Abort</i> (Warning: use only in exceptional circumstances to force an abort)</para>
            <para><i>Sleep</i> (<b>Required: </b> Timeout)</para>
            <para><i>SpinWait</i> (<b>Required: </b> Iterations)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Set a thread to sleep for a period -->
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="2000"/>
                    <!-- Set a thread to spinwait for a period -->
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="SpinWait" Iterations="1000000000"/>
                    <!-- Abort a thread. Only use in exceptional circumstances -->
                    <!--<MSBuild.ExtensionPack.Framework.Thread TaskAction="Abort"/>-->
                </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Thread.Timeout">
            <summary>
            Number of millseconds to sleep for
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.Thread.Iterations">
            <summary>
            Number of iterations to wait for
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.Thread.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.MSBuildHelper">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Escape</i> (<b>Required: </b> InputString <b>Output: </b> OutputString)</para>
            <para><i>FilterItems</i> (<b>Required: </b> InputItems1, RegexPattern <b>Optional:</b> Metadata <b>Output: </b> OutputItems)</para>
            <para><i>FilterItemsOnMetadata</i> (<b>Required: </b> InputItems1, InputItems2, Metadata <b>Optional: </b>Separator <b>Output: </b> OutputItems)</para>
            <para><i>GetCommonItems</i> (<b>Required: </b> InputItems1, InputItems2 <b>Output: </b> OutputItems, ItemCount)</para>
            <para><i>GetCurrentDirectory</i> (<b>Output: </b> CurrentDirectory)</para>
            <para><i>GetDistinctItems</i> (<b>Required: </b> InputItems1, InputItems2 <b>Output: </b> OutputItems, ItemCount)</para>
            <para><i>GetItem</i> (<b>Required: </b> InputItems1, Position<b>Output: </b> OutputItems)</para>
            <para><i>GetItemCount</i> (<b>Required: </b> InputItems1 <b>Output: </b> ItemCount)</para>
            <para><i>GetLastItem</i> (<b>Required: </b> InputItems1<b>Output: </b> OutputItems)</para>
            <para><i>ItemColToString</i> (<b>Required: </b> InputItems1 <b>Optional: </b>Separator <b>Output: </b>OutputString)</para>
            <para><i>RemoveDuplicateFiles</i> (<b>Required: </b> InputItems1 <b>Output: </b> OutputItems, ItemCount)</para>
            <para><i>Sort</i> (<b>Required: </b> InputItems1<b>Output: </b> OutputItems)</para>
            <para><i>StringToItemCol</i> (<b>Required: </b> ItemString, Separator <b>Output: </b> OutputItems, ItemCount)</para>
            <para><i>UpdateMetadata</i> (<b>Required: </b> InputItems1, InputItems2 <b>Output: </b> OutputItems)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default;UpdateMetadata;FilterItemsOnMetadata" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <!-- Define some collections to use in the samples-->
                        <Col1 Include="hello"/>
                        <Col1 Include="how"/>
                        <Col1 Include="are"/>
                        <Col2 Include="you"/>
                        <Col3 Include="hello"/>
                        <Col3 Include="bye"/>
                        <DuplicateFiles Include="C:\Demo\**\*"/>
                        <XXX Include="AA"/>
                        <XXX Include="AAB"/>
                        <XXX Include="ABA"/>
                        <XXX Include="AABA"/>
                        <XXX Include="BBAA"/>
                        <YYY Include="AA">
                            <Filter>CC</Filter>
                        </YYY>
                        <YYY Include="AA">
                            <Filter>CHJC</Filter>
                        </YYY>
                        <YYY Include="BB">
                            <Filter>CCDG</Filter>
                        </YYY>
                        <YYY Include="CC">
                            <Filter>CDC</Filter>
                        </YYY>
                        <YYY Include="DD">
                            <Filter>CCEE</Filter>
                        </YYY>
                    </ItemGroup>
                    <!-- Filter Items based on Name -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="@(XXX)" RegexPattern="^AA">
                        <Output TaskParameter="OutputItems" ItemName="filtered"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="filtered Items: %(filtered.Identity)"/>
                    <!-- Filter Items based on MetaData -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="@(YYY)" Metadata="Filter" RegexPattern="^CC">
                        <Output TaskParameter="OutputItems" ItemName="filteredbymeta"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="filteredbymeta Items: %(filteredbymeta.Identity)"/>
                    <!-- Convert an Item Collection into a string -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="ItemColToString" InputItems1="@(Col1)" Separator=" - ">
                        <Output TaskParameter="OutString" PropertyName="out"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="OutString: $(out)"/>
                    <!-- Escape a string with special MSBuild characters -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="Escape" InString="hello how;are *you">
                        <Output TaskParameter="OutString" PropertyName="out"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="OutString: $(out)"/>
                    <!-- Sort an ItemGroup alphabetically -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="Sort" InputItems1="@(Col1)">
                        <Output TaskParameter="OutputItems" ItemName="sorted"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="Sorted Items: %(sorted.Identity)"/>
                    <!-- Get a single item by position -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="GetItem" InputItems1="@(Col1)" Position="2">
                        <Output TaskParameter="OutputItems" ItemName="AnItem"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="Item: %(AnItem.Identity)"/>
                    <!-- Get the last item -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="GetLastItem" InputItems1="@(Col1)">
                        <Output TaskParameter="OutputItems" ItemName="LastItem"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="Last Item: %(LastItem.Identity)"/>
                    <!-- Get common items. Note that this can be accomplished without using a custom task. -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="GetCommonItems" InputItems1="@(Col1)" InputItems2="@(Col3)">
                        <Output TaskParameter="OutputItems" ItemName="comm"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="Common Items: %(comm.Identity)"/>
                    <!-- Get distinct items. Note that this can be accomplished without using a custom task. -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="GetDistinctItems" InputItems1="@(Col1)" InputItems2="@(Col3)">
                        <Output TaskParameter="OutputItems" ItemName="distinct"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="Distinct Items: %(distinct.Identity)"/>
                    <!-- Remove duplicate files. This can accomplish a large performance gain in some copy operations -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="RemoveDuplicateFiles" InputItems1="@(DuplicateFiles)">
                        <Output TaskParameter="OutputItems" ItemName="NewCol1"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="Full File List contains: %(DuplicateFiles.Identity)"/>
                    <Message Text="Removed Duplicates Contains: %(NewCol1.Identity)"/>
                    <!-- Get the number of items in a collection -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="GetItemCount" InputItems1="@(NewCol1)">
                        <Output TaskParameter="ItemCount" PropertyName="MyCount"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="$(MyCount)"/>
                    <!-- Convert a seperated list to an ItemGroup -->
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="StringToItemCol" ItemString="how,how,are,you" Separator=",">
                        <Output TaskParameter="OutputItems" ItemName="NewCol11"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                    <Message Text="String Item Collection contains: %(NewCol11.Identity)"/>
                </Target>
                <Target Name="UpdateMetadata">
                    <!-- This sample uses the UpdateMetadata TaskAction to update existing meatadata using that from another item -->
                    <ItemGroup>
                        <SolutionToBuild Include="$(BuildProjectFolderPath)\ChangeThisOne.sln">
                            <Meta1>OriginalValue</Meta1>
                        </SolutionToBuild>
                        <SolutionToBuild Include="$(BuildProjectFolderPath)\ChangeThisToo.sln">
                            <Meta1>OriginalValue</Meta1>
                            <Meta2>Mike</Meta2>
                        </SolutionToBuild>
                    </ItemGroup>
                    <Message Text="Before = %(SolutionToBuild.Identity) %(SolutionToBuild.Meta1) %(SolutionToBuild.Meta2)" />
                    <ItemGroup>
                        <ItemsToChange Include="@(SolutionToBuild)">
                            <Meta1>ChangedValue</Meta1>
                            <Meta2>Dave</Meta2>
                        </ItemsToChange>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="UpdateMetadata" InputItems1="@(SolutionToBuild)" InputItems2="@(ItemsToChange)">
                        <Output TaskParameter="OutputItems" ItemName="SolutionToBuildTemp" />
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper >
                    <ItemGroup>
                        <SolutionToBuild Remove="@(SolutionToBuild)"/>
                        <SolutionToBuild Include="@(SolutionToBuildTemp)"/>
                    </ItemGroup>
                    <Message Text="After  = %(SolutionToBuild.Identity) %(SolutionToBuild.Meta1) %(SolutionToBuild.Meta2)"/>
                </Target>
                <ItemGroup>
                    <MyItems Include="$(AssembliesPath)\Assembly1.dll">
                        <Roles>Role1</Roles>
                        <GAC>true</GAC>
                    </MyItems>
                    <MyItems Include="$(AssembliesPath)\Assembly2.dll">
                        <Roles>Role2</Roles>
                        <GAC>true</GAC>
                    </MyItems>
                    <MyItems Include="$(AssembliesPath)\Assembly2.dll">
                        <Roles>Role2</Roles>
                        <GAC>false</GAC>
                    </MyItems>
                    <Roles Include="Role2;Role1"/>
                </ItemGroup>
                <Target Name="FilterItemsOnMetadata" DependsOnTargets="GetWorkingSets">
                    <Message Text="1 = %(MyItemsWorkingSet.Identity) - %(MyItemsWorkingSet.GAC)"/>
                </Target>
                <Target Name="GetWorkingSets">
                    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItemsOnMetadata" InputItems1="@(MyItems)" InputItems2="@(Roles)" Separator=";" MetaData="Roles">
                        <Output TaskParameter="OutputItems" ItemName="MyItemsWorkingSet"/>
                    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.CurrentDirectory">
            <summary>
            Gets the current directory
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.Position">
            <summary>
            Sets the position of the Item to get
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.ItemString">
            <summary>
            Sets the string to convert to a Task Item
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.Separator">
            <summary>
            Sets the separator to use for splitting the ItemString when calling StringToItemCol. Also used in FilterItemsOnMetadata
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.InString">
            <summary>
            Sets the input string
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.Metadata">
            <summary>
            Sets the Metadata
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.OutString">
            <summary>
            Gets the output string
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.InputItems1">
            <summary>
            Sets InputItems1.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.InputItems2">
            <summary>
            Sets InputItems2.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.OutputItems">
            <summary>
            Gets the OutputItems.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.ItemCount">
            <summary>
            Gets the ItemCount.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.MSBuildHelper.RegexPattern">
            <summary>
            Sets the regex pattern.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Framework.TextString">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Compare</i> (<b>Required: </b> String1, String2, Comparison <b> Optional: </b> IgnoreCase <b>Output: </b>Result)</para>
            <para><i>EndsWith</i> (<b>Required: </b> String1, String2<b> Optional: </b> IgnoreCase <b>Output: </b>Result)</para>
            <para><i>Format</i> (<b>Required: </b> String1, Strings<b> Output: </b>NewString)</para>
            <para><i>GetLength</i> (<b>Required: </b> OldString<b> Output: </b> NewString)</para>
            <para><i>Insert</i> (<b>Required: </b> OldString, String1, StartIndex<b> Output: </b> NewString)</para>
            <para><i>PadLeft</i> (<b>Required: </b> OldString, String1 (1 char) <b> Optional: </b>Count <b>Output: </b> NewString)</para>
            <para><i>PadRight</i> (<b>Required: </b> OldString, String1 (1 char) <b> Optional: </b>Count <b>Output: </b> NewString)</para>
            <para><i>Remove</i> (<b>Required: </b> OldString, StartIndex <b> Optional: </b>Count <b> Output: </b> NewString)</para>
            <para><i>Replace</i> (<b>Required: </b> OldString, OldValue, NewValue <b> Output: </b> NewString)</para>
            <para><i>Split</i> (<b>Required: </b> String1, String2 <b> Optional: </b> StartIndex <b>Output: </b>Strings, NewString)</para>
            <para><i>StartsWith</i> (<b>Required: </b> String1, String2<b> Optional: </b> IgnoreCase <b>Output: </b>Result)</para>
            <para><i>Substring</i> (<b>Required: </b> OldString<b> Optional: </b> StartIndex, Count <b>Output: </b>NewString)</para>
            <para><i>ToLower</i> (<b>Required: </b> OldString<b> Output: </b> NewString)</para>
            <para><i>ToUpper</i> (<b>Required: </b> OldString<b> Output: </b> NewString)</para>
            <para><i>Trim</i> (<b>Required: </b> OldString<b> Output: </b> NewString)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Format a string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Format" String1="{0}.{1}.{2}.{3}" Strings="3;5;4;0">
                        <Output TaskParameter="NewString" PropertyName="val"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="Format Result: $(val)"/>
                    <!-- Split a string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Split" String1="Hello;how;are;you" String2=";">
                        <Output ItemName="out" TaskParameter="Strings"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: %(Out.Identity)"/>
                    <!-- Split another string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Split" String1="HelloMIKEhowMIKEareMIKeyou" String2="MIKE">
                        <Output ItemName="out" TaskParameter="Strings"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: %(Out.Identity)"/>
                    <!-- Uppercase a string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="ToUpper" OldString="helLo">
                        <Output PropertyName="out" TaskParameter="NewString"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(out)"/>
                    <!-- Lowercase a string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="ToLower" OldString="HellO">
                        <Output PropertyName="out" TaskParameter="NewString"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(out)"/>
                    <!-- PadLeft a string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="PadLeft" OldString="Hello" String1="A" Count="10">
                        <Output PropertyName="out" TaskParameter="NewString"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(out)"/>
                    <!-- PadRight a string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="PadRight" OldString="Hello" String1="A" Count="10">
                        <Output PropertyName="out" TaskParameter="NewString"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(out)"/>
                    <!-- Check whether a string starts with another string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="StartsWith" String1="Hello" String2="He">
                        <Output PropertyName="TheResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(TheResult)"/>
                    <!-- Check whether a string ends with another string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="EndsWith" String1="Hello" String2="Lo" IgnoreCase="false">
                        <Output PropertyName="TheResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(TheResult)"/>
                    <!-- Compare two strings to see whether they are equal -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Compare" String1="Hello" String2="Hello" Comparison="equals">
                        <Output PropertyName="TheResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(TheResult)"/>
                    <!-- Compare two strings to see whether they are equal -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Compare" String1="Hello" String2="Hallo" Comparison="equals">
                        <Output PropertyName="TheResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(TheResult)"/>
                    <!-- See whether one string is greater than another -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Compare" String1="Hello" String2="Hallo" Comparison="greaterthan">
                        <Output PropertyName="TheResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(TheResult)"/>
                    <!-- See whether one string is less than another -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Compare" String1="Hello" String2="Hallo" Comparison="lessthan">
                        <Output PropertyName="TheResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(TheResult)"/>
                    <!-- See whether a string contains another string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Compare" String1="Hello" String2="llo" Comparison="contains">
                        <Output PropertyName="TheResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(TheResult)"/>
                    <!-- Replace the contents of a string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Replace" OldString="Hello" OldValue="llo" NewValue="XYZ">
                        <Output PropertyName="out" TaskParameter="NewString"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(out)"/>
                    <!-- Substring the contents of a string -->
                    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Substring" OldString="Hello" StartIndex="1" Count="2">
                        <Output PropertyName="out" TaskParameter="NewString"/>
                    </MSBuild.ExtensionPack.Framework.TextString>
                    <Message Text="The Result: $(out)"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.StartIndex">
            <summary>
            Sets the start index for Remove
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.Count">
            <summary>
            Sets the count
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.Result">
            <summary>
            Gets a value indicating whether the result is true or false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.String1">
            <summary>
            Sets the string1.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.String2">
            <summary>
            Sets the string2.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.Comparison">
            <summary>
            Sets the Comparison. Supports 'GreaterThan', 'LessThan', 'GreaterThanOrEquals', 'LessThanOrEquals', 'Contains', 'StartsWith', 'EndsWith'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.IgnoreCase">
            <summary>
            Sets a value indicating whether [ignore case]. Default is true.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.OldString">
            <summary>
            Sets the old string.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.NewString">
            <summary>
            Gets the new string.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.OldValue">
            <summary>
            Sets the old value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Framework.TextString.NewValue">
            <summary>
            Sets the new value.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.TextString.InternalExecute">
            <summary>
            This is the main execute method that all tasks should implement
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Framework.TextString.Compare">
            <summary>
            Compares this instance.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.SqlServer.AnalysisServices">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>ScriptAlter</i> (<b>Required: </b>DatabaseItem, OutputFile)</para>
            <para><i>ScriptCreate</i> (<b>Required: </b>DatabaseItem, OutputFile)</para>
            <para><i>ScriptDelete</i> (<b>Required: </b>DatabaseItem, OutputFile)</para>
            <para><i>Execute</i> (<b>Required: </b>InputFile)</para>
            <para><i>Process</i> (<b>Required: </b>DatabaseItem <b>Optional: ProcessType</b>)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.AnalysisServices.DatabaseItem">
            <summary>
            Set the target database.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.AnalysisServices.OutputFile">
            <summary>
            Sets the OutputFile 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.AnalysisServices.InputFile">
            <summary>
            Sets the InputFile containing query to execute
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.AnalysisServices.ProcessType">
            <summary>
            Sets the ProcessType (enum Microsoft.AnalysisServices.ProcessType). Default is ProcessDefault.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.SqlServer.AnalysisServices.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.SqlServer.Database">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Attach</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>See notes on metadata for DatabaseItem)</para>
            <para><i>Backup</i> (<b>Required: </b>DatabaseItem, DataFilePath <b>Optional: </b>BackupAction, CompressionOption, Incremental, NotificationInterval, NoPooling, StatementTimeout, CopyOnly)</para>
            <para><i>CheckExists</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>NoPooling, StatementTimeout <b>Output:</b> Exists)</para>
            <para><i>Create</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>Collation, NoPooling, DataFilePath, LogName, LogFilePath, FileGroupName, StatementTimeout)</para>
            <para><i>Delete</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><i>DeleteBackupHistory</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><i>Detach</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>See notes on metadata for DatabaseItem)</para>
            <para><i>GetConnectionCount</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><i>GetInfo</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><i>Rename</i> (<b>Required: </b>DatabaseItem (NewName metadata) <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><i>Restore</i> (<b>Required: </b>DatabaseItem, DataFilePath <b>Optional: </b>ReplaceDatabase, NewDataFilePath, RestoreAction, Incremental, NotificationInterval, NoPooling, LogName, LogFilePath, PrimaryDataFileName, SecondaryDataFileName, SecondaryDataFilePath, StatementTimeout)</para>
            <para><i>Script</i> (<b>Required: </b>DatabaseItem, OutputFilePath <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><i>ScriptData</i> (<b>Required: DatabaseItem, OutputFilePath </b> <b>Optional: </b>ScriptDrops, ScriptSchema, NoPooling, StatementTimeout)</para>
            <para><i>SetOffline</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><i>SetOnline</i> (<b>Required: </b>DatabaseItem <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><i>VerifyBackup</i> (<b>Required: </b>DataFilePath <b>Optional: </b>NoPooling, StatementTimeout)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <Database Include="ADatabase">
                            <NewName>ADatabase2</NewName>
                        </Database>
                        <Database2 Include="ADatabase2">
                            <NewName>ADatabase</NewName>
                        </Database2>
                        <Database3 Include="ADatabase3">
                            <Owner></Owner>
                            <AttachOptions>1</AttachOptions>
                            <UpdateStatistics>true</UpdateStatistics>
                            <RemoveFulltextIndexFile>true</RemoveFulltextIndexFile>
                            <Files>C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\DATA\ADatabase3.mdf;C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\DATA\ADatabase3_log.LDF</Files>
                        </Database3>
                    </ItemGroup>
                    <!-- Create Database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Delete" DatabaseItem="@(Database3)" ContinueOnError="true"/>
                    <!-- Create Database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Create" DatabaseItem="@(Database3)"/>
                    <!-- Detach Database-->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Detach" DatabaseItem="@(Database3)"/>
                    <!-- Attach Database-->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Attach" DatabaseItem="@(Database3)"/>
                    <!-- Get information on a database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="GetInfo" DatabaseItem="ADatabase">
                        <Output TaskParameter="Information" ItemName="AllInfo"/>
                    </MSBuild.ExtensionPack.SqlServer.Database>
                    <!-- All the database information properties are available as metadata on the Infomation item -->
                    <Message Text="SpaceAvailable: %(AllInfo.SpaceAvailable)"/>
                    <!-- ScriptData for tables matching Acc* name -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="ScriptData" RegexPattern="Acc*" DatabaseItem="ADatabase" OutputFilePath="c:\ADatabase.sql"/>
                    <!-- Backup a database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Backup" DatabaseItem="ADatabase" DataFilePath="c:\a\ADatabase.bak"/>
                    <!-- Verify a database backup -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="VerifyBackup" DataFilePath="c:\a\ADatabase.bak"/>
                    <!-- Restore a database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Restore" DatabaseItem="ADatabase" DataFilePath="c:\a\ADatabase.bak"/>
                    <!-- Restore a database to a different location-->
                    <MSBuild.ExtensionPack.SqlServer.Database MachineName="Desktop\SqlServer" TaskAction="Restore" DatabaseItem="ADatabase" DataFilePath="c:\a\ADatabase.bak" NewDataFilePath="c:\k\ADatabase2.mdf" LogFilePath="c:\a\ADatabase2_log.LDF"/>
                    <!-- Create a database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Create" DatabaseItem="ADatabase2"/>
                    <!-- Create the database again, using Force to delete the existing database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Create" DatabaseItem="ADatabase2" Collation="Latin1_General_CI_AI" Force="true"/>
                    <!-- Check whether a database exists -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="CheckExists" DatabaseItem="ADatabase2">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.SqlServer.Database>
                    <Message Text="Database Exists: $(DoesExist)"/>
                    <!-- Delete a database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Delete" DatabaseItem="ADatabase2"/>
                    <!-- Check whether a database exists -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="CheckExists" DatabaseItem="ADatabase2">
                        <Output TaskParameter="Exists" PropertyName="DoesExist"/>
                    </MSBuild.ExtensionPack.SqlServer.Database>
                    <Message Text="Database Exists: $(DoesExist)"/>
                    <!-- Get the number of active connections to a database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="GetConnectionCount" DatabaseItem="ADatabase">
                        <Output TaskParameter="ConnectionCount" PropertyName="Count"/>
                    </MSBuild.ExtensionPack.SqlServer.Database>
                    <Message Text="Database ConnectionCount: $(Count)"/>
                    <!-- Delete the backup history for a database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="DeleteBackupHistory" DatabaseItem="ADatabase"/>
                    <!-- Set a database offline -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="SetOffline" DatabaseItem="ADatabase"/>
                    <!-- Set a database online -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="SetOnline" DatabaseItem="ADatabase"/>
                    <!-- Rename a database -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Rename" DatabaseItem="@(Database)"/>
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Rename" DatabaseItem="@(Database2)"/>
                    <!-- Script a database to file -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Script" DatabaseItem="ReportServer" OutputFilePath="c:\ADatabaseScript.sql"/>
                    <!-- Restore a database to a new Name -->
                    <MSBuild.ExtensionPack.SqlServer.Database TaskAction="Restore" MachineName="$(SqlServerName)" DatabaseItem="$(DatabaseName)" DataFilePath="$(DbDataFilePath)" PrimaryDataFileName="SomeDatabase" LogName="SomeDatabase_log" SecondaryDataFileName="SomeDatabase_CDC" NewDataFilePath="$(OSFilePath)$(DatabaseName).mdf" SecondaryDataFilePath="$(OSFilePath)$(DatabaseName)_CDC.ndf" LogFilePath="$(OSFilePath)\$(DatabaseName)_log.ldf" ReplaceDatabase="True" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.NoPooling">
            <summary>
            Set to true to create a NonPooledConnection to the server. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.ReplaceDatabase">
            <summary>
            A Boolean value that specifies whether a new image of the restored database will be created. If True, a new image of the database is created. The image is created regardless of the presence of an existing database with the same name. If False (default), a new image of the database is not created by the restore operation. The database targeted by the restore operation must exist on an instance of Microsoft SQL Server. 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.Incremental">
            <summary>
            Set to true to perform an Incremental backup. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.Force">
            <summary>
            Set to true to force the creation of a database if it already exists.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.DatabaseItem">
            <summary>
            Sets the database name. When using Attach, you can specify the following metadata: Owner, Files (semicolon delimited), AttachOptions (Default None). When using Detach, you can specify the following metadata: UpdateStatistics, RemoveFulltextIndexFile (both default to false). 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.CompressionOption">
            <summary>
            Sets the compression option for the backup. Supports On, Off and Default. Default is Default.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.PrimaryDataFileName">
            <summary>
            Sets the primary data file name.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.LogName">
            <summary>
            Sets the Log Name. Defaults DatabaseItem.ItemSpec + "_log"
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.RegexPattern">
            <summary>
            Sets the regex pattern.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.SecondaryDataFileName">
            <summary>
            Sets the secondary data file name. No default value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.CopyOnly">
            <summary>
            Sets whether the backup is a copy-only backup. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.ScriptDrops">
            <summary>
            Sets ScriptingOptions for ScriptData TaskAction
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.ScriptSchema">
            <summary>
            Sets ScriptingOptions for ScriptData TaskAction
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.Collation">
            <summary>
            Sets the collation of the database.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.BackupAction">
            <summary>
            Sets the type of backup action to perform. Supports Database, Files and Log. Default is Database
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.RestoreAction">
            <summary>
            Sets the type of restore action to perform. Supports Database, Files, Log, OnlineFiles, OnlinePage. Default is Database
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.NotificationInterval">
            <summary>
            Sets the PercentCompleteNotification interval. Defaults to 10.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.FileGroupName">
            <summary>
            Sets the FileGroupName. Defaults to PRIMARY
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.DataFilePath">
            <summary>
            Sets the DataFilePath.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.NewDataFilePath">
            <summary>
            Sets the NewDataFilePath.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.SecondaryDataFilePath">
            <summary>
            Sets the SecondaryDataFilePath.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.LogFilePath">
            <summary>
            Sets the LogFilePath.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.OutputFilePath">
            <summary>
            Sets the OutputFilePath.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.StatementTimeout">
            <summary>
            Sets the number of seconds before an operation times out. The default is not to specify this property on the connection.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.Exists">
            <summary>
            Gets whether the database exists
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.Information">
            <summary>
            Gets the Information TaskItem. Each available property is added as metadata.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Database.ConnectionCount">
            <summary>
            Gets the number of connections the database has open
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.SqlServer.Database.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.SqlServer.Server">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>GetConnectionCount</i> (<b>Optional: </b>NoPooling <b>Output: </b>ConnectionCount)</para>
            <para><i>GetInfo</i> (<b>Optional: </b>NoPooling <b>Output: </b>Information)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Get information for a server, not that this defaults to the default instance on the local server -->
                    <MSBuild.ExtensionPack.SqlServer.Server TaskAction="GetInfo">
                        <Output TaskParameter="Information" ItemName="AllInfo"/>
                    </MSBuild.ExtensionPack.SqlServer.Server>
                    <!-- All the server information properties are available as metadata on the Infomation item -->
                    <Message Text="PhysicalMemory: %(AllInfo.PhysicalMemory)"/>
                    <!-- Get all the active connections to the server -->
                    <MSBuild.ExtensionPack.SqlServer.Server TaskAction="GetConnectionCount">
                        <Output TaskParameter="ConnectionCount" PropertyName="Count"/>
                    </MSBuild.ExtensionPack.SqlServer.Server>
                    <Message Text="Server ConnectionCount: $(Count)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Server.NoPooling">
            <summary>
            Set to true to create a NonPooledConnection to the server. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Server.ConnectionCount">
            <summary>
            Gets the number of connections the server has open
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Server.Information">
            <summary>
            Gets the Information TaskItem. Each available property is added as metadata.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.SqlServer.Server.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.SqlServer.BuildDeploymentManifest">
            <summary>
            This Task can be used to translate SSIS projects (.dtproj  files) into an SSIS deployment manifest 
            <para />
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <PropertyGroup>
                        <OutputRoot>C:\a\</OutputRoot>
                    </PropertyGroup>
                    <ItemGroup>
                        <SSISProjectFile Include="C:\MyPackages.dtproj"/>
                        <SSISProject Include="@(SSISProjectFile)">
                            <OutputDirectory>$(OutputRoot)%(FileName)</OutputDirectory>
                        </SSISProject>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.SqlServer.BuildDeploymentManifest InputProject="@(SSISProject)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.BuildDeploymentManifest.InputProject">
            <summary>
            Each .dtproj is a separate item in an ItemGroup, but each item needs a custom OutputDirectory metadata value that specifies where the deployment manifest should be written and project files copied to
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.BuildDeploymentManifest.AllowConfigurationChanges">
            <summary>
            Set to true to show the Configure Package dialog box after copying files. Default is true.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.SqlServer.Extended.SqlScriptLoader">
            <summary>
            SqlScriptLoader
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.SqlServer.Extended.SqlScriptLoader.#ctor(System.IO.StreamReader,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlScriptLoader class
            </summary>
            <param name="reader">StreamReader</param>
            <param name="stripMultiLineComments">bool</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.SqlServer.Extended.SqlScriptLoader.ReadToEnd">
            <summary>
            ReadToEnd
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Extended.SqlCmdWrapper.StandardOutput">
            <summary>
            Gets the standard output.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Extended.SqlCmdWrapper.StandardError">
            <summary>
            Gets the standard error.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Extended.SqlCmdWrapper.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Extended.SqlCmdWrapper.WorkingDirectory">
            <summary>
            Sets the working directory.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Extended.SqlCmdWrapper.Executable">
            <summary>
            Sets the Executable.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.Extended.SqlCmdWrapper.Arguments">
            <summary>
            Sets the arguments.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.SqlServer.Extended.SqlCmdWrapper.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns>int</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.SqlServer.SqlExecute">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Execute</i> (<b>Required: </b> ConnectionString, Sql or Files <b>Optional:</b> CodePage, CommandTimeout, Parameters, Retry, UseTransaction, IgnoreScriptErrors, StripMultiLineComments <b>Output: </b> FailedScripts)</para>
            <para><i>ExecuteRawReader</i> (<b>Required: </b> ConnectionString, Sql <b>Optional:</b> CodePage, CommandTimeout, Parameters, Retry, UseTransaction, IgnoreScriptErrors <b>Output: </b> RawReaderResult, FailedScripts)</para>
            <para><i>ExecuteReader</i> (<b>Required: </b> ConnectionString, Sql <b>Optional:</b> CodePage, CommandTimeout, Parameters, Retry, UseTransaction, IgnoreScriptErrors <b>Output: </b> ReaderResult, FailedScripts)</para>
            <para><i>ExecuteScalar</i> (<b>Required: </b> ConnectionString, Sql <b>Optional:</b> CodePage, CommandTimeout, Parameters, Retry, UseTransaction, IgnoreScriptErrors <b>Output: </b> ScalarResult, FailedScripts)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <Files Include="C:\a\Proc1.sql"/>
                    <Files Include="C:\a\Proc2.sql"/>
                    <Files Include="C:\a\Proc3.sql"/>
                    <File2s Include="C:\a\SQLQuery1.sql"/>
                    <File2s Include="C:\a\SQLQuery2.sql"/>
                </ItemGroup>
                <Target Name="Default">
                    <!-- Execute SQL and return a scalar -->
                    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteScalar" UseTransaction="true" Sql="Select GETDATE()" ConnectionString="Data Source=desktop\Sql2008;Initial Catalog=;Integrated Security=True">
                        <Output PropertyName="ScResult" TaskParameter="ScalarResult"/>
                    </MSBuild.ExtensionPack.SqlServer.SqlExecute>
                    <Message Text="$(ScResult)"/>
                    <!-- Execute SQL and return the result in raw text form -->
                    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="Select * from sys.tables" ConnectionString="Data Source=desktop\Sql2008;Initial Catalog=;Integrated Security=True">
                        <Output PropertyName="RawResult" TaskParameter="RawReaderResult"/>
                    </MSBuild.ExtensionPack.SqlServer.SqlExecute>
                    <Message Text="$(RawResult)"/>
                    <!-- Execute SQL and return the result in an Item. Each column is available as metadata -->
                    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteReader" Sql="Select * from sys.tables" ConnectionString="Data Source=desktop\Sql2008;Initial Catalog=;Integrated Security=True">
                        <Output ItemName="RResult" TaskParameter="ReaderResult"/>
                    </MSBuild.ExtensionPack.SqlServer.SqlExecute>
                    <Message Text="%(RResult.Identity) - %(RResult.object_id)"/>
                    <!-- Execute some sql files -->
                    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" Retry="true" UseTransaction="true" Files="@(Files)" ConnectionString="Data Source=desktop\Sql2008;Initial Catalog=;Integrated Security=True"/>
                    <!-- Use Parameter substitution -->
                    <ItemGroup>
                        <SqlFiles Include="createLinkedServer.sql"/>
                        <SqlParameters Include="true">
                            <name>%24(LINKEDSERVER)</name>
                            <value>myserver\myinstance</value>
                        </SqlParameters>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="Execute" Files="@(SqlFiles)" ConnectionString="Data Source=desktop\Sql2008;Initial Catalog=;Integrated Security=True" Parameters="@(SqlParameters)" />
                </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.ConnectionString">
            <summary>
            Sets the connection string to use for executing the Sql or Files
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.CommandTimeout">
            <summary>
            Sets the timeout in seconds. Default is 30
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.CodePage">
            <summary>
            Allows setting encoding code page to be used. Default is System.Text.Encoding.Default
            All code pages are listed here: http://msdn.microsoft.com/en-us/library/system.text.encoding
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.Files">
            <summary>
            Sets the files to execute
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.Sql">
            <summary>
            Sets the Sql to execute
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.Parameters">
            <summary>
            Sets the parameters to substitute at execution time. These are CASE SENSITIVE.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.Retry">
            <summary>
            Specifies whether files should be re-executed if they initially fail
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.StripMultiLineComments">
            <summary>
            Specifies whether to parse out multi-line comments before executing. This can be handy if your comments contain GO statements. Please note that if your sql contains code with /* in it, then you should set this to false. Default is true.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.UseTransaction">
            <summary>
            Set to true to run the sql within a transaction
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.IgnoreScriptErrors">
            <summary>
            Ignore any script errors, i.e. continue executing any remaining scripts when an error is encountered.  Failed
            scripts will be returned in the FailedScripts output item.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.ScalarResult">
            <summary>
            Gets the scalar result
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.RawReaderResult">
            <summary>
            Gets the raw output from the reader
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.ReaderResult">
            <summary>
            Gets the output from a reader in an Item with metadata matching the names of columns. The first column returned will be used as the identity.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlExecute.FailedScripts">
            <summary>
            A list of failed scripts.  Each will have metadata item ErrorMessage set to the error encountered.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.SqlServer.SqlVersion">
            <summary>
            The SqlVersion task provides the ability to manage multiple build versions in a simple database table.
            <para />
            <b>Valid TaskActions are:</b>
            <para><i>GetVersion</i> (<b>Required: </b>BuildName, DatabaseName <b>Optional: </b>Delimiter, FieldToIncrement, PaddingCount, PaddingDigit <b>Output: </b>Build, Major, Minor, Revision, Version)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <remarks>
            <para/>
            The following TSql can be used to create the supported table structure:
            <para/>
            USE [YOURDATABASENAME]<para/>
            GO<para/>
            <para/>
            IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BuildNumbers]') AND type in (N'U'))<para/>
            DROP TABLE [dbo].[BuildNumbers];<para/>
            GO<para/>
            <para/>
            SET ANSI_NULLS ON;<para/>
            GO<para/>
            SET QUOTED_IDENTIFIER ON;<para/>
            GO<para/>
            SET ANSI_PADDING ON;<para/>
            GO<para/>
            <para/>
            CREATE TABLE [dbo].[BuildNumbers](<para/>
                [SequenceName] [varchar](50) NOT NULL,<para/>
                [Major] [int] NOT NULL,<para/>
                [Minor] [int] NOT NULL,<para/>
                [Build] [int] NOT NULL,<para/>
                [Increment] [int] NOT NULL,<para/>
             CONSTRAINT [PK_BuildNumbers_1] PRIMARY KEY CLUSTERED <para/>
            (<para/>
                [SequenceName] ASC<para/>
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]<para/>
            ) ON [PRIMARY];<para/>
            GO<para/>
            <para/>
            SET ANSI_PADDING OFF;<para/>
            GO<para/>
            <para/>
            <b>Valid TaskActions are:</b>
            <para><i>GetVersion</i> (<b>Required: </b> BuildName, DatabaseName <b>Optional:</b> FieldToIncrement, Delimiter, PaddingCount, PaddingDigit <b>Output: </b>Major, Minor, Build, Revision, Version)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </remarks>
            <example>
            <code lang="xml"><![CDATA[
            <Target Name="BuildNumberOverrideTarget">
                <PropertyGroup>
                    <FieldToIncrement Condition=" '$(IncrementalBuild)'=='true' ">4</FieldToIncrement>
                    <FieldToIncrement Condition=" '$(IncrementalBuild)'!='true' ">3</FieldToIncrement>
                </PropertyGroup>
                <!-- Get the latest build number without incrementing it -->
                <MSBuild.ExtensionPack.SqlServer.SqlVersion Taskaction="GetVersion" BuildName="V9 Production Build" DatabaseName="Mike">
                    <Output TaskParameter="Version" PropertyName="LatestVersion" />
                </MSBuild.ExtensionPack.SqlServer.SqlVersion>
                <Message Text="LatestVersion is: $(LatestVersion)"/>
                <!-- Get the latest build number and increment as necessary -->
                <MSBuild.ExtensionPack.SqlServer.SqlVersion Taskaction="GetVersion" BuildName="V9 Production Build" FieldToIncrement="$(FieldToIncrement)" DatabaseName="Mike">
                    <Output TaskParameter="Major" PropertyName="BuildMajor" />
                    <Output TaskParameter="Minor" PropertyName="BuildMinor" />
                    <Output TaskParameter="Build" PropertyName="BuildBuild" />
                    <Output TaskParameter="Revision" PropertyName="BuildRevision" />
                </MSBuild.ExtensionPack.SqlServer.SqlVersion>
                <!-- Override Team Build BuildNumber property -->
                <PropertyGroup>
                    <BuildNumber>$(BuildMajor).$(BuildMinor).$(BuildBuild).$(BuildRevision)</BuildNumber>
                </PropertyGroup>
                <Message Text="BuildNumber is: $(BuildNumber)"/>
                <!-- Export values so they can be seen by targets inside CoreCompile -->
                <PropertyGroup>
                    <CustomPropertiesForBuild>$(CustomPropertiesForBuild);BuildMajor=$(BuildMajor);BuildMinor=$(BuildMinor);BuildBuild=$(BuildBuild);BuildRevision=$(BuildRevision)</CustomPropertiesForBuild>
                </PropertyGroup>
                <!-- Get the latest build number without incrementing it -->
                <MSBuild.ExtensionPack.SqlServer.SqlVersion Taskaction="GetVersion" BuildName="V9 Production Build" DatabaseName="Mike">
                    <Output TaskParameter="Version" PropertyName="LatestVersion" />
                </MSBuild.ExtensionPack.SqlServer.SqlVersion>
                <Message Text="LatestVersion is: $(LatestVersion)"/>
            </Target>
            ]]></code>    
            </example>  
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.Delimiter">
            <summary>
            Sets the Delimiter to use in the version number. Default is .
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.PaddingCount">
            <summary>
            Sets the number of padding digits to use, e.g. 4
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.PaddingDigit">
            <summary>
            Sets the padding digit to use, e.g. 0
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.Version">
            <summary>
            Gets the full four part Version
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.BuildName">
            <summary>
            The name of the build number sequence to query
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.FieldToIncrement">
            <summary>
            Number indicating which field is to be incremented.
            0 = none (read out last number generated),
            1-4 = Major, Minor, Build, Increment.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.DatabaseName">
            <summary>
            The name of the database whcih contains the BuildNumber table
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.Major">
            <summary>
            Major component of build number
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.Minor">
            <summary>
            Minor component of build number
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.Build">
            <summary>
            Build component of build number
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlVersion.Revision">
            <summary>
            Revision component of build number
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.SqlServer.SqlCmd">
            <summary>
            Wraps the SQL Server command line executable SqlCmd.exe.
            <para />
            <b>Valid TaskActions are:</b>
            <para><i>Execute</i> (<b>Required: </b>CommandLineQuery or InputFiles  <b>Optional: </b>Database, DedicatedAdminConnection, DisableVariableSubstitution, EchoInput, EnableQuotedIdentifiers, Headers, LoginTimeout, LogOn, NewPassword, OutputFile, Password, QueryTimeout, RedirectStandardError, Server, SeverityLevel, SqlCmdPath, UnicodeOutput, UseClientRegionalSettings, Variables, Workstation)</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
             <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <InputFile Include="C:\File1.sql"/>
                    <InputFile Include="C:\File2.sql"/>
                    <InputFile Include="C:\File3.sql"/>
                </ItemGroup>
                <ItemGroup>
                    <Variable Include="DbName">
                        <Value>master</Value>
                    </Variable>
                </ItemGroup>
                <Target Name="Default">
                    <!-- Simple CommandLineQuery -->
                    <MSBuild.ExtensionPack.SqlServer.SqlCmd TaskAction="Execute" CommandLineQuery="SELECT @@VERSION;" />
                    <!-- Simple CommandLineQuery setting the Server and Database and outputing to a file -->
                    <MSBuild.ExtensionPack.SqlServer.SqlCmd TaskAction="Execute" Server="(local)" Database="@(DbName)" CommandLineQuery="SELECT @@VERSION;" OutputFile="C:\Output.txt"/>
                    <!-- Simple CommandLineQuery setting the Server and Database and running external files -->
                    <MSBuild.ExtensionPack.SqlServer.SqlCmd TaskAction="Execute" Server="(local)" Database="@(DbName)" InputFiles="@(InputFile)" />
                    <!-- Simple CommandLineQuery setting the Server and Database, running external files and using variable substition -->
                    <MSBuild.ExtensionPack.SqlServer.SqlCmd TaskAction="Execute" Server="(local)" Database="@(DbName)" InputFiles="@(InputFile)" Variables="@(Variable)" />
                </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="M:MSBuild.ExtensionPack.SqlServer.SqlCmd.#ctor">
            <summary>
            Initializes a new instance of the SqlCmd class
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.SqlCmdPath">
            <summary>
            Gets or sets the path to the sqlcmd.exe.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.LogOn">
            <summary>
            <para>Gets or sets the user login id. If neither the <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.LogOn"/> or <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Password"/> option is specified,
            <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> tries to connect by using Microsoft Windows Authentication mode. Authentication is
            based on the Windows account of the user who is running <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/>.</para>
            <para><b>Note:</b> The <i>OSQLUSER</i> environment variable is available for backwards compatibility. The <i>
            SQLCMDUSER</i> environment variable takes precedence over the <i>OSQLUSER</i> environment variable. This 
            means that <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> and <b>osql</b> can be used next to each other without interference.</para>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Password">
            <summary>
            <para>Gets or sets the user specified password. Passwords are case-sensitive. If the <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.LogOn"/> option
            is used and the <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Password"/> option is not used, and the <i>SQLCMDPASSWORD</i> environment variable
            has not been set, <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> uses the default password (NULL).</para>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.NewPassword">
            <summary>
            Changes the password for a user.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Server">
            <summary>
            <para>Gets or sets the name of the SQL Server to which to connect. It sets the <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> scripting variable 
            <i>SQLCMDSERVER</i>.</para>
            <para>Specify <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Server"/> to connect to the default instance of SQL Server on that server computer. Specify 
            <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Server"/> to connect to a named instance of SQL Server on that server computer. If no server computer is 
            specified, <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> connects to the default instance of SQL Server on the local computer. This option is 
            required when you execute sqlcmd from a remote computer on the network.</para>
            <para>If you do not specify a <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Server" /> when you start <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd" />, SQL Server checks for and 
            uses the <i>SQLCMDSERVER</i> environment variable.</para>
            <para><b>Note: </b>The <i>OSQLSERVER</i> environment variable has been kept for backward compatibility. The 
            <i>SQLCMDSERVER</i> environment variable takes precedence over the <i>OSQLSERVER</i> environment variable.</para>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Workstation">
            <summary>
            Gets or sets the workstation name. This option sets the <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> scripting variable <i>SQLCMDWORKSTATION</i>. 
            The workstation name is listed in the <b>hostname</b> column of the <b>sys.processes</b> catalog view and can be returned 
            using the stored procedure <b>sp_who</b>. If this option is not specified, the default is the current computer name. This name 
            can be used to identify different sqlcmd sessions.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Database">
            <summary>
            Gets or sets the name of the database to connect to. Issues a <code>USE</code> <i>db_name</i> statement when you start 
            <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/>. This option sets the <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> scripting variable <i>SQLCMDDBNAME</i>. This specifies 
            the initial database. The default is your login's default-database property. If the database does not exist, an error message 
            is generated and <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> exits.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.LoginTimeout">
            <summary>
            Gets or sets the number of seconds before the <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> login to the OLE DB provider times out when
            you try to connect to a server. The default login time-out for <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> is eight (8) seconds. The login time-
            out value must be a number between 0 and 65534. If the value supplied is not numeric or does not fall into that range,
            the <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> generates an error message. A value of 0 specifies the time-out to be indefinite.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.DedicatedAdminConnection">
            <summary>
            Gets or sets a flag that indicates if the connection to SQL Server should use a Dedicated Administrator Connection (DAC).
            This kind of connection is used to troubleshoot a server. This will only work with server computers that support DAC. If 
            DAC is not available, <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> generates an error message and then exits. For more information about DAC, see 
            <a href="http://msdn.microsoft.com/en-us/library/ms189595.aspx">Using a Dedicated Administrator Connection</a>.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.InputFiles">
            <summary>
            <para>Gets or sets the path to a file that contains a batch of SQL statements. Multiple files may be specified that will be read 
            and processed in order. Do not use any spaces between the file names. <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> will first check to see 
            whether all files exist. If one or more files do not exist, <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> will exit. The <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.InputFiles"/> and
            <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.CommandLineQuery"/> options are mutually exclusive.</para>
            Please note that if you provide a large number of files, you may exceed the maximum length of a command line (http://support.microsoft.com/kb/830473). It's recommended you make use of smaller batches if you encounter this issue.       
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.OutputFile">
            <summary>
            <para>Gets or sets the file that receives output from <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/>.</para>
            <para>If the <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.UnicodeOutput"/> option is specified, the <i>output file</i> is stored in Unicode format.
            If the file name is not valid, an error message is generated, and <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> exits. <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> does 
            not support concurrent writing of multiple <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> processes to the same file. The file output will be 
            corrupted or incorrect. This file will be created if it does not exist. A file of the same name from a prior <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> session 
            will be overwritten. The file specified here is not the stdout file. If a stdout file is specified this file will not be used.</para>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.UnicodeOutput">
            <summary>
            Gets or sets a flag that indicates if the <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.OutputFile"/> is stored in Unicode format, regardless of the 
            format of the <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.InputFiles"/>.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.RedirectStandardError">
            <summary>
            Gets or sets a flag that indicates whether or not to redirect the error message output to the screen 
            (<b>stderr</b>).If you do not specify a parameter or if you specify <b>0</b>, only error messages that 
            have a severity level of 11 or higher are redirected. If you specify <b>1</b>, all error message output including 
            PRINT is redirected. Has no effect if you use <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.OutputFile"/>. By default, messages are sent to <b>stdout</b>.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.UseClientRegionalSettings">
            <summary>
            Gets or sets a flag that indicates if the SQL Server OLE DB provider uses the client regional settings when it converts
            currency, and date and time data to character data. The default is server regional settings.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.CommandLineQuery">
            <summary>
            Gets or sets one or more command line queries to execute when <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> starts, but does not exit
            sqlcmd when the query has finished running.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.EchoInput">
            <summary>
            Gets or sets a flag that indicates if the input scripts are written to the standard output device (<b>stdout</b>).
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.EnableQuotedIdentifiers">
            <summary>
            Gets or sets a flag that sets the <code>SET QUOTED_IDENTIFIER</code> connection option to <code>ON</code>. By 
            default, it is set to <code>OFF</code>. For more information, see 
            <a href="http://msdn.microsoft.com/en-us/library/ms174393.aspx">SET QUOTED_IDENTIFIER (Transact-SQL).</a>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.SeverityLevel">
            <summary>
            Controls the severity level that is used to set the ERRORLEVEL variable. If the ERRORLEVEL reported is >= SeverityLevel then the task will log an error. 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.QueryTimeout">
            <summary>
            <para>Gets or sets the number of seconds before a command (or SQL statement) times out. This option sets the <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/>
            scripting variable <i>SQLCMDSTATTIMEOUT</i>. If a <i>time_out</i> value is not specified, the command does not time out. The 
            query <i>time_out</i> must be a number between 1 and 65535. If the value supplied is not numeric or does not fall into that range,
            <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> generates an error message.</para>
            <para><b>Note:</b> The actual time out value may vary from the specified <i>time_out</i> value by several seconds.</para>
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Variables">
            <summary>
            Creates a <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> scripting variable that can be used in a <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> script. You can specify multiple 
            <see cref="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Variables"/> and values. If there are errors in any of the values specified, <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> generates an error 
            message and then exits.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.DisableVariableSubstitution">
            <summary>
            Causes <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> to ignore scripting variables. This is useful when a script contains many INSERT statements that 
            may contain strings that have the same format as regular variables, such as $(variable_name).
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.SqlServer.SqlCmd.Headers">
            <summary>
            Specifies the number of rows to print between the column headings. The default is to print headings one time for each set of 
            query results. This option sets the sqlcmd scripting variable <i>SQLCMDHEADERS</i>. Use -1 to specify that headers must not be 
            printed. Any value that is not valid causes <see cref="T:MSBuild.ExtensionPack.SqlServer.SqlCmd"/> to generate an error message and then exit.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.NuGet.Packager">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Pack</i> (<b>Required: </b> Id, Version, Authors, Description, LibFiles, <b>Optional:</b> LicenseUrl, ProjectUrl, Title, ContentFiles, ToolsFiles, Owners, ReleaseNotes, CopyrightsText, IconUrl, RequireLicenseAgreement, Tags, Dependencies, References,  FrameworkAssemblies)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
               <ItemGroup>
                 <LibraryFiles Include="C:\Work\Community\MSBuildExtensionPack\Samples\Files\DotNet40\*.*">
                   <Framework>net40</Framework>
                 </LibraryFiles>
                 <LibraryFiles Include="C:\Work\Community\MSBuildExtensionPack\Samples\Files\DotNet35\*.*">
                   <Framework>net35</Framework>
                 </LibraryFiles>
                 <LibraryFiles Include="C:\Work\Community\MSBuildExtensionPack\Samples\Files\*.*" />
               </ItemGroup>
               <ItemGroup>
                 <Dependencies Include="log4net">
                   <Framework>net40</Framework>
                   <Version>1.2.10</Version>
                 </Dependencies>
               </ItemGroup>
               <ItemGroup>
                 <FrameworkAssemblies Include="System.Data.Entity">
                   <Framework>net40</Framework>
                 </FrameworkAssemblies>
                 <FrameworkAssemblies Include="System.ComponentModel.DataAnnotations">
                   <Framework>net40</Framework>
                 </FrameworkAssemblies>
               </ItemGroup>
               <Target Name="Default">
                <Packager TaskAction="Pack" Id="MSBuildExtensionPack" Description="MSBuildExtensionPack Sample NuGet Package" ProjectUrl="http:///www.nuget.org" LicenseUrl="http:///www.nuget.org" LibraryFiles="@(LibraryFiles)" OutputFile="MSBE.nupkg" Authors="Hamid Shahid" Owners="Hamid Shahid" Dependencies="@(Dependencies)" Version="1.0.0.0"/>
               </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.#ctor">
            <summary>
            Initializes a new instance of the Packager class.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Id">
            <summary>
            Gets or sets the Id of the NuGet package.
            is the package name that is shown when packages are listed using the Package Manager Console. 
            These are also used when installing a package using the Install-Package command within the Package Manager Console. 
            Package IDs may not contain any spaces or characters that are invalid in an URL.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Version">
            <summary>
            Gets or sets the version of the package. The version of the package, in a format like 1.2.3.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Title">
            <summary>
            Gets or sets the Title text of the NuGet package. The human-friendly title of the package displayed in the Manage NuGet Packages dialog.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.RequiresExplicitLicensing">
            <summary>
            Gets or sets the RequireLicense property which determines whether the NuGet package requires explicit license permissions or not.
            Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Authors">
            <summary>
            Gets or sets a comma-separated list of authors of the package code.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Owners">
            <summary>
            Gets or sets a comma-separated list of the package creators.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.LicenseUrl">
            <summary>
            Gets or sets a link to the license that the package is under.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.IconUrl">
            <summary>
            Gets or sets a URL for the image to use as the icon for the package in the Manage NuGet Packages dialog box.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.ProjectUrl">
            <summary>
            Gets or sets a URL for the home page of the package.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Description">
            <summary>
            Gets or sets the long description of the package.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.ReleaseNotes">
            <summary>
            Gets or sets the Release Notes of the NuGet package.
            This field only shows up when the package is an update to a previously installed package. 
            It is displayed where the Description would normally be displayed.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.CopyrightText">
            <summary>
            Gets or sets the Copyright text of the NuGet package.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Tags">
            <summary>
            Gets or sets the tags for the NuGet package. It should be a space-delimited list of tags.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Summary">
            <summary>
            Gets or sets the summary, a short description of the package.
            If specified, this shows up in the middle pane of the Add Package Dialog. 
            If not specified, a truncated version of the description is used instead.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Language">
            <summary>
            Gets or sets the locale ID for the package, such as en-us.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.NuGetExeDir">
            <summary>
            Gets or sets the directory containing the command line tool, NuGet.exe.
            If none is specified, will default to Resources directory of the currently executing assembly.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.OutputFile">
            <summary>
            Gets or sets the NuGet Output file
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.Dependencies">
            <summary>
            Gets or sets the Dependencies of the NuGet package. 
            An Example of ItemGroup passed to this property
            <ItemGroup>
                <Dependencies Include="log4net">
                    <Framework>net40</Framework>
                    <Version>1.2.10</Version>
                </Dependencies>
            </ItemGroup>     
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.References">
            <summary>
            Gets or sets the References files or the files which are added as reference by default. The collection should only contain the names of the files and not the path.        
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <references>
                <reference file="xunit.dll" />
                <reference file="xunit.extensions.dll" />
            </references>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.LibraryFiles">
            <summary>
            Gets or sets the Files to be included in the lib folder of the package. Assemblies (.dll files) in the lib folder are added as assembly references when the package is installed.
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <ItemGroup>
                <LibraryFiles Include="..\Community\MSBuildExtensionPack\Samples\Files\DotNet40\*.*">
                    <Framework>net40</Framework>
                </LibraryFiles>
                <LibraryFiles Include="..\Community\MSBuildExtensionPack\Samples\Files\DotNet35\*.*">
                    <Framework>net35</Framework>
                </LibraryFiles>
                <LibraryFiles Include="..\Community\MSBuildExtensionPack\Samples\Files\*.*" />
            </ItemGroup>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.ContentFiles">
            <summary>
            Gets or sets the Files to be included in the contents folder of the package. Files in the content folder are copied to the root of your application when the package is installed.
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <ItemGroup>
                <Content Include="..\Community\MSBuildExtensionPack\Samples\Files\readme.txt">
                    <Framework>net40</Framework>
                </Content>
                <Content Include="..\Community\MSBuildExtensionPack\Samples\Files\readme35.txt">
                    <Framework>net35</Framework>
                </Content>
                <Content Include="..\Community\MSBuildExtensionPack\Samples\Files\*.txt" />
            </ItemGroup>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.ToolsFiles">
            <summary>
            Gets or sets the Files to be included in the tools folder of the package. The tools folder of a package is for powershell scripts and programs accessible from the Package Manager Console.
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <ItemGroup>
                <Tools Include="..\Community\MSBuildExtensionPack\Samples\Files\init.ps1">
                    <Framework>net40</Framework>
                </Tools>
                <Tools Include="..\Community\MSBuildExtensionPack\Samples\Files\init35.ps1">
                    <Framework>net35</Framework>
                </Tools>
                <Tools Include="..\Community\MSBuildExtensionPack\Samples\Files\*.ps1" />
            </ItemGroup>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.NuGet.Packager.FrameworkAssemblies">
            <summary>
            Gets or sets the Framework Assemblies that the deployed package is dependant upon.
            </summary>
            <example>
            <ItemGroup>
                <FrameworkAssemblies Include="System.Data.Entity">
                    <Framework>net45</Framework>
                </FrameworkAssemblies>
                <FrameworkAssemblies Include="System.ComponentModel.DataAnnotations">
                    <Framework>net40</Framework>
                </FrameworkAssemblies>
            </ItemGroup>
            </example>
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.InternalExecute">
            <summary>   
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.IsValidVersionNumber(System.String)">
            <summary>
            Validates whether the given version number is the correct format or not
            </summary>
            <param name="version">The version number</param>
            <returns>True if the version number is valid. False otherwise</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.GenerateDependencyElement(System.Xml.Linq.XNamespace,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Generates the dependency Xml element for NuGet specification
            </summary>
            <param name="defaultNamespace">The xml namespace</param>
            <param name="taskItem">The Task item read from the project file</param>
            <returns>Dependency XElement</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.GenerateFrameworkAssemblyXElement(System.Xml.Linq.XNamespace,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Generates the Framework Xml element for NuGet specification
            </summary>
            <param name="defaultNamespace">The xml namespace</param>
            <param name="taskItem">The Task item read from the project file</param>
            <returns>Framework XElement</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.PopulateFolder(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ITaskItem})">
            <summary>
            The method populates the lib folder in the nuget package.
            </summary>
            <param name="folderName">The name of the folder to be created.</param>
            <param name="packageDirectoryPath">The directory path where the nuget specification message is created.</param>
            <param name="items">The item group to read the files.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.Pack">
            <summary>
            Generate NuGet specification, arrange files in folder structures and prepares the package.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.PreparePackage(System.String)">
            <summary>
            Generates the NuGet Package
            </summary>
            <param name="nugetSpecificationFile">The xml file containing NuGet package specification</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.NuGet.Packager.GenerateSpecification(System.String)">
            <summary>
            The method generates a valid Nuget specification file in the given directory
            </summary>
            <param name="directoryPath">The directory path where the nuget specification message is created.</param>                
            <returns>The complete path of the nuget specification file.</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Security.Extended.NativeMethods">
            <summary>
            Static class containing all PInvoke methods for WinInet API
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_ENUMALGS">
            <summary>
            PP_ENUMALGS
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_ENUMCONTAINERS">
            <summary>
            PP_ENUMCONTAINERS
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_IMPTYPE">
            <summary>
            PP_IMPTYPE
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_NAME">
            <summary>
            PP_NAME
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_VERSION">
            <summary>
            PP_VERSION
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_CONTAINER">
            <summary>
            PP_CONTAINER
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_CHANGE_PASSWORD">
            <summary>
            PP_CHANGE_PASSWORD
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_KEYSET_SEC_DESCR">
            <summary>
            PP_KEYSET_SEC_DESCR
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_CERTCHAIN">
            <summary>
            PP_CERTCHAIN
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_KEY_TYPE_SUBTYPE">
            <summary>
            PP_KEY_TYPE_SUBTYPE
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_PROVTYPE">
            <summary>
            PP_PROVTYPE
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_KEYSTORAGE">
            <summary>
            PP_KEYSTORAGE
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_APPLI_CERT">
            <summary>
            PP_APPLI_CERT
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_SYM_KEYSIZE">
            <summary>
            PP_SYM_KEYSIZE
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_SESSION_KEYSIZE">
            <summary>
            PP_SESSION_KEYSIZE
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_UI_PROMPT">
            <summary>
            PP_UI_PROMPT
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_ENUMALGS_EX">
            <summary>
            PP_ENUMALGS_EX
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_ENUMMANDROOTS">
            <summary>
            PP_ENUMMANDROOTS
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_ENUMELECTROOTS">
            <summary>
            PP_ENUMELECTROOTS
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_KEYSET_TYPE">
            <summary>
            PP_KEYSET_TYPE
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_ADMIN_PIN">
            <summary>
            PP_ADMIN_PIN
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_KEYEXCHANGE_PIN">
            <summary>
            PP_KEYEXCHANGE_PIN
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_SIGNATURE_PIN">
            <summary>
            PP_SIGNATURE_PIN
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_SIG_KEYSIZE_INC">
            <summary>
            PP_SIG_KEYSIZE_INC
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_KEYX_KEYSIZE_INC">
            <summary>
            PP_KEYX_KEYSIZE_INC
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_UNIQUE_CONTAINER">
            <summary>
            PP_UNIQUE_CONTAINER
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_SGC_INFO">
            <summary>
            PP_SGC_INFO
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_USE_HARDWARE_RNG">
            <summary>
            PP_USE_HARDWARE_RNG
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_KEYSPEC">
            <summary>
            PP_KEYSPEC
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_ENUMEX_SIGNING_PROT">
            <summary>
            PP_ENUMEX_SIGNING_PROT
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.Security.CryptGetProvParamType.PP_CRYPT_COUNT_KEY_USE">
            <summary>
            PP_CRYPT_COUNT_KEY_USE
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Security.Certificate">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Add</i> (<b>Required: </b>FileName <b>Optional: </b>MachineStore, CertPassword, Exportable, StoreName  <b>Output: </b>Thumbprint, SubjectDName)</para>
            <para><i>GetBase64EncodedCertificate</i> (<b>Required:  Thumbprint or SubjectDName</b> <b> Optional:</b> MachineStore, <b>Output:</b> Base64EncodedCertificate)</para>
            <para><i>GetExpiryDate</i> (<b>Required: </b>  Thumbprint or SubjectDName<b> Optional: MachineStore, </b> <b>Output:</b> CertificateExpiryDate)</para>
            <para><i>GetInfo</i> (<b>Required: </b> Thumbprint or SubjectDName <b> Optional:</b> MachineStore, StoreName <b>Output:</b> CertInfo)</para>
            <para><i>Remove</i> (<b>Required: </b>Thumbprint or SubjectDName <b>Optional: </b>MachineStore, StoreName)</para>
            <para><i>SetUserRights</i> (<b>Required: </b> AccountName, Thumbprint or SubjectDName<b> Optional:</b> MachineStore, <b>Output:</b> )</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Add a certificate -->
                    <MSBuild.ExtensionPack.Security.Certificate TaskAction="Add" FileName="C:\MyCertificate.cer" CertPassword="PASSW">
                        <Output TaskParameter="Thumbprint" PropertyName="TPrint"/>
                        <Output TaskParameter="SubjectDName" PropertyName="SName"/>
                    </MSBuild.ExtensionPack.Security.Certificate>
                    <Message Text="Thumbprint: $(TPrint)"/>
                    <Message Text="SubjectName: $(SName)"/>
                    <!-- Get Certificate Information -->
                    <MSBuild.ExtensionPack.Security.Certificate TaskAction="GetInfo" SubjectDName="$(SName)">
                        <Output TaskParameter="CertInfo" ItemName="ICertInfo" />
                    </MSBuild.ExtensionPack.Security.Certificate>
                    <Message Text="SubjectName: %(ICertInfo.SubjectName)"/>
                    <Message Text="SubjectNameOidValue: %(ICertInfo.SubjectNameOidValue)"/>
                    <Message Text="SerialNumber: %(ICertInfo.SerialNumber)"/>
                    <Message Text="Archived: %(ICertInfo.Archived)"/>
                    <Message Text="NotBefore: %(ICertInfo.NotBefore)"/>
                    <Message Text="NotAfter: %(ICertInfo.NotAfter)"/>
                    <Message Text="PrivateKeyFileName: %(ICertInfo.PrivateKeyFileName)"/>
                    <Message Text="FriendlyName: %(ICertInfo.FriendlyName)"/>
                    <Message Text="HasPrivateKey: %(ICertInfo.HasPrivateKey)"/>
                    <Message Text="Thumbprint: %(ICertInfo.Thumbprint)"/>
                    <Message Text="Version: %(ICertInfo.Version)"/>
                    <Message Text="PrivateKeyFileName: %(ICertInfo.PrivateKeyFileName)"/>
                    <Message Text="SignatureAlgorithm: %(ICertInfo.SignatureAlgorithm)"/>
                    <Message Text="IssuerName: %(ICertInfo.IssuerName)"/>
                    <Message Text="PrivateKeyFileName: %(ICertInfo.PrivateKeyFileName)"/>
                     <!-- Remove a certificate -->
                    <MSBuild.ExtensionPack.Security.Certificate TaskAction="Remove" Thumbprint="$(TPrint)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>    
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.MachineStore">
            <summary>
            Sets a value indicating whether to use the MachineStore. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.CertPassword">
            <summary>
            Sets the password for the pfx file from which the certificate is to be imported, defaults to blank
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.Exportable">
            <summary>
            Sets a value indicating whether the certificate is exportable.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.SubjectDName">
            <summary>
            The distinguished subject name of the certificate
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.Base64EncodedCertificate">
            <summary>
            Gets or sets the Base 64 Encoded string of the certificate
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.Thumbprint">
            <summary>
            Gets the thumbprint. Used to uniquely identify certificate in further tasks
            The thumprint  can be used in place of distinguished name to identify a certificate
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.DistinguishedName">
            <summary>
            Gets the Distinguished Name for the certificate used to to uniquely identify certificate in further tasks.
            The distinguished name can be used in place of thumbprint to identify a certificate
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.CertificateExpiryDate">
            <summary>
            Gets the Certificate Exprity Date.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.AccountName">
            <summary>
            The name of user or group that needs to be given rights on the given certificate
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.AccessRights">
            <summary>
            The access rights that need to be given.
            </summary>    
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.StoreName">
            <summary>
            Sets the name of the store. Defaults to My
            <para/>
            AddressBook:          The store for other users<br />
            AuthRoot:             The store for third-party certificate authorities<br />
            CertificateAuthority: The store for intermediate certificate authorities<br />
            Disallowed:           The store for revoked certificates<br />
            My:                   The store for personal certificates<br />
            Root:                 The store for trusted root certificate authorities <br />
            TrustedPeople:        The store for directly trusted people and resources<br />
            TrustedPublisher:     The store for directly trusted publishers<br />
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.FileName">
            <summary>
            Sets the name of the file.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Security.Certificate.CertInfo">
            <summary>
            Gets the item which contains the Certificate information. The following Metadata is populated: SubjectName, SignatureAlgorithm, SubjectNameOidValue, SerialNumber, Archived, NotAfter, NotBefore, FriendlyName, HasPrivateKey, Thumbprint, Version, PrivateKeyFileName, IssuerName
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Security.Certificate.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Security.Certificate.GetCertificateFromDistinguishedName(System.String,System.Security.Cryptography.X509Certificates.X509Store)">
            <summary>
            Extracts a certificate from the certificate Distinguished Name
            </summary>
            <param name="distinguishedName">The distinguished name of the certificate</param>
            <param name="certificateStore">The certificate store to look for certificate for.</param>        
            <returns>Returns the X509 certificate with the given DName</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Security.Certificate.GetCertificateFromThumbprint(System.String,System.Security.Cryptography.X509Certificates.X509Store)">
            <summary>
            Extracts a certificate from the certificate Thumbprint Name
            </summary>
            <param name="thumbprint">The thumbprint of the certificate to look for</param>
            <param name="certificateStore">The certificate store to look for certificate for.</param>        
            <returns>Returns the X509 certificate with the given DName</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Security.Certificate.FindKeyLocation(System.String)">
            <summary>
            The method search for the given Key Name in the Application Data folders and return the folder location 
            where the key file resides
            </summary>
            <param name="keyFileName">The name of the key file whose file location needs to be found</param>
            <returns>Returns the location of the given key file name</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Security.Certificate.GetCertificateExpiryDate">
            <summary>
            Retrieves the Expiry Date of the Certificate
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Security.Certificate.GetCertificateAsBase64String">
            <summary>
            Retrieves the Expiry Date of the Certificate
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Security.Certificate.SetUserAccessRights">
            <summary>
            Set the given user access rights on the given certificate to the given user
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.UI.Extended.ConfirmForm">
            <summary>
            PromptForm
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.UI.Extended.ConfirmForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.UI.Extended.ConfirmForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.UI.Extended.ConfirmForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.UI.Extended.PromptForm">
            <summary>
            PromptForm
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.UI.Extended.PromptForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.UI.Extended.PromptForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.UI.Extended.PromptForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.UI.Extended.MessageForm">
            <summary>
            MessageForm
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.UI.Extended.MessageForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.UI.Extended.MessageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MSBuild.ExtensionPack.UI.Extended.MessageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.UI.Console">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Beep</i> (<b>Optional: </b>Title, Repeat, Duration, Frequency, Interval)</para>
            <para><i>ReadLine</i> (<b>Optional: </b>Title, UserPrompt, ToLower, ToUpper <b>Output: </b> UserResponse)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Read input from the user -->
                    <MSBuild.ExtensionPack.UI.Console TaskAction="ReadLine">
                        <Output TaskParameter="UserResponse" PropertyName="Line"/>
                    </MSBuild.ExtensionPack.UI.Console>
                    <Message Text="User Typed: $(Line)"/>
                     <!-- Read input from the user and uppercase it all -->
                    <MSBuild.ExtensionPack.UI.Console TaskAction="ReadLine" UserPrompt="Please enter your password and press the [Enter] key" ToUpper="true">
                        <Output TaskParameter="UserResponse" PropertyName="Line"/>
                    </MSBuild.ExtensionPack.UI.Console>
                    <Message Text="User Typed: $(Line)"/>
                    <!-- Play some beeps -->
                    <MSBuild.ExtensionPack.UI.Console TaskAction="Beep" Repeat="3"/>
                    <MSBuild.ExtensionPack.UI.Console TaskAction="Beep" Repeat="4" Duration="500" Frequency="1000"/>
                    <MSBuild.ExtensionPack.UI.Console TaskAction="Beep" Repeat="3" Interval="2000"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.Interval">
            <summary>
            Sets the interval between beebs. Default is 10ms. Value must be between 10 and 5000
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.Duration">
            <summary>
            Sets the duration. Default is 333ms. Value must be between 1 and 10000
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.Repeat">
            <summary>
            Sets the repeat. Default is 1. Value must be between 1 and 20
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.Frequency">
            <summary>
            Sets the frequency. Default is 600hz. Value must be between 37 and 32767
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.Title">
            <summary>
            Set the title of the console
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.UserPrompt">
            <summary>
            The message to prompt the user for input. Default is "Please enter a response and press [Enter]:"
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.ToLower">
            <summary>
            Sets the UserResponse to lower text
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.ToUpper">
            <summary>
            Sets the UserResponse to upper text
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.HideInput">
            <summary>
            Set to true to hide the user input
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Console.UserResponse">
            <summary>
            Gets the response that the user typed
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.UI.Console.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.UI.Dialog">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Confirm</i> (<b>Required: </b>Text <b>Optional: </b>Title, Height, Width, ConfirmText, ErrorText, ErrorTitle, Button1Text, Button2Text, MaskText <b>Output: </b>ButtonClickedText, UserText)</para>
            <para><i>Show</i> (<b>Required: </b>Text <b>Optional: </b>Title, Height, Width, Button1Text, Button2Text, Button3Text, MessageColour, MessageBold <b>Output: </b>ButtonClickedText)</para>
            <para><i>Prompt</i> (<b>Required: </b>Text <b>Optional: </b>Title, Height, Width, Button1Text, Button2Text, Button3Text, MessageColour, MessageBold, MaskText <b>Output: </b>ButtonClickedText, UserText)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Confirm a Password -->
                    <MSBuild.ExtensionPack.UI.Dialog TaskAction="Confirm" Title="Confirmation Required" Button2Text="Cancel" Text="Enter Password" ConfirmText="Confirm Password" MaskText="true">
                        <Output TaskParameter="ButtonClickedText" PropertyName="Clicked"/>
                        <Output TaskParameter="UserText" PropertyName="Typed"/>
                    </MSBuild.ExtensionPack.UI.Dialog>
                    <Message Text="User Clicked: $(Clicked)"/>
                    <Message Text="User Typed: $(Typed)"/>
                    <!-- A simple message -->
                    <MSBuild.ExtensionPack.UI.Dialog TaskAction="Show" Text="Hello MSBuild">
                        <Output TaskParameter="ButtonClickedText" PropertyName="Clicked"/>
                    </MSBuild.ExtensionPack.UI.Dialog>
                    <Message Text="User Clicked: $(Clicked)"/>
                    <!-- A longer message with a few more attributes set -->
                    <MSBuild.ExtensionPack.UI.Dialog TaskAction="Show" Title="A Longer Message" MessageBold="True" Button2Text="Cancel" MessageColour="Green" Height="300" Width="600" Text="Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Cras vitae velit. Pellentesque malesuada diam eget sem. Praesent vestibulum. Donec egestas, quam at viverra volutpat, eros nulla gravida nisi, sed bibendum metus mauris ut diam. Aliquam interdum lacus nec quam. Etiam porta, elit sed pretium vestibulum, nisi dui condimentum enim, ut rhoncus ipsum leo nec est. Nullam congue velit id ligula. Sed imperdiet bibendum pede. In hac habitasse platea dictumst. Praesent eleifend, elit quis convallis aliquam, mi arcu feugiat sem, at blandit mauris nisi eget mauris.">
                        <Output TaskParameter="ButtonClickedText" PropertyName="Clicked"/>
                    </MSBuild.ExtensionPack.UI.Dialog>
                    <Message Text="User Clicked: $(Clicked)"/>
                    <!-- A simple prompt for input -->
                    <MSBuild.ExtensionPack.UI.Dialog TaskAction="Prompt" Title="Information Required" Button2Text="Cancel" Text="Please enter your Name below">
                        <Output TaskParameter="ButtonClickedText" PropertyName="Clicked"/>
                        <Output TaskParameter="UserText" PropertyName="Typed"/>
                    </MSBuild.ExtensionPack.UI.Dialog>
                    <Message Text="User Clicked: $(Clicked)"/>
                    <Message Text="User Typed: $(Typed)"/>
                    <!-- A prompt for password input -->
                    <MSBuild.ExtensionPack.UI.Dialog TaskAction="Prompt" Title="Sensitive Information Required" Button2Text="Cancel" Text="Please enter your Password below" MessageColour="Red" MaskText="true">
                        <Output TaskParameter="ButtonClickedText" PropertyName="Clicked"/>
                        <Output TaskParameter="UserText" PropertyName="Typed"/>
                    </MSBuild.ExtensionPack.UI.Dialog>
                    <Message Text="User Clicked: $(Clicked)"/>
                    <Message Text="User Typed: $(Typed)"/>
                </Target >
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.Height">
            <summary>
            Sets the height of the form. Default is 180
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.Width">
            <summary>
            Sets the width of the form. Default is 400
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.Button1Text">
            <summary>
            Sets the text for Button1. Default is 'Ok'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.Button2Text">
            <summary>
            Sets the text for Button2. If no text is set the button will not be displayed
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.Button3Text">
            <summary>
            Set the text for Button3. If no text is set the button will not be displayed
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.Text">
            <summary>
            Sets the text for the message that is displayed
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.ErrorTitle">
            <summary>
            Sets the title for the error messagebox if Confirm fails. Default is 'Error'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.ErrorText">
            <summary>
            Sets the text for the error messagebox if Confirm fails. Default is 'The supplied values do not match'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.ConfirmText">
            <summary>
            Sets the confirmation text for the message that is displayed. Default is 'Confirm' 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.Title">
            <summary>
            Sets the Title of the Dialog. Default is 'Message' for Show and Prompt, 'Confirm' for Confirm TaskAction
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.MessageColour">
            <summary>
            Sets the message text colour. Default is ControlText (usually black).
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.MessageBold">
            <summary>
            Sets whether the message text is bold. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.MaskText">
            <summary>
            Set to true to use the default password character to mask the user input
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.ButtonClickedText">
            <summary>
            Gets the text of the button that the user clicked
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.UI.Dialog.UserText">
            <summary>
            Gets the text that the user typed into the Prompt
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.UI.Dialog.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Utilities.SoftwareRegistryNative">
            <summary>
            For a 32 bit process, it returns the 32 bit HKLM\SOFTWARE registry key, otherwise the 64 bit one. May return null if
            it doesn't exist. Dispose of the return value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Utilities.SoftwareRegistryNonnative">
            <summary>
            For a 32 bit process, it returns the 64 bit HKLM\SOFTWARE registry key, otherwise the 32 bit one. May return null if
            it doesn't exist. Dispose of the return value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Utilities.SoftwareRegistry32Bit">
            <summary>
            Returns the 32 bit HKLM\SOFTWARE registry key. May return null if it doesn't exist. Dispose of the return value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Utilities.SoftwareRegistry64Bit">
            <summary>
            Returns the 64 bit HKLM\SOFTWARE registry key. May return null if it doesn't exist. Dispose of the return value.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Utilities.ExecuteWithLogging(Microsoft.Build.Utilities.TaskLoggingHelper,System.String,System.String,System.Boolean)">
            <summary>
            Executes a tool, logs standard error and a nonzero exit code as errors, returns the output and optionally logs that
            as well.
            </summary>
            <param name="log">used for logging</param>
            <param name="executable">the name of the executable</param>
            <param name="args">the command line arguments</param>
            <param name="logOutput">should we log the output in real time</param>
            <returns>the output of the tool</returns>
        </member>
        <member name="M:MSBuild.ExtensionPack.Utilities.CommandLineBuilder2.AppendFixedParameter(System.String)">
            <summary>
            Appends a fixed argument. This means that it is appended even if it is empty (as ""). It is quoted if necessary.
            </summary>
            <param name="value">the string to append</param>
        </member>
        <member name="T:MSBuild.ExtensionPack.VisualStudio.VC6">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Build</i> (<b>Required: </b> Projects <b>Optional: </b>MSDEVPath, StopOnError)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            <para/>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <!-- This uses $(Platform) and $(Configuration) for all projects in the .dsp file -->
                    <ProjectsToBuild Include="C:\MyVC6Project.dsp"/>
                    <!-- Uses supplied platform and configuration for all projects in the .dsp file -->
                    <ProjectsToBuild Include="C:\MyVC6Project2.dsp">
                        <Platform>Win32</Platform>
                        <Configuration>Debug</Configuration>
                    </ProjectsToBuild>
                    <!-- Uses $(Platform) and $(Configuration) for just the specified projects in the .dsw file -->
                    <ProjectsToBuild Include="C:\MyVC6Project3.dsw">
                        <Projects>Project1;Project2</Projects>
                    </ProjectsToBuild>
                </ItemGroup>
                <Target Name="Default">
                    <!-- Build a collection of VC6 projects -->
                    <MSBuild.ExtensionPack.VisualStudio.VC6 TaskAction="Build" Projects="@(ProjectsToBuild)"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VC6.MSDEVPath">
            <summary>
            Sets the MSDEV path. Default is [Program Files]\Microsoft Visual Studio\Common\MSDev98\Bin\MSDEV.EXE
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VC6.StopOnError">
            <summary>
            Set to true to stop processing when a project in the Projects collection fails to compile. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VC6.Projects">
            <summary>
            Sets the .dsp/.dsw projects to build.
            </summary>
            <remarks>
            An additional Projects metadata item may be specified for each project to indicate which workspace project(s)
            to build. If none is supplied, the special-case 'ALL' project name is used to inform MSDEV to build all 
            projects contained within the workspace/project.
            </remarks>
        </member>
        <member name="T:MSBuild.ExtensionPack.VisualStudio.VSDevEnv">
            <summary>
            This task provides a lightweight wrapper over Devenv.exe
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                  <MSBuild.ExtensionPack.VisualStudio.VSDevEnv FilePath="C:\a New Folder\WindowsFormsApplication1.sln" Configuration="Debug|Any CPU" Rebuild="true">
                    <Output TaskParameter="ExitCode" PropertyName="Exit" />
                  </MSBuild.ExtensionPack.VisualStudio.VSDevEnv>
                  <Message Text="ExitCode: $(Exit)"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VSDevEnv.FilePath">
            <summary>
            The Path to the solution or Project to build
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VSDevEnv.Configuration">
            <summary>
            The Configuration to Build.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VSDevEnv.Version">
            <summary>
            The version of Visual Studio to run, e.g. 8.0, 9.0, 10.0. Default is 9.0
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VSDevEnv.Rebuild">
            <summary>
            Specifies whether Clean and then build the solution or project with the specified configuration. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VSDevEnv.OutputFile">
            <summary>
            Specifies the File to log all output to. Defaults to the [Path.Dir]\Output\[Path.FileName].[Configuration].txt
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VSDevEnv.OutputFolder">
            <summary>
            Specifies the output folder to log to. Default is [Path.Dir]\Output\
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.VisualStudio.SourceSafe">
            <summary>
            Please be aware that this is a very light wrapper for ss.exe<para/>
            See the Command Line Reference on MSDN (http://msdn.microsoft.com/en-us/library/003ssz4z(VS.80).aspx) for full details.
            <para/>
            <b>Sample TaskActions are as follows, HOWEVER use the URL above for full guidance and additional TaskActions:</b>
            <para><i>Checkout</i> (<b>Required: </b> FilePath <b>Optional: </b>Arguments, Database, SSVersion, SuppressI)</para>
            <para><i>Checkin</i> (<b>Required: </b> FilePath <b>Optional: </b>Arguments, Database, SSVersion, SuppressI)</para>
            <para><i>Cloak</i> (<b>Required: </b> FilePath <b>Optional: </b>Arguments, Database, SSVersion, SuppressI)</para>
            <para><i>Create</i> (<b>Required: </b> FilePath <b>Optional: </b>Arguments, Database, SSVersion, SuppressI)</para>
            <para><i>Decloak</i> (<b>Required: </b> FilePath <b>Optional: </b>Arguments, Database, SSVersion, SuppressI)</para>
            <para><i>Delete</i> (<b>Required: </b> FilePath <b>Optional: </b>Arguments, Database, SSVersion, SuppressI)</para>
            <para><i>Destroy</i> (<b>Required: </b> FilePath <b>Optional: </b>Arguments, SSVersion, SuppressI)</para>
            <para><i>Get</i> (<b>Required: </b> FilePath <b>Optional: </b>Arguments, Database, SSVersion, SuppressI)</para>
            <para><b>Remote Execution Support:</b> No</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Perfrom various source control operations -->
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Get" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd" Arguments="-GLC:\Demo2 -R"/>
                    <!-- This will perform a recursive checkout to C:\Demo2 -->
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Checkout" Database="C:\SourceSafe" UserName="AUser" FilePath="$//DemoFtd/*.*" Arguments="-GLC:\Demo2 -R" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Checkin" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd/*.*" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Checkout" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd/dts.wav" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Checkin" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd/dts.wav" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Cloak" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Decloak" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Create" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd22" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Delete" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd22" Arguments="-I-Y" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.SourceSafe TaskAction="Destroy" Database="C:\SourceSafe\2005" UserName="AUser" FilePath="$//DemoFtd22" Arguments="-I-Y" ContinueOnError="true"/>
                </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.SourceSafe.FilePath">
            <summary>
            Sets the FilePath
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.SourceSafe.SuppressI">
            <summary>
            Set to true to prevent -I- being added to your custom Arguments. Default is False
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.SourceSafe.Arguments">
            <summary>
            Sets the Arguments. Defaults to -I- (Ignores all and tells the command not to ask for input under any circumstances) unless SuppressI is set to true. See http://msdn.microsoft.com/en-us/library/hsxzf2az(VS.80).aspx for full options.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.SourceSafe.SSVersion">
            <summary>
            Sets the SourceSafe version. Supports 2005 and 6d. Default is 2005
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.SourceSafe.Database">
            <summary>
            Sets the database.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.VisualStudio.SourceSafe.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.VisualStudio.AutoArg">
            <summary>
            AutoArg enumeration
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.VisualStudio.AutoArg.AcceptMerge">
            <summary>
            AcceptMerge
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.VisualStudio.AutoArg.AcceptTheirs">
            <summary>
            AcceptTheirs
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.VisualStudio.AutoArg.AcceptYours">
            <summary>
            AcceptYours
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.VisualStudio.AutoArg.OverwriteLocal">
            <summary>
            OverwriteLocal
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.VisualStudio.AutoArg.DeleteConflict">
            <summary>
            DeleteConflict
            </summary>
        </member>
        <member name="F:MSBuild.ExtensionPack.VisualStudio.AutoArg.AcceptYoursRenameTheirs">
            <summary>
            AcceptYoursRenameTheirs
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.VisualStudio.TfsSource">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Add</i> (<b>Required: </b>ItemPath or ItemCol <b>Optional: </b>Login, Server, Version, WorkingDirectory, Recursive <b>Output:</b> ExitCode)</para>
            <para><i>AddLabel</i> (<b>Required: </b>LabelName, ItemPath or ItemCol <b>Optional: </b>Login, Server, LabelScope, Recursive, VersionSpec, Comments<b>Output:</b> ExitCode)</para>
            <para><i>Checkin</i> (<b>Required: </b>ItemPath or ItemCol <b>Optional: </b>Login, Server, Comments, Notes, Version, WorkingDirectory, Recursive, Bypass <b>Output:</b> ExitCode)</para>
            <para><i>Checkout</i> (<b>Required: </b>ItemPath or ItemCol <b>Optional: </b>Login, Server, Version, WorkingDirectory, Recursive <b>Output:</b> ExitCode)</para>
            <para><i>Delete</i> (<b>Required: </b>ItemPath or ItemCol <b>Optional: </b>Login, Server, Version, WorkingDirectory, Recursive <b>Output:</b> ExitCode)</para>
            <para><i>DeleteLabel</i> (<b>Required: </b>LabelName<b>Optional: </b>Login, Server, LabelScope<b>Output:</b> ExitCode)</para>
            <para><i>Get</i> (<b>Required: </b>ItemPath or ItemCol <b>Optional: </b>Login, Server, Version, WorkingDirectory, Recursive, Force, Overwrite, All <b>Output:</b> ExitCode)</para>
            <para><i>GetChangeset</i> (<b>Required: </b>VersionSpec <b>Optional: </b>Login, Server, WorkingDirectory <b>Output:</b> ExitCode, Changeset)</para>
            <para><i>GetWorkingChangeset</i> (<b>Required: </b>ItemPath <b>Optional: </b>Login, Server, WorkingDirectory, Recursive <b>Output:</b> ExitCode, Changeset)</para>
            <para><i>Merge</i> (<b>Required: </b>ItemPath, Destination <b>Optional: </b>Login, Server, Recursive, VersionSpec, Version, Baseless, Force <b>Output:</b> ExitCode)</para>
            <para><i>Resolve</i> (<b>Required: </b>ItemPath or ItemCol <b>Optional: </b>Login, Server, Recursive, Version, Auto, NewName)</para>
            <para><i>GetPendingChanges</i> (<b>Required: </b>ItemPath <b>Optional: </b>Login, Server, Recursive, Version, User <b>Output: </b>PendingChanges, PendingChangesExist <b>Output:</b> ExitCode, PendingChangesExistItem)</para>
            <para><i>UndoCheckout</i> (<b>Required: </b>ItemPath or ItemCol <b>Optional: </b>Login, Server, Version, WorkingDirectory, Recursive <b>Output:</b> ExitCode)</para>
            <para><i>Undelete</i> (<b>Required: </b>ItemPath or ItemCol <b>Optional: </b>Login, Server, Version, WorkingDirectory, Recursive <b>Output:</b> ExitCode)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <FilesToAdd Include="C:\Projects\SpeedCMMI\Demo1\*"/>
                </ItemGroup>
                <Target Name="Default">
                    <!-- Check for pending changes -->
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="GetPendingChanges" ItemPath="$/AProject/APath" WorkingDirectory="C:\Projects\SpeedCMMI" User="$USERNAME">
                        <Output TaskParameter="PendingChanges" PropertyName="PendingChangesText" />
                        <Output TaskParameter="PendingChangesExist" PropertyName="DoChangesExist" />
                    </MSBuild.ExtensionPack.VisualStudio.TfsSource>
                    <Message Text="Pending Changes Report: $(PendingChangesText)"/>
                    <Message Text="Pending Changes Exist: $(DoChangesExist)"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="GetPendingChanges" ItemPath="$/AProject/ADifferentPath" WorkingDirectory="C:\Projects\SpeedCMMI">
                        <Output TaskParameter="PendingChangesExistItem" ItemName="PendingChangesExistItem3" />
                    </MSBuild.ExtensionPack.VisualStudio.TfsSource>
                    <!-- Get a summary of whether changes exist using the PendingChangesExistItem -->
                    <Message Text="%(PendingChangesExistItem3.Identity) = %(PendingChangesExistItem3.PendingChangesExist)"/>
                    <!-- Perfrom various other source control operations -->
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkout" ItemPath="C:\projects\SpeedCMMI\Demo1" Version="2008" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkin" ItemPath="C:\projects\SpeedCMMI\Demo1" WorkingDirectory="C:\projects\SpeedCMMI" Comments="Testing" Notes="Code reviewer=buildrobot" OverrideText="Justdoit" />
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Add" ItemPath="C:\projects\SpeedCMMI\Demo1" Version="2008" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkin" ItemCol="@(FilesToAdd)" WorkingDirectory="C:\projects\SpeedCMMI" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkout" ItemCol="@(FilesToAdd)" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="UndoCheckout" ItemCol="@(FilesToAdd)" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Delete" ItemCol="@(FilesToAdd)" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkin" ItemPath="C:\projects\SpeedCMMI\Demo1" WorkingDirectory="C:\projects\SpeedCMMI" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Undelete" ItemCol="@(FilesToAdd)" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkin" ItemCol="@(FilesToAdd)" WorkingDirectory="C:\projects\SpeedCMMI" ContinueOnError="true"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Get" ItemPath="C:\Projects\SpeedCMMI\Demo1" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Merge" ItemPath="C:\Projects\SpeedCMMI\Client2" Destination="C:\Projects\SpeedCMMI\Client" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkin" ItemPath="C:\projects\SpeedCMMI\Client" WorkingDirectory="C:\projects\SpeedCMMI" Comments="Testing" Notes="Code reviewer=buildrobot" OverrideText="Justdoit" />
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.VersionSpec">
            <summary>
            Sets the version spec for Get or changeset number for GetChangeset. If no VersionSpec is provided for GetChangeset, then /latest is used.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Auto">
            <summary>
            Resolves outstanding conflicts between different versions of specified items in the current workspace 
            AcceptMerge, AcceptTheirs, AcceptYours, OverwriteLocal, DeleteConflict, AcceptYoursRenameTheirs 
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.NewName">
            <summary>
            Used to resolve a name collision conflict. Can only be used in conjunction with AcceptMerge and AcceptYoursRenameTheirs. With AcceptMerge, /newname is only valid with conflicts that involve rename and/or undelete. If used, you must supply a new path.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.All">
            <summary>
            Forces all files to be retrieved, not just those that are out-of-date.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Bypass">
            <summary>
            Bypasses a gated check-in requirement. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Overwrite">
            <summary>
            Overwrites writable files that are not checked out.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Force">
            <summary>
            Implies All and Overwrite.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Baseless">
            <summary>
            Set to true to perform a merge without a basis version
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Server">
            <summary>
            Sets the TFS Server
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.ItemPath">
            <summary>
            Sets the files or folders to use.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.ItemCol">
            <summary>
            Sets the Item Collection of files to use.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.WorkingDirectory">
            <summary>
            Sets the working directory. If the directory is mapped in a workspace, then there is no need to specify the Server.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Version">
            <summary>
            Sets the version of Tfs. Default is 2013
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Comments">
            <summary>
            Sets the comments.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Destination">
            <summary>
            Sets the Destination for a Merge
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.LabelName">
            <summary>
            Sets the Label Name.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.LabelScope">
            <summary>
            Sets the Label Scope
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Notes">
            <summary>
            Sets the notes.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Login">
            <summary>
            Sets the Login. TFS2010 and greater only.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.User">
            <summary>
            Set the user
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Recursive">
            <summary>
            Sets whether the Tfs operation should be recursive. Default is true.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.PendingChanges">
            <summary>
            Gets the pending changes in the format '/Format:detailed'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.PendingChangesExist">
            <summary>
            Gets whether pending changes exist for a given ItemPath
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.Changeset">
            <summary>
            Gets the Changeset details
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.OverrideText">
            <summary>
            Lets you set text to override check-in policies
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.ExitCode">
            <summary>
            Gets the ExitCode
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSource.PendingChangesExistItem">
            <summary>
            Task Item stores whether changes exist for the given ItemPath. Identity stores the path, PendingChangesExist metadata stores boolean.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.VisualStudio.TfsSource.ExecuteCommand(System.String,System.String,System.String)">
            <summary>
            Executes the command.
            </summary>
            <param name="action">The action.</param>
            <param name="options">The options.</param>
            <param name="lastOptions">The last options.</param>
        </member>
        <member name="T:MSBuild.ExtensionPack.VisualStudio.TfsVersion">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>GetVersion</i> (<b>Required: </b> TfsBuildNumber, VersionFormat <b>Optional:</b>Major, Minor, BuildNumberRegex, PaddingCount, PaddingDigit, StartDate, DateFormat, BuildName, Delimiter, Build, Revision, VersionTemplateFormat, CombineBuildAndRevision, UseUtcDate<b>Output: </b>Version, Major, Minor, Build, Revision)</para>
            <para><b>Please Note:</b> The output of GetVersion should not be used to change the $(BuildNumber). For guidance, see: http://freetodev.spaces.live.com/blog/cns!EC3C8F2028D842D5!404.entry</para>
            <para><i>SetVersion</i> (<b>Required: </b> Version, Files <b>Optional:</b> TextEncoding, SetAssemblyVersion, AssemblyVersion, SetAssemblyFileVersion, ForceSetVersion</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <FilesToVersion Include="C:\Demo\CommonAssemblyInfo.cs"/>
                </ItemGroup>
                <Target Name="Default">
                    <!-- Get a version number based on the elapsed days since a given date -->
                    <MSBuild.ExtensionPack.VisualStudio.TfsVersion TaskAction="GetVersion" BuildName="YOURBUILD" TfsBuildNumber="YOURBUILD_20080703.1" VersionFormat="Elapsed" StartDate="17 Nov 1976" PaddingCount="4" PaddingDigit="1" Major="3" Minor="5">
                        <Output TaskParameter="Version" PropertyName="NewVersion" />
                    </MSBuild.ExtensionPack.VisualStudio.TfsVersion>
                    <Message Text="Elapsed Version is $(NewVersion)"/>
                    <!-- Get a version number based on the format of a given datetime -->
                    <MSBuild.ExtensionPack.VisualStudio.TfsVersion TaskAction="GetVersion" BuildName="YOURBUILD" TfsBuildNumber="YOURBUILD_20080703.1" VersionFormat="DateTime" DateFormat="MMdd" PaddingCount="5" PaddingDigit="1" Major="3" Minor="5">
                        <Output TaskParameter="Version" PropertyName="NewVersion" />
                    </MSBuild.ExtensionPack.VisualStudio.TfsVersion>
                    <Message Text="Date Version is $(NewVersion)"/>
                    <!-- Set the version in a collection of files -->
                    <MSBuild.ExtensionPack.VisualStudio.TfsVersion TaskAction="SetVersion" Files="%(FilesToVersion.Identity)" Version="$(NewVersion)"/>
                    <!-- Set the version in a collection of files, forcing AssemblyFileVersion to be inserted even if it was not present in the affected file -->
                    <MSBuild.ExtensionPack.VisualStudio.TfsVersion TaskAction="SetVersion" Files="%(FilesToVersion.Identity)" Version="$(NewVersion)" ForceSetVersion="true"/>
                    <!-- Get a version number based on the elapsed days since a given date and use a comma as the delimiter -->
                    <MSBuild.ExtensionPack.VisualStudio.TfsVersion TaskAction="GetVersion" Delimiter="," BuildName="YOURBUILD" TfsBuildNumber="YOURBUILD_20080703.1" VersionFormat="Elapsed" StartDate="17 Nov 1976" PaddingCount="4" PaddingDigit="1" Major="3" Minor="5">
                        <Output TaskParameter="Version" PropertyName="NewcppVersion" />
                    </MSBuild.ExtensionPack.VisualStudio.TfsVersion>
                    <Message Text="C++ Version: $(NewcppVersion)"/>
                </Target>
            </Project>
            ]]></code>    
            </example> 
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.BuildNumberRegex">
            <summary>
            Sets the BuildNumberRegex to determine the verison number from the BuildNumber when using in Synced mode. Default is \d+\.\d+\.\d+\.\d+
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.SetAssemblyVersion">
            <summary>
            Set to True to set the AssemblyVersion when calling SetVersion. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.UseUtcDate">
            <summary>
            Set to True to get the elapsed calculation using UTC Date Time. Default is false
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.SetAssemblyFileVersion">
            <summary>
            Set to True to set the AssemblyFileVersion when calling SetVersion. Default is true.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.ForceSetVersion">
            <summary>
            Set to true to force SetVersion action to update files that do not have AssemblyVersion | AssemblyFileVersion
            present.  Default is false.  ForceSetVersion does not affect AssemblyVersion when SetAssemblyVersion is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.TextEncoding">
            <summary>
            Sets the file encoding. Default is UTF8
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.Files">
            <summary>
            Sets the files to version
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.TfsBuildNumber">
            <summary>
            Sets the Tfs Build Number. Use $(BuildNumber) for Tfs 2005 and 2008.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.Version">
            <summary>
            Gets or Sets the Version
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.AssemblyVersion">
            <summary>
            Sets the AssemblyVersion. Defaults to Version if not set.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.PaddingCount">
            <summary>
            Sets the number of padding digits to use, e.g. 4
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.PaddingDigit">
            <summary>
            Sets the padding digit to use, e.g. 0
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.StartDate">
            <summary>
            Sets the start date to use when using VersionFormat="Elapsed"
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.DateFormat">
            <summary>
            Sets the date format to use when using VersionFormat="DateTime". e.g. MMdd
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.BuildName">
            <summary>
            Sets the name of the build. For Tfs 2005 use $(BuildType), for Tfs 2008 use $(BuildDefinition)
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.VersionFormat">
            <summary>
            Sets the Version Format. Valid VersionFormats are Elapsed, DateTime, Synced
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.Minor">
            <summary>
            Sets the minor version
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.Major">
            <summary>
            Sets the major version
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.Build">
            <summary>
            Gets or Sets the Build version
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.Revision">
            <summary>
            Gets or Sets the Revision version
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.CombineBuildAndRevision">
            <summary>
            Sets whether to make the revision a combination of the Build and Revision.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.Delimiter">
            <summary>
            Sets the Delimiter to use in the version number. Default is .
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsVersion.VersionTemplateFormat">
            <summary>
            Specify the format of the build number. A format for each part must be specified or left blank, e.g. "00.000.00.000", "..0000.0"
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.VisualStudio.TfsVersion.SetFileEncoding">
            <summary>
            Sets the file encoding.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Branch</i> (<b>Required: </b>OldItem, NewItem <b>Optional: </b>Version, WorkingDirectory, VersionSpec <b>Output:</b> ExitCode)</para>
            <para><i>Rename</i> (<b>Required: </b>OldItem, NewItem <b>Optional: </b>Version, WorkingDirectory, VersionSpec <b>Output:</b> ExitCode)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Perfrom various source administration operations -->
                    <MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin TaskAction="Branch" OldItem="C:\Projects\SpeedCMMI\Demo" NewItem="C:\Projects\SpeedCMMI\Demo1\B4" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkin" ItemPath="C:\Projects\SpeedCMMI" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Get" ItemPath="C:\Projects\SpeedCMMI" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin TaskAction="Rename" OldItem="C:\Projects\SpeedCMMI\Demo1\B4\VersionNumber.cs" NewItem="C:\Projects\SpeedCMMI\Demo1\B4\VersionNumberNew.cs" WorkingDirectory="C:\projects\SpeedCMMI"/>
                    <MSBuild.ExtensionPack.VisualStudio.TfsSource TaskAction="Checkin" ItemPath="C:\Projects\SpeedCMMI" WorkingDirectory="C:\projects\SpeedCMMI"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin.VersionSpec">
            <summary>
            Sets the version spec for Branch
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin.OldItem">
            <summary>
            ItemSpec to branch
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin.NewItem">
            <summary>
            ItemSpec to branch too
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin.WorkingDirectory">
            <summary>
            Sets the working directory.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin.Version">
            <summary>
            Sets the version of Tfs. Default is 2013
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin.ExitCode">
            <summary>
            Gets the ExitCode
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.VisualStudio.TfsSourceAdmin.ExecuteCommand(System.String,System.String)">
            <summary>
            Executes the command.
            </summary>
            <param name="action">The action.</param>
            <param name="options">The options.</param>
        </member>
        <member name="T:MSBuild.ExtensionPack.VisualStudio.VB6">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Build</i> (<b>Required: </b> Projects <b>Optional: </b>VB6Path, StopOnError)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            <para/>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <PropertyGroup>
                <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
              </PropertyGroup>
              <Import Project="$(TPath)"/>
              <ItemGroup>
                <ProjectsToBuild Include="C:\MyVB6Project.vbp">
                  <OutDir>c:\output</OutDir>
                  <!-- Note the special use of ChgPropVBP metadata to change project properties at Build Time -->
                  <ChgPropVBP>RevisionVer=4;CompatibleMode="0"</ChgPropVBP>
                </ProjectsToBuild>
                <ProjectsToBuild Include="C:\MyVB6Project2.vbp"/>
              </ItemGroup>
              <Target Name="Default">
                  <!-- Build a collection of VB6 projects -->
                <MSBuild.ExtensionPack.VisualStudio.VB6 TaskAction="Build" Projects="@(ProjectsToBuild)"/>
              </Target>
            </Project>
            ]]></code>
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VB6.VB6Path">
            <summary>
            Sets the VB6Path. Default is [Program Files]\Microsoft Visual Studio\VB98\VB6.exe
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VB6.StopOnError">
            <summary>
            Set to true to stop processing when a project in the Projects collection fails to compile. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VB6.IfModificationExists">
            <summary>
            Only build if any referenced source file is newer then the build output
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.VisualStudio.VB6.Projects">
            <summary>
            Sets the projects. Use an 'OutDir' metadata item to specify the output directory. The OutDir will be created if it does not exist.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Web.WebClient">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>DownloadFile</i> (<b>Required: </b> Url, FileName <b>Optional:</b>Proxy, BypassOnLocal<b>Output:</b> Response)</para>
            <para><i>OpenRead</i> (<b>Required: </b> Url <b>Optional:</b> DisplayToConsole, Proxy, BypassOnLocal<b>Output:</b> Data)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Download a File-->
                    <MSBuild.ExtensionPack.Web.WebClient TaskAction="DownloadFile" Url="http://hlstiw.bay.livefilestore.com/y1p7GhsJWeF4ig_Yb-8QXeA1bL0nY_MdOGaRQ3opRZS0YVvfshMfoZYe_cb1wSzPhx4nL_yidkG8Ji9msjRcTt0ew/Team%20Build%202008%20DeskSheet%202.0.pdf?download" FileName="C:\TFS Build 2008 DeskSheet.pdf"/>
                    <!-- Download a File using a proxy to connect to the remote server -->
                    <MSBuild.ExtensionPack.Web.WebClient TaskAction="DownloadFile" Url="http://download.sysinternals.com/Files/SysinternalsSuite.zip" FileName="MySysinternalsCopy.zip" Proxy="myproxy.fabrikam.com:8080"/>
                    <!-- Get the contents of a Url-->
                    <MSBuild.ExtensionPack.Web.WebClient TaskAction="OpenRead" Url="http://www.msbuildextensionpack.com">
                        <Output TaskParameter="Data" PropertyName="Out"/>
                    </MSBuild.ExtensionPack.Web.WebClient>
                    <Message Text="$(Out)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.WebClient.Url">
            <summary>
            Sets the name of the Url. Required.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.WebClient.Proxy">
            <summary>
            Sets the URI of a proxy
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.WebClient.FileName">
            <summary>
            Sets the name of the file
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.WebClient.DisplayToConsole">
            <summary>
            Sets whether to show Data to the console. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.WebClient.BypassOnLocal">
            <summary>
            Sets whether to bypass the proxy for local addresses. Default is false.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.WebClient.Data">
            <summary>
            Gets the Data downloaded.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Web.WebClient.InternalExecute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Web.HttpWebRequest">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>GetResponse</i> (<b>Required: </b> Url <b>Optional: </b>ContentType, Timeout, SkipSslCertificateValidation, Retries, RetryInterval, UseIntegratedAuthentication, UserName, UserPassword <b>Output:</b> Response, Status)</para>
            <para><i>Post</i> (<b>Required: </b> Url <b>Optional: </b>ContentType, Timeout, RequestContent, SkipSslCertificateValidation, Retries, RetryInterval, UseIntegratedAuthentication, UserName, UserPassword <b>Output:</b> Response, Status)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <MSBuild.ExtensionPack.Web.HttpWebRequest TaskAction="GetResponse" Url="http://www.freetodev.com">
                        <Output TaskParameter="Response" ItemName="ResponseDetail"/>
                        <Output TaskParameter="Status" PropertyName="ResponseStatus"/>
                    </MSBuild.ExtensionPack.Web.HttpWebRequest>
                    <Message Text="Status: $(ResponseStatus)"/>
                    <Message Text="StatusDescription: %(ResponseDetail.StatusDescription)"/>
                    <Message Text="StatusCode: %(ResponseDetail.StatusCode)"/>
                    <Message Text="CharacterSet: %(ResponseDetail.CharacterSet)"/>
                    <Message Text="ProtocolVersion: %(ResponseDetail.ProtocolVersion)"/>
                    <Message Text="ResponseUri: %(ResponseDetail.ResponseUri)"/>
                    <Message Text="Server: %(ResponseDetail.Server)"/>
                    <Message Text="ResponseText: %(ResponseDetail.ResponseText)"/>        
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.Timeout">
            <summary>
            Sets the number of milliseconds to wait before the request times out. The default value is 100,000 milliseconds (100 seconds).
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.Url">
            <summary>
            Sets the name of the AppPool. Required.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.SkipSslCertificateValidation">
            <summary>
            Set to true to accept all SSL certificates.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.Retries">
            <summary>
            The number of times the request should be retried before failing.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.RetryInterval">
            <summary>
            The number of milliseconds between retry attempts.  Default is 0.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.UseIntegratedAuthentication">
            <summary>
            The number of milliseconds between retry attempts.  Default is 0.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.Status">
            <summary>
            Contains the StatusDescription for successful requests. Contains the Status when encountering a WebException.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.ContentType">
            <summary>
            The content type of the request. By default, it is "application/x-www-form-urlencoded" (used for classic HTTP POST) for Post and null for GetResponse.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Web.HttpWebRequest.RequestContent">
            <summary>
            The content of the request. For classic HTTP POST, format is several [key]=[value] separated by "&amp;". Could be SOAP for example if ContentType is SOAP.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Web.HttpWebRequest.InternalExecute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Science.Maths">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Add</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><i>And</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><i>Or</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><i>Compare</i> (<b>Required: </b> P1, P2, Comparison <b>Output: </b>LogicalResult)</para>
            <para><i>Divide</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><i>Evaluate</i> (<b>Required: </b> Expression <b>Output: </b>Result)</para>
            <para><i>Multiply</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><i>Modulus</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><i>Subtract</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><i>LeftShift</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><i>RightShift</i> (<b>Required: </b> Numbers <b>Output: </b>Result)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Left Shift two numbers -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="LeftShift" Numbers="15;2">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="LeftShift: $(RResult)"/>
                    <!-- Right Shift two numbers -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="RightShift" Numbers="33;3">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="RightShift: $(RResult)"/>
                    <!-- Or two numbers -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Or" Numbers="5;4">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="Or: $(RResult)"/>
                    <!-- Mod two numbers -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Modulus" Numbers="10;3">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="Modulus: $(RResult)"/>
                    <!-- Evaluate a basic expression -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Evaluate" Expression="180 / (5 * (18/3)) + 2">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="Evaluate: $(RResult)"/>
                    <!-- Add numbers -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Add" Numbers="13;2;13;2;13;2;13;2">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="Add: $(RResult)"/>
                    <!-- Subtract numbers -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Subtract" Numbers="13;2">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="Subtract: $(RResult)"/>
                    <!-- Divide numbers -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Divide" Numbers="13;2.6235">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="Divide: $(RResult)"/>
                    <!-- Multiply numbers -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Multiply" Numbers="13;2">
                        <Output PropertyName="RResult" TaskParameter="Result"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="Multiply: $(RResult)"/>
                    <!-- Compare whether one number is less than the other -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Compare" P1="2" P2="60" Comparison="LessThan">
                        <Output PropertyName="RResult" TaskParameter="LogicalResult"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Message Text="Compare: $(RResult)"/>
                    <CallTarget Targets="Default2"/>
                </Target>
                <!-- Factorial calculation provided by Stephen Cleary -->
                <Target Name="Default2">
                    <PropertyGroup>
                        <Input>8</Input>
                    </PropertyGroup>
                    <!-- Argument error checking -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Compare" P1="$(Input)" P2="1" Comparison="LessThan">
                        <Output TaskParameter="LogicalResult" PropertyName="InputCheck"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <Error Condition="'$(InputCheck)' != 'False'" Text="Input cannot be less than 1."/>
                    <!-- Invoke the Factorial target with the current Input property -->
                    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Factorial" Properties="Input=$(Input)">
                        <Output TaskParameter="TargetOutputs" ItemName="FactorialResult"/>
                    </MSBuild>
                    <!-- Display the result -->
                    <Message Importance="high" Text="Result: @(FactorialResult)"/>
                </Target>
                <!-- The Factorial target uses FactorialCore to do the calculation, storing the result in FactorialResult -->
                <Target Name="Factorial" DependsOnTargets="FactorialCore" Outputs="$(FactorialResult)"/>
                <Target Name="FactorialCore">
                    <!-- If the input is 1, then the factorial is 1 -->
                    <PropertyGroup Condition="'$(Input)' == '1'">
                        <FactorialResult>1</FactorialResult>
                    </PropertyGroup>
                    <!-- If we don't know the result yet (i.e. the input is not 1) then calculate the factorial -->
                    <CallTarget Condition="'$(FactorialResult)' == ''" Targets="CalculateFactorial"/>
                </Target>
                <Target Name="CalculateFactorial">
                    <!-- Subtract 1 from $(Input) -->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Subtract" Numbers="$(Input);1">
                        <Output TaskParameter="Result" PropertyName="InputMinus1"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                    <!-- Determine the factorial of $(Input) - 1 -->
                    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Factorial" Properties="Input=$(InputMinus1)">
                        <Output TaskParameter="TargetOutputs" ItemName="SubResult"/>
                    </MSBuild>
                    <!-- Multiply !($(Input) - 1) by $(Input) to get the result-->
                    <MSBuild.ExtensionPack.Science.Maths TaskAction="Multiply" Numbers="@(SubResult);$(Input)">
                        <Output TaskParameter="Result" PropertyName="FactorialResult"/>
                    </MSBuild.ExtensionPack.Science.Maths>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Science.Maths.P1">
            <summary>
            Sets P1.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Science.Maths.LogicalResult">
            <summary>
            Gets the LogicalResult
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Science.Maths.P2">
            <summary>
            Sets P2.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Science.Maths.Comparison">
            <summary>
            Sets the Comparison. Supports 'GreaterThan', 'LessThan', 'GreaterThanOrEquals', 'LessThanOrEquals'
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Science.Maths.Numbers">
            <summary>
            A semicolon separated collection of numbers
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Science.Maths.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Science.Maths.Expression">
            <summary>
            Sets the expression.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Multimedia.Sound">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Play</i> (<b>Required: </b> SoundFile or SystemSound <b>Optional:</b> Repeat, Interval)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <!-- Play a bunch of sounds with various tones, repeats and durations-->
                    <MSBuild.ExtensionPack.Multimedia.Sound TaskAction="Play" SoundFile="C:\Windows\Media\notify.wav" Repeat="10"/>
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="500"/>
                    <MSBuild.ExtensionPack.Multimedia.Sound TaskAction="Play" SystemSound="Asterisk"/>
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="500"/>
                    <MSBuild.ExtensionPack.Multimedia.Sound TaskAction="Play" SystemSound="Beep"/>
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="500"/>
                    <MSBuild.ExtensionPack.Multimedia.Sound TaskAction="Play" SystemSound="Exclamation"/>
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="500"/>
                    <MSBuild.ExtensionPack.Multimedia.Sound TaskAction="Play" SystemSound="Hand"/>
                    <MSBuild.ExtensionPack.Framework.Thread TaskAction="Sleep" Timeout="500"/>
                    <MSBuild.ExtensionPack.Multimedia.Sound TaskAction="Play" SystemSound="Question"/>
                </Target>
            </Project>
            ]]></code>    
            </example>  
        </member>
        <member name="P:MSBuild.ExtensionPack.Multimedia.Sound.Interval">
            <summary>
            Sets the interval between beebs. Default is 10ms. Value must be between 10 and 5000
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Multimedia.Sound.Repeat">
            <summary>
            Sets the number of times to play the sound. Default is 1. Value must be between 1 and 20
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Multimedia.Sound.SoundFile">
            <summary>
            Sets the sound file to play
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Multimedia.Sound.SystemSound">
            <summary>
            Sets the SystemSound to play. Supports: Asterisk, Beep, Exclamation, Hand, Question. Does not support Repeat or Interval.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Multimedia.Sound.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.ShellWrapper">
            <summary>
            ShellExecute.
            </summary>
        </member>
        <member name="E:MSBuild.ExtensionPack.ShellWrapper.OutputDataReceived">
            <summary>
            A proxy for <see cref="E:System.Diagnostics.Process.OutputDataReceived"/>.
            </summary>
        </member>
        <member name="E:MSBuild.ExtensionPack.ShellWrapper.ErrorDataReceived">
            <summary>
            A proxy for <see cref="E:System.Diagnostics.Process.ErrorDataReceived"/>.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.ShellWrapper.StandardOutput">
            <summary>
            Gets the standard output.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.ShellWrapper.StandardError">
            <summary>
            Gets the standard error.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.ShellWrapper.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.ShellWrapper.WorkingDirectory">
            <summary>
            Sets the working directory.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.ShellWrapper.Executable">
            <summary>
            Sets the Executable.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.ShellWrapper.Arguments">
            <summary>
            Sets the arguments.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.ShellWrapper.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns>int</returns>
        </member>
        <member name="T:MSBuild.ExtensionPack.Management.Wmi">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Execute</i> (<b>Required: </b> Class, Namespace, Method <b> Optional: </b>Instance, MethodParameters <b>Output: </b>ReturnValue)</para>
            <para><i>Query</i> (<b>Required: </b> Class, Properties <b>Output: </b>Info (ITaskItem))</para>
            <para><b>Remote Execution Support:</b> Yes</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <WmiProps Include="BIOSVersion"/>
                        <WmiProps Include="CurrentLanguage"/>
                        <WmiProps Include="Manufacturer"/>
                        <WmiProps Include="SerialNumber"/>
                        <Wmi2Props Include="InstanceName"/>
                        <!-- Note that #~# is used as a separator-->
                        <WmiExec Include="Description#~#ExtensionPack Description"/>
                        <WmiExec2 Include="Name#~#MyNewShare;Path#~#C:\demo;Type#~#0"/>
                        <WmiExec3 Include="CommandLine#~#calc.exe"/>
                    </ItemGroup>
                    <!-- Start the Calculator -->
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Execute" Class="Win32_Process" Method="Create" MethodParameters="@(WmiExec3)" Namespace="\root\CIMV2">
                        <Output TaskParameter="ReturnValue" PropertyName="Rval2"/>
                    </MSBuild.ExtensionPack.Management.Wmi>
                    <Message Text="ReturnValue: $(Rval2)"/>
                    <!-- Create a share -->
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Execute" Class="Win32_Share" Method="Create" MethodParameters="@(WmiExec2)" Namespace="\root\CIMV2">
                        <Output TaskParameter="ReturnValue" PropertyName="Rval2"/>
                    </MSBuild.ExtensionPack.Management.Wmi>
                    <Message Text="ReturnValue: $(Rval2)"/>
                    <!-- Set share details using the WmiExec ItemGroup info-->
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Execute" Class="Win32_Share" Method="SetShareInfo" Instance="Name='ashare'" MethodParameters="@(WmiExec)" Namespace="\root\CIMV2">
                        <Output TaskParameter="ReturnValue" PropertyName="Rval"/>
                    </MSBuild.ExtensionPack.Management.Wmi>
                    <Message Text="ReturnValue: $(Rval)"/>
                    <!-- Stop a service -->
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Execute" Class="Win32_Service" Method="StopService" Instance="Name='SQLSERVERAGENT'" Namespace="\root\CIMV2">
                        <Output TaskParameter="ReturnValue" PropertyName="Rval2"/>
                    </MSBuild.ExtensionPack.Management.Wmi>
                    <Message Text="ReturnValue: $(Rval2)"/>
                    <!-- Query the Bios properties -->
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Query" Class="Win32_BIOS" Properties="@(WmiProps)" Namespace="\root\cimv2">
                        <Output TaskParameter="Info" ItemName="Info"/>
                    </MSBuild.ExtensionPack.Management.Wmi>
                    <Message Text="WMI Info for Win32_BIOS on %(Info.Identity): BIOSVersion=%(Info.BIOSVersion), CurrentLanguage=%(Info.CurrentLanguage), Manufacturer=%(Info.Manufacturer), SerialNumber=%(Info.SerialNumber)"/>
                    <!-- Query the server settings properties -->
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Query" Class="ServerSettings" Properties="@(Wmi2Props)" Namespace="\root\Microsoft\SqlServer\ComputerManagement">
                        <Output TaskParameter="Info" ItemName="Info2"/>
                    </MSBuild.ExtensionPack.Management.Wmi>
                    <Message Text="WMI Info for ServerSettings on %(Info2.Identity): InstanceName=%(Info2.InstanceName)"/>
                    <!-- Query a remote server -->
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Query" MachineName="AREMOTESERVER" UserName="ADOMAIN\AUSERNAME" UserPassword="APASSWORD" Class="Win32_BIOS" Properties="@(WmiProps)" Namespace="\root\cimv2">
                        <Output TaskParameter="Info" ItemName="Info2"/>
                    </MSBuild.ExtensionPack.Management.Wmi>
                    <Message Text="WMI Info for %(Info2.Identity): BIOSVersion=%(Info2.BIOSVersion), CurrentLanguage=%(Info2.CurrentLanguage), Manufacturer=%(Info2.Manufacturer), SerialNumber=%(Info2.SerialNumber)"/>
                    <!-- Let's stop Paint.net -->
                    <ItemGroup>
                        <WmiProps2 Include="Name"/>
                        <WmiProps2 Include="ProcessID"/>
                    </ItemGroup>
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Query" Class="Win32_Process WHERE Name='paintdotnet.exe'" Namespace="\root\CIMV2" Properties="@(WmiProps2)" MachineName="192.168.0.6">
                        <Output TaskParameter="Info" ItemName="Info"/>
                    </MSBuild.ExtensionPack.Management.Wmi>
                    <Message Text="WMI Info for Win32_Processes: Name: %(Info.Name), ProcessID: %(Info.ProcessID)"/>
                    <Message Text="Stopping Paint.NET" Condition="%(Info.ProcessID) != ''"/>
                    <MSBuild.ExtensionPack.Management.Wmi TaskAction="Execute" Class="Win32_Process" Method="Terminate" Namespace="\root\CIMV2" Instance="Handle=%(Info.ProcessID)" MachineName="192.168.0.6" Condition="%(Info.ProcessID) != ''"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Management.Wmi.Namespace">
            <summary>
            Sets the namespace.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Management.Wmi.Info">
            <summary>
            Gets the WMI info.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Management.Wmi.Class">
            <summary>
            Sets the WMI class.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Management.Wmi.ReturnValue">
            <summary>
            Gets the ReturnValue for Execute
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Management.Wmi.Method">
            <summary>
            Sets the Method used in Execute
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Management.Wmi.MethodParameters">
            <summary>
            Sets the MethodParameters. Use #~# separate name and value.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Management.Wmi.Instance">
            <summary>
            Sets the Wmi Instance used in Execute
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Management.Wmi.Properties">
            <summary>
            An Item Collection of Properties to get
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Management.Wmi.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Management.Wmi.Query">
            <summary>
            Gets the remote info.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Xml.XmlTask">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>Transform</i> (<b>Required: </b>Xml or XmlFile, XslTransform or XslTransformFile <b>Optional:</b> Conformance, Indent, OmitXmlDeclaration, OutputFile, TextEncoding <b>Output: </b>Output)</para>
            <para><i>Validate</i> (<b>Required: </b>Xml or XmlFile, SchemaFiles <b>Optional: </b> TargetNamespace <b>Output: </b>IsValid, Output)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <Target Name="Default">
                    <ItemGroup>
                        <Schema Include="c:\Demo1\demo.xsd"/>
                    </ItemGroup>
                    <PropertyGroup>
                        <MyXml>
                            &lt;![CDATA[
                            <Parent>
                                <Child1>Child1 data</Child1>
                                <Child2>Child2 data</Child2>
                            </Parent>]]&gt;
                        </MyXml>
                        <MyXsl>
                            &lt;![CDATA[<?xml version='1.0'?>
                            <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
                                <xsl:template match='/Parent'>
                                    <Root>
                                        <C1>
                                            <xsl:value-of select='Child1'/>
                                        </C1>
                                        <C2>
                                            <xsl:value-of select='Child2'/>
                                        </C2>
                                    </Root>
                                </xsl:template>
                            </xsl:stylesheet>]]&gt;
                        </MyXsl>
                        <MyValidXml>
                            &lt;![CDATA[
                            <D>
                                <Name full="Mike" type="3f3">
                                    <Place>aPlace</Place>
                                </Name>
                            </D>]]&gt;
                        </MyValidXml>
                    </PropertyGroup>
                    <!-- Validate an XmlFile -->
                    <MSBuild.ExtensionPack.Xml.XmlTask TaskAction="Validate" XmlFile="c:\Demo1\demo.xml" SchemaFiles="@(Schema)">
                        <Output PropertyName="Validated" TaskParameter="IsValid"/>
                        <Output PropertyName="Out" TaskParameter="Output"/>
                    </MSBuild.ExtensionPack.Xml.XmlTask>
                    <Message Text="Valid File: $(Validated)"/>
                    <Message Text="Output: $(Out)"/>
                    <!-- Validate a piece of Xml -->
                    <MSBuild.ExtensionPack.Xml.XmlTask TaskAction="Validate" Xml="$(MyValidXml)" SchemaFiles="@(Schema)">
                        <Output PropertyName="Validated" TaskParameter="IsValid"/>
                    </MSBuild.ExtensionPack.Xml.XmlTask>
                    <Message Text="Valid File: $(Validated)"/>
                    <!-- Transform an Xml file with an Xslt file -->
                    <MSBuild.ExtensionPack.Xml.XmlTask TaskAction="Transform" XmlFile="C:\Demo1\XmlForTransform.xml" XslTransformFile="C:\Demo1\Transform.xslt">
                        <Output PropertyName="Out" TaskParameter="Output"/>
                    </MSBuild.ExtensionPack.Xml.XmlTask>
                    <Message Text="Transformed Xml: $(Out)"/>
                    <!-- Transfrom a piece of Xml with an Xslt file -->
                    <MSBuild.ExtensionPack.Xml.XmlTask TaskAction="Transform" Xml="$(MyXml)" XslTransformFile="C:\Demo1\Transform.xslt">
                        <Output PropertyName="Out" TaskParameter="Output"/>
                    </MSBuild.ExtensionPack.Xml.XmlTask>
                    <Message Text="Transformed Xml: $(Out)"/>
                    <!-- Transfrom a piece of Xml with a piece of Xslt and write it out to a file with indented formatting -->
                    <MSBuild.ExtensionPack.Xml.XmlTask TaskAction="Transform" Xml="$(MyXml)" XslTransform="$(MyXsl)" OutputFile="C:\newxml.xml" Indent="true">
                        <Output PropertyName="Out" TaskParameter="Output"/>
                    </MSBuild.ExtensionPack.Xml.XmlTask>
                    <Message Text="Transformed Xml: $(Out)"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.XmlFile">
            <summary>
            Sets the XmlFile
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.XslTransformFile">
            <summary>
            Sets the XslTransformFile
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.Xml">
            <summary>
            Sets the XmlFile
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.XslTransform">
            <summary>
            Sets the XslTransformFile
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.OutputFile">
            <summary>
            Sets the OutputFile
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.TargetNamespace">
            <summary>
            Sets the TargetNamespace for Validate. Default is ""
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.SchemaFiles">
            <summary>
            Sets the Schema Files collection
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.OmitXmlDeclaration">
            <summary>
            Set the OmitXmlDeclaration option for TransForm. Default is False
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.Indent">
            <summary>
            Set the Indent option for TransForm. Default is False
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.TextEncoding">
            <summary>
            Set the Encoding option for TransForm. Default is UTF8
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.Conformance">
            <summary>
            Sets the ConformanceLevel. Supports Auto, Document and Fragment. Default is ConformanceLevel.Document
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.IsValid">
            <summary>
            Gets whether an XmlFile is valid xml
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlTask.Output">
            <summary>
            Get the Output
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Xml.XmlTask.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
        <member name="T:MSBuild.ExtensionPack.Xml.XmlFile">
            <summary>
            <b>Valid TaskActions are:</b>
            <para><i>AddAttribute</i> (<b>Required: </b>File, Element or XPath, Key, Value <b>Optional:</b>Prefix, Namespaces, RetryCount)</para>
            <para><i>AddElement</i> (<b>Required: </b>File, Element and ParentElement or Element and XPath, <b>Optional:</b> Prefix, Key, Value, Namespaces, RetryCount, InnerText, InnerXml, InsertBeforeXPath / InsertAfterXPath)</para>
            <para><i>ReadAttribute</i> (<b>Required: </b>File, XPath <b>Optional:</b> Namespaces <b>Output:</b> Value)</para>
            <para><i>ReadElements</i> (<b>Required: </b>File, XPath <b>Optional:</b> Namespaces, ReadChildrenToMetadata <b>Output: </b> Elements). Attributes are added as metadata. Use ReadChildrenToMetadata to add first level children as metadata</para>
            <para><i>ReadElementText</i> (<b>Required: </b>File, XPath <b>Optional:</b> Namespaces <b>Output:</b> Value)</para>
            <para><i>ReadElementXml</i> (<b>Required: </b>File, XPath <b>Optional:</b> Namespaces <b>Output:</b> Value)</para>
            <para><i>RemoveAttribute</i> (<b>Required: </b>File, Key, Element or XPath <b>Optional:</b> Namespaces, RetryCount)</para>
            <para><i>RemoveElement</i> (<b>Required: </b>File, Element and ParentElement or Element and XPath <b>Optional:</b> Namespaces, RetryCount)</para>
            <para><i>UpdateAttribute</i> (<b>Required: </b>File, XPath <b>Optional:</b> Namespaces, Key, Value, RetryCount)</para>
            <para><i>UpdateElement</i> (<b>Required: </b>File, XPath <b>Optional:</b> Namespaces, InnerText, InnerXml, RetryCount)</para>
            <para><b>Remote Execution Support:</b> NA</para>
            </summary>
            <example>
            <code lang="xml"><![CDATA[
            <Project ToolsVersion="4.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
                <PropertyGroup>
                    <TPath>$(MSBuildProjectDirectory)\..\MSBuild.ExtensionPack.tasks</TPath>
                    <TPath Condition="Exists('$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks')">$(MSBuildProjectDirectory)\..\..\Common\MSBuild.ExtensionPack.tasks</TPath>
                </PropertyGroup>
                <Import Project="$(TPath)"/>
                <ItemGroup>
                    <ConfigSettingsToDeploy Include="c:\machine.config">
                        <Action>RemoveElement</Action>
                        <Element>processModel</Element>
                        <ParentElement>/configuration/system.web</ParentElement>
                    </ConfigSettingsToDeploy>
                    <ConfigSettingsToDeploy Include="c:\machine.config">
                        <Action>AddElement</Action>
                        <Element>processModel</Element>
                        <ParentElement>/configuration/system.web</ParentElement>
                    </ConfigSettingsToDeploy>
                    <ConfigSettingsToDeploy Include="c:\machine.config">
                        <Action>AddAttribute</Action>
                        <Key>enable</Key>
                        <ValueToAdd>true</ValueToAdd>
                        <Element>/configuration/system.web/processModel</Element>
                    </ConfigSettingsToDeploy>
                    <ConfigSettingsToDeploy Include="c:\machine.config">
                        <Action>AddAttribute</Action>
                        <Key>timeout</Key>
                        <ValueToAdd>Infinite</ValueToAdd>
                        <Element>/configuration/system.web/processModel</Element>
                    </ConfigSettingsToDeploy>
                    <ConfigSettingsToDeploy Include="c:\machine.config">
                        <Action>RemoveAttribute</Action>
                        <Key>timeout</Key>
                        <Element>/configuration/system.web/processModel</Element>
                    </ConfigSettingsToDeploy>
                    <XMLConfigElementsToAdd Include="c:\machine.config">
                        <XPath>/configuration/configSections</XPath>
                        <Name>section</Name>
                        <KeyAttributeName>name</KeyAttributeName>
                        <KeyAttributeValue>enterpriseLibrary.ConfigurationSource</KeyAttributeValue>
                    </XMLConfigElementsToAdd>
                    <XMLConfigElementsToAdd Include="c:\machine.config">
                        <XPath>/configuration</XPath>
                        <Name>enterpriseLibrary.ConfigurationSource</Name>
                        <KeyAttributeName>selectedSource</KeyAttributeName>
                        <KeyAttributeValue>MyKeyAttribute</KeyAttributeValue>
                    </XMLConfigElementsToAdd>
                    <XMLConfigElementsToAdd Include="c:\machine.config">
                        <XPath>/configuration/enterpriseLibrary.ConfigurationSource</XPath>
                        <Name>sources</Name>
                    </XMLConfigElementsToAdd>
                    <XMLConfigElementsToAdd Include="c:\machine.config">
                        <XPath>/configuration/enterpriseLibrary.ConfigurationSource/sources</XPath>
                        <Name>add</Name>
                        <KeyAttributeName>name</KeyAttributeName>
                        <KeyAttributeValue>MyKeyAttribute</KeyAttributeValue>
                    </XMLConfigElementsToAdd>
                    <XMLConfigAttributesToAdd Include="c:\machine.config">
                        <XPath>/configuration/configSections/section[@name='enterpriseLibrary.ConfigurationSource']</XPath>
                        <Name>type</Name>
                        <Value>Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection, Microsoft.Practices.EnterpriseLibrary.Common, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Value>
                    </XMLConfigAttributesToAdd>
                    <XMLConfigAttributesToAdd Include="c:\machine.config">
                        <XPath>/configuration/enterpriseLibrary.ConfigurationSource/sources/add[@name='MyKeyAttribute']</XPath>
                        <Name>type</Name>
                        <Value>MyKeyAttribute.Common, MyKeyAttribute.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=fb2f49125f05d89</Value>
                    </XMLConfigAttributesToAdd>
                    <XMLConfigElementsToDelete Include="c:\machine.config">
                        <XPath>/configuration/configSections/section[@name='enterpriseLibrary.ConfigurationSource']</XPath>
                    </XMLConfigElementsToDelete>
                    <XMLConfigElementsToDelete Include="c:\machine.config">
                        <XPath>/configuration/enterpriseLibrary.ConfigurationSource[@selectedSource='MyKeyAttribute']</XPath>
                    </XMLConfigElementsToDelete>
                </ItemGroup>
                <Target Name="Default">
                    <!-- Work through some manipulations that don't use XPath-->
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="%(ConfigSettingsToDeploy.Action)" File="%(ConfigSettingsToDeploy.Identity)" Key="%(ConfigSettingsToDeploy.Key)" Value="%(ConfigSettingsToDeploy.ValueToAdd)" Element="%(ConfigSettingsToDeploy.Element)" ParentElement="%(ConfigSettingsToDeploy.ParentElement)" Condition="'%(ConfigSettingsToDeploy.Identity)'!=''"/>
                    <!-- Work through some manipulations that use XPath-->
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="RemoveElement" File="%(XMLConfigElementsToDelete.Identity)" XPath="%(XMLConfigElementsToDelete.XPath)" Condition="'%(XMLConfigElementsToDelete.Identity)'!=''"/>
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="AddElement" File="%(XMLConfigElementsToAdd.Identity)" Key="%(XMLConfigElementsToAdd.KeyAttributeName)" Value="%(XMLConfigElementsToAdd.KeyAttributeValue)" Element="%(XMLConfigElementsToAdd.Name)" XPath="%(XMLConfigElementsToAdd.XPath)" Condition="'%(XMLConfigElementsToAdd.Identity)'!=''"/>
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="AddAttribute" File="%(XMLConfigAttributesToAdd.Identity)" Key="%(XMLConfigAttributesToAdd.Name)" Value="%(XMLConfigAttributesToAdd.Value)" XPath="%(XMLConfigAttributesToAdd.XPath)" Condition="'%(XMLConfigAttributesToAdd.Identity)'!=''"/>
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="UpdateElement" File="c:\machine.config" XPath="/configuration/configSections/section[@name='system.data']" InnerText="NewValue"/>
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="UpdateAttribute" File="c:\machine.config" XPath="/configuration/configSections/section[@name='system.data']" Key="SomeAttribute" Value="NewValue"/>
                </Target>
                <!-- The following illustrates Namespace usage -->
                <ItemGroup>
                    <Namespaces Include="Mynamespace">
                        <Prefix>me</Prefix>
                        <Uri>http://mynamespace</Uri>
                    </Namespaces>
                    <XMLConfigElementsToDelete1 Include="c:\test.xml">
                        <XPath>//me:MyNodes/me:sources</XPath>
                    </XMLConfigElementsToDelete1>
                    <XMLConfigElementsToAdd1 Include="c:\test.xml">
                        <XPath>//me:MyNodes</XPath>
                        <Name>sources</Name>
                    </XMLConfigElementsToAdd1>
                </ItemGroup>
                <Target Name="DefaultWithNameSpace">
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="RemoveElement" Namespaces="@(Namespaces)" File="%(XMLConfigElementsToDelete1.Identity)" XPath="%(XMLConfigElementsToDelete1.XPath)" Condition="'%(XMLConfigElementsToDelete1.Identity)'!=''"/>
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="AddElement" Namespaces="@(Namespaces)" File="%(XMLConfigElementsToAdd1.Identity)" Key="%(XMLConfigElementsToAdd1.KeyAttributeName)" Value="%(XMLConfigElementsToAdd1.KeyAttributeValue)" Element="%(XMLConfigElementsToAdd1.Name)" XPath="%(XMLConfigElementsToAdd1.XPath)" Condition="'%(XMLConfigElementsToAdd1.Identity)'!=''"/>
                </Target>
                <ItemGroup>
                    <Namespaces2 Include="Mynamespace">
                        <Prefix>xs</Prefix>
                        <Uri>http://www.w3.org/2001/XMLSchema</Uri>
                    </Namespaces2>
                </ItemGroup>
                <Target Name="InsertBeforeXPath">
                    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="AddElement"
                    File="d:\a\tempinsertbeforexpath.xml"
                    Namespaces="@(Namespaces2)"
                    ParentElement="/xs:schema"
                    Prefix="xs"
                    Element="test"
                    Key="name"
                    Value ="new"
                    InsertBeforeXPath="/xs:schema/xs:log[@name='logger']"/>
                </Target>
            </Project>
            ]]></code>    
            </example>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.Element">
            <summary>
            Sets the element. For AddElement, if the element exists, it's InnerText / InnerXml will be updated
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.InnerText">
            <summary>
            Sets the InnerText.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.InnerXml">
            <summary>
            Sets the InnerXml.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.Prefix">
            <summary>
            Sets the Prefix used for an added element/attribute, prefix must exists in Namespaces.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.ParentElement">
            <summary>
            Sets the parent element.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.Key">
            <summary>
            Sets the Attribute key.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.Value">
            <summary>
            Gets or Sets the Attribute key value. Also stores the result of any Read TaskActions
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.Elements">
            <summary>
            Gets the elements selected using ReadElements
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.File">
            <summary>
            Sets the file.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.XPath">
            <summary>
            Specifies the XPath to be used
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.InsertBeforeXPath">
            <summary>
            Specifies the XPath to be used to control where a new element is added. The Xpath must resolve to single node.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.InsertAfterXPath">
            <summary>
            Specifies the XPath to be used to control where a new element is added. The Xpath must resolve to single node.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.Namespaces">
            <summary>
            TaskItems specifiying "Prefix" and "Uri" attributes for use with the specified XPath
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.RetryCount">
            <summary>
            Sets a value indicating how many times to retry saving the file, e.g. if files are temporarily locked. Default is 5. The retry occurs every 5 seconds.
            </summary>
        </member>
        <member name="P:MSBuild.ExtensionPack.Xml.XmlFile.ReadChildrenToMetadata">
            <summary>
            When using ReadElements, specifies whether the first level child elements should be added as metadata. Child elements will override any read attributes of the same name. Default is false.
            </summary>
        </member>
        <member name="M:MSBuild.ExtensionPack.Xml.XmlFile.InternalExecute">
            <summary>
            Performs the action of this task.
            </summary>
        </member>
    </members>
</doc>
